<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Swagger on 程序员安仔</title><link>https://www.hotmindshare.com/series/swagger/</link><description>Recent content in Swagger on 程序员安仔</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>粤ICP备2023148789号</copyright><lastBuildDate>Sat, 21 Oct 2023 12:22:54 +0800</lastBuildDate><atom:link href="https://www.hotmindshare.com/series/swagger/index.xml" rel="self" type="application/rss+xml"/><item><title>八、全局搜索</title><link>https://www.hotmindshare.com/docs/spec/swagger/8/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/8/</guid><description>SwaggerBootstrapUi提供了全局搜索功能,当开发者不清楚某一接口时,可使用搜索功能快速定位到接口文档
搜索关键字主要包括：URL地址、接口说明、方法类型、接口描述</description></item><item><title>二、项目背景</title><link>https://www.hotmindshare.com/docs/spec/swagger/2/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/2/</guid><description>大概是在2017年4月份,我们团队整个开发方式都决定使用前后端分离的方式来合作开发,前后端分离当时整个技术方案也是由我来负责整理，探索，如何让整个团队更高效的开发，完成自己的本职工作.从一开始的jsonp，到后面nginx反向代理，这里面我也收获了很多东西，也写了一些相关的博客总结，
但最让人头疼的还是前后端如何针对接口来对接，当时找了很多解决方案，一开始使用的是叫apidocs的，有些类似于写java的注释，使用起来还是不错的，不过没有在线生成的，文档写完后需要单独命令来生成一个文档，挺麻烦，后来就放弃了
最终就考虑使用swagger来做文档的这块，但swagger大家都知道，swagger的ui虽然能把文档说清楚，但是不怎么好用，可能不适合我们国人的眼光吧，至少我是这么认为的，所以当时也就想看看swagger的生成方式，swagger-bootstrap-ui就因此诞生了
这里谈谈swagger，虽然很多人喷他，不好用，基于注解，代码入侵很强，等等 很多原因。但总体来看，swagger发展至今，包括在各个语言，nodeJs、.net、java、php等等，它可以说是一个有些接口规范的东西，从开始，到一步步规范，其实是一个很艰难的过程，任何事物，都不是尽善尽美的，swagger也是一样，至少它给这么多语言提供了一种文档生成的解决方案，其价值就远超它本身的缺点
在Java里面，是springfox实现了swagger的接口方式，其他语言也类似.
鄙人一直觉得如果前面有人开发出来这个东西，而且用户范围，稳定性都相对较高的情况下，这个东西一定是有他的意义存在的，站在巨人的肩膀上，做正确的事，一直是我认为符合实际情况的,起码你不用自己填坑，因为，做开源，一个想法在当时，可能比较新颖，关注度很高，但是我想，大部分人都逃离不了惰性，缺少的是持之以恒，特别是在中国，很多开源其实都是个人在做（包括我自己的这个swagger-bootstrap-ui），意识上，相对国外还是比较薄弱的,而且还有精力，锲而不舍，任重而道远矣~！
所以，swagger-bootstrap-ui仅仅只是一个ui包，里面不包括任何Java代码，基于swagger，希望为swagger的生态发展做一份贡献。
swagger-bootstrap-ui开源至今也有一年4月有余了，为自己一直坚持下来打call，也会一直坚持下去，继续维护它，东西虽小,但坚持下去总会有收获.</description></item><item><title>二十、文件上传</title><link>https://www.hotmindshare.com/docs/spec/swagger/20/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/20/</guid><description>关于文件上传的支持,很多朋友询问为何Ui界面不显示上传选择页面元素,而是输入框,这里做一个统一的说明
在SwaggerBootstrapUi以前的版本中(1.8.9之前),如果需要使用文件上传，界面显示,需要做如下代码设置：
1@ApiOperation(value = &amp;#34;多文件MultipartFile上传&amp;#34;) 2@ApiImplicitParams({@ApiImplicitParam(name = &amp;#34;file[]&amp;#34;, value = &amp;#34;文件流对象,接收数组格式&amp;#34;, required = true,dataType = &amp;#34;MultipartFile&amp;#34;,allowMultiple = true), 3 @ApiImplicitParam(name = &amp;#34;title&amp;#34;, value = &amp;#34;title&amp;#34;, required = true)} 4 ) 5@RequestMapping(value=&amp;#34;/uploadMaterial&amp;#34;,method = RequestMethod.POST) 6@ResponseBody 7public RestMessage uploadMaterial(@RequestParam(value=&amp;#34;file[]&amp;#34;,required = true) MultipartFile[] files,@RequestParam(value = &amp;#34;title&amp;#34;) String title, HttpServletRequest request) throws IOException { 8 //int mul=1*1024*1024; 9 List&amp;lt;Map&amp;gt; uploadFiles= upload(request,files); 10 RestMessage rm=new RestMessage(); 11 rm.setData(uploadFiles); 12 return rm; 需要指定dataType=&amp;quot;MultipartFile&amp;quot;,并且allowMultiple = true必须设置,该属性从字面意思能知道,允许多文件上传，这里需要说明一下,因为在以前的版本作者并不知道文件的类型,所以特意强加了MultipartFile类型,来达到Ui的线上显示效果,所以单文件的上传一直并未支持.
在1.9.0版本中，添加了对单文件上传的支持,多文件上传不需要多个input元素,开发者只需要按住Ctrl键即可多选文件进行上传，三种情况供大家参考使用：</description></item><item><title>二十八、SpringBoot访问doc.html页面404</title><link>https://www.hotmindshare.com/docs/spec/swagger/28/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/28/</guid><description>默认情况下并不需要添加此配置即可访问
很多朋友在使用SpringBoot集成swagger-bootstrap-ui后，都无法访问doc.html界面，此时，你可能需要实现SpringBoot的WebMvcConfigurer接口，添加相关的ResourceHandler,代码如下：
1@SpringBootApplication 2public class SwaggerBootstrapUiDemoApplication implements WebMvcConfigurer{ 3 @Override 4 public void addResourceHandlers(ResourceHandlerRegistry registry) { 5 registry.addResourceHandler(&amp;#34;doc.html&amp;#34;).addResourceLocations(&amp;#34;classpath*:/META-INF/resources/&amp;#34;); 6 registry.addResourceHandler(&amp;#34;/webjars/**&amp;#34;).addResourceLocations(&amp;#34;classpath*:/META-INF/resources/webjars/&amp;#34;); 7 } 或者
1 2@SpringBootApplication 3public class SwaggerBootstrapUiDemoApplication implements WebMvcConfigurer{ 4 @Override 5 public void addResourceHandlers(ResourceHandlerRegistry registry) { 6 registry.addResourceHandler(&amp;#34;doc.html&amp;#34;).addResourceLocations(&amp;#34;classpath:/META-INF/resources/&amp;#34;); 7 registry.addResourceHandler(&amp;#34;/webjars/**&amp;#34;).addResourceLocations(&amp;#34;classpath:/META-INF/resources/webjars/&amp;#34;); 8 } 如果你是使用的老的版本SpringBoot,通过继承WebMvcConfigurationSupport来扩展SpringBoot相关的配置,则把以上配置加在相应的addResourceHandlers方法中即可
推荐使用实现WebMvcConfigurer接口的方式来进行扩展
如果以上方式还是不行,建议开启Spring的Debug日志来进行跟踪,一般访问doc.html页面会出现如下日志(成功情况下)：
12019-04-19 13:39:36,896 DEBUG (AbstractHandlerMethodMapping.java:312)- Looking up handler method for path /doc.html 22019-04-19 13:39:36,902 DEBUG (AbstractHandlerMethodMapping.java:322)- Did not find handler method for [/doc.html] 32019-04-19 13:39:36,921 DEBUG (AbstractUrlHandlerMapping.</description></item><item><title>二十二、基于静态Swagger JSON文件</title><link>https://www.hotmindshare.com/docs/spec/swagger/22/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/22/</guid><description>基于静态Swagger JSON文件的方式预览很简单,首先需要一个HTTP的web服务即可
两种选择：
Nginx IIS 不管是基于nginx还是IIS，首先都需要先本地生成一个静态的Swagger JSON文件结构
swagger-bootstrap-ui此处提供了一个简单的示例
修改项目json目录下的group.json
1[ 2 { 3 &amp;#34;name&amp;#34;: &amp;#34;swagger&amp;#34;, 4 &amp;#34;url&amp;#34;: &amp;#34;/json/swagger.json&amp;#34;, 5 &amp;#34;swaggerVersion&amp;#34;: &amp;#34;2.0&amp;#34;, 6 &amp;#34;location&amp;#34;: &amp;#34;/json/swagger.json&amp;#34; 7 }, 8 { 9 &amp;#34;name&amp;#34;: &amp;#34;swagger1&amp;#34;, 10 &amp;#34;url&amp;#34;: &amp;#34;/json/swagger1.json&amp;#34;, 11 &amp;#34;swaggerVersion&amp;#34;: &amp;#34;2.0&amp;#34;, 12 &amp;#34;location&amp;#34;: &amp;#34;/json/swagger1.json&amp;#34; 13 } 我们在静态的group.json文件中预定义了两个静态的swagger JSON文件,也同时存放在json文件夹中
swagger.json的内容为swagger接口/v2/api-docs中响应的内容
1{ 2 &amp;#34;swagger&amp;#34;: &amp;#34;2.0&amp;#34;, 3 &amp;#34;info&amp;#34;: { 4 &amp;#34;description&amp;#34;: &amp;#34;&amp;lt;div style=&amp;#39;font-size:14px;color:red;&amp;#39;&amp;gt;swagger-bootstrap-ui-demo RESTful APIs&amp;lt;/div&amp;gt;&amp;#34;, 5 &amp;#34;version&amp;#34;: &amp;#34;1.0&amp;#34;, 6 &amp;#34;title&amp;#34;: &amp;#34;swagger-bootstrap-ui很棒~~~！！！&amp;#34;, 7 &amp;#34;termsOfService&amp;#34;: &amp;#34;http://www.group.com/&amp;#34;, 8 &amp;#34;contact&amp;#34;: { 9 &amp;#34;name&amp;#34;: &amp;#34;group@qq.</description></item><item><title>二十九、离线文档markdown格式错乱</title><link>https://www.hotmindshare.com/docs/spec/swagger/29/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/29/</guid><description>即使文档格式错乱，但是在相关markdown转换软件中依然是可以正常使用的，该功能使用art-template来渲染，多少会出现一些空格、换行之类的问题
markdown软件推荐使用Typora,我一直在用，相当好用，适合不会排版word的程序员们</description></item><item><title>二十六、Springfox-Swagger说明</title><link>https://www.hotmindshare.com/docs/spec/swagger/26/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/26/</guid><description>关于SpringfoxSwagger详细使用,这里不过多叙述,可自行通过下面地址查阅
GitHub:https://github.com/springfox/springfox
文档：http://springfox.io
在说swagger-bootstrap-ui的代码之前,先看Springfox-Swagger提供的2个接口，swagger-bootstrap-ui包也是根据这2个接口来动态生成文档的
分组接口：/swagger-resources
详情实例接口：/v2/api-docs
Swagger分组 Swagger的分组接口是用过后端配置不同的扫描包，将后端的接口，按配置的扫描包基础属性响应给前端，看看分组接口响应的json内容：
1[ 2 { 3 &amp;#34;name&amp;#34;: &amp;#34;分组接口&amp;#34;, 4 &amp;#34;url&amp;#34;: &amp;#34;/v2/api-docs?group=分组接口&amp;#34;, 5 &amp;#34;swaggerVersion&amp;#34;: &amp;#34;2.0&amp;#34;, 6 &amp;#34;location&amp;#34;: &amp;#34;/v2/api-docs?group=分组接口&amp;#34; 7 }, 8 { 9 &amp;#34;name&amp;#34;: &amp;#34;默认接口&amp;#34;, 10 &amp;#34;url&amp;#34;: &amp;#34;/v2/api-docs?group=默认接口&amp;#34;, 11 &amp;#34;swaggerVersion&amp;#34;: &amp;#34;2.0&amp;#34;, 12 &amp;#34;location&amp;#34;: &amp;#34;/v2/api-docs?group=默认接口&amp;#34; 13 } 在Springfox-Swagger有些较低的版本中，并没有location属性，高版本会有该属性
属性 说明 name 分组名称 url 接口url swaggerVersion 版本号 location 接口location，同url属性 分组的后端Java配置代码如下：
1@Bean(value = &amp;#34;defaultApi&amp;#34;) 2public Docket defaultApi() { 3 ParameterBuilder parameterBuilder=new ParameterBuilder(); 4 List&amp;lt;Parameter&amp;gt; parameters= Lists.newArrayList(); 5 parameterBuilder.name(&amp;#34;token&amp;#34;).description(&amp;#34;token令牌&amp;#34;).modelRef(new ModelRef(&amp;#34;String&amp;#34;)) 6 .</description></item><item><title>二十七、SwaggerBootstrapUi说明</title><link>https://www.hotmindshare.com/docs/spec/swagger/27/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/27/</guid><description>有了以上Springfox-Swagger的两个接口，就可以根据这2个接口来生成页面了，这里有一个前提，为什么可以根据这个来生成，因为Springfox-Swagger给出的两个接口地址是固定的，所以写这套UI也能得到通用.
swagger-bootstrap-ui主要使用到的前端技术栈主要包括：
属性 说明 jquery &amp;lt;http://getbootstrap.com layer &amp;lt;” rel=”nofollow”&amp;gt;https://github.com/yesmeck/jquery-jsonview&amp;gt;; clipboard &amp;lt;” rel=”nofollow”&amp;gt;https://github.com/axios/axios&amp;gt;; marked &amp;lt;” rel=”nofollow”&amp;gt;https://github.com/aui/art-template&amp;gt;; 这里主要说一些swagger-bootstrap-ui的一些思路，源码的话大家可以去码云或者GitHub上去看
1、 构建SwaggerBootstrapUi主对象，类似Java后端面向对象的方式来写，定义一些基础属性,这样也方便后期扩展；
1var SwaggerBootstrapUi=function () { 2 //swagger请求api地址 3 this.url=&amp;#34;swagger-resources&amp;#34;; 4 //文档id 5 this.docId=&amp;#34;content&amp;#34;; 6 //tabid 7 this.tabId=&amp;#34;tabUl&amp;#34;; 8 this.tabContentId=&amp;#34;tabContent&amp;#34;; 9 this.searchEleId=&amp;#34;spanSearch&amp;#34;; 10 this.searchTxtEleId=&amp;#34;searchTxt&amp;#34;; 11 this.menuId=&amp;#34;menu&amp;#34;; 12 this.searchMenuId=&amp;#34;searchMenu&amp;#34;; 13 //实例分组 14 this.instances=new Array(); 15 //当前分组实例 16 this.currentInstance=null; 17 //动态tab 18 this.globalTabId=&amp;#34;sbu-dynamic-tab&amp;#34;; 19 this.globalTabs=new Array(); 20 this.tabsLiContent=null; 21 this.tabsPostProcessors=null; 包括swagger的响应的属性，也重新在js中定义函数，使用面向对象的方式来操作
2、 初始化工作，sbu的入口即main方法,类似于SpringBoot的main方法，读源码的朋友可以从这个方法进入；
1/*** 2 * swagger-bootstrap-ui的main方法,初始化文档所有功能,类似于SpringBoot的main方法 3 */ 4SwaggerBootstrapUi.</description></item><item><title>二十三、基于Nginx反向代理</title><link>https://www.hotmindshare.com/docs/spec/swagger/23/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/23/</guid><description>在静态部署预览Swagger JSON章节中我们已经讲过如何通过nginx来部署静态文件预览文档，但此时我们会发现存在一个问题，即无法进行接口的调试。
我们借助于nginx的反向代理功能,帮助我们实现接口的调试功能
假设还是提供静态JSON的方式,我们只需要在nginx的配置节点中添加一层location即可
如下：
1server { 2 listen 18001; 3 server_name 192.168.0.112; 4 charset koi8-r; 5 location / { 6 root /mnt/application/swagger-static; 7 } 8 location /api/ { 9 // Swagger JSON文件中所有以api开头的接口全部走8999的代理 10 proxy_pass http://127.0.0.1:8999/api/; 11 client_max_body_size 200m; 12 } 13 } 通过以上配置,我们即可预览及调试我们的接口文档
但是
我们又会发现问题,很多时候,我们所写的接口可能并不规范,并非所有的接口都是以/api开头的,或者以固定的其他格式开头的接口,那此时如果我们以上面的配置方式来配置,当我们的接口以/admin/test这种形式出现时,我们就无法调试该接口
那或许我们可以换一种方式,我们将该服务下的所有接口理解为一个服务,我们给一个服务取一个特点的名称,然后通过聚合服务的方式,将文档聚合显示出来,这样既可进行调试
例如：
将127.0.0.1:8999理解为service1
我们在访问该服务的接口时加上服务前缀：/service1/api/xxx,此时,不管我们的接口又多么不规范,只要是service1下的接口,nginx都会将它转发到127.0.0.1:8999这台服务上,这样我们也完成了接口的调试
nginx配置：
1server { 2 listen 18001; 3 server_name 192.168.0.112; 4 charset koi8-r; 5 location / { 6 root /mnt/application/swagger-static; 7 } 8 location /service1 { 9 proxy_pass http://127.</description></item><item><title>二十四、基于Spring Cloud Zuul方式</title><link>https://www.hotmindshare.com/docs/spec/swagger/24/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/24/</guid><description>在基于nginx配置的环节,其实我们已经可以利用nginx的配置,帮助我们聚合文档服务了,而通过代码的方式该如何实现?
在Spring Cloud微服务架构中,各个子服务都是分散的,每个服务集成了Swagger文档,但是接口对接时需要单独分别访问,很麻烦,效率低下,
而Zuul可以帮助我们解决此难题,将多个微服务的Swagger接口聚合到一个文档中,这样整个微服务架构下只会存在一个文档出口,统一文档口径
本文档只涉及如何整合Swagger及Zuul,其他相关知识点请自行搜索解决.
项目结构 整个项目结构如下：
1swagger-bootstrap-ui-zuul 2├── service-server -- eureka服务中心 3├── service-order -- 微服务之一订单服务模块 4├── service-user -- 微服务之一用户服务模块 5├── service-doc -- 文档中心,整合微服务Swagger文档 eureka注册服务中心以及微服务模块Swagger的配置集成使用这里不过多骜述,和常规无异.
我们在eureka服务中心可以看到整个微服务模块,如下图：
![Image 1][]
微服务模块 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 订单、用户两个微服务模块配置没有什么区别,都是将自己的服务注册到eureka中,并且每个微服务都集成Swagger的配置
1@EnableEurekaClient 2@SpringBootApplication 3public class ServiceUserApplication { 4 static Logger logger= LoggerFactory.getLogger(ServiceUserApplication.class); 5 //... 此处需要注意的是Swagger的配置中,不需要设置groupName属性
Swagger配置如下：
1 2@Configuration 3@EnableSwagger2 4@EnableSwaggerBootstrapUI 5@Import(BeanValidatorPluginsConfiguration.class) 6public class SwaggerConfiguration { 7 @Bean(value = &amp;#34;userApi&amp;#34;) 8 @Order(value = 1) 9 public Docket groupRestApi() { 10 return new Docket(DocumentationType.</description></item><item><title>二十五、基于Spring Cloud Gateway</title><link>https://www.hotmindshare.com/docs/spec/swagger/25/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/25/</guid><description>待完善</description></item><item><title>二十一、个性化配置快速访问参数说明</title><link>https://www.hotmindshare.com/docs/spec/swagger/21/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/21/</guid><description>在1、9.2版本中,新增了可以通过参数来快速设置个性化配置的功能
使用场景：A:后端工程师 B:前端开发工程师
在1.9.2版本之前
1A:我已经完成了接口的开发,也已经开启了SwaggerBootstrapUi的增强功能,并且在本地联调测试通过,可以发给B了 2B：收到文档地址，http://ip:port/doc.html 3A:B，你首先打开文档管理 -&amp;gt; 个性化配置 开启SwaggerBootstrapUi的增强功能，可以排序，接口更清晰呀 4B：好的~~!!（PS:就不能直接给弄好吗? o(╥﹏╥)o） 通过以上一个场景,我想大多数开发同学都觉得很麻烦还需要前端的开发一顿操作,就不能直接给弄好吗? o(╥﹏╥)o
自1.9.2版本之后
为解决以上的问题,自1.9.2版本后，加入了通过浏览器参数来快速配置个性化配置的功能,前端开发无需关注文档排序、是否开启缓存等操作,只要后端觉得该个性化功能合理,直接通过地址发给前端即可
界面如下：
后端同学自测后,将配置好的个性化配置功能保存，通过复制接口地址即可分享给前端同学,前端同学就可以不用操作任何配置了，直接对接接口即可.
个性化配置参数说明 i18n国际化支持:lang=en lang可选择：中文(zh)、English(en) 开启请求参数缓存：cache=1 菜单Api地址显示: showMenuApi=1 分组tag显示dsecription说明属性: showDes=1 开启RequestMapping接口过滤,默认只显示: filterApi=1 filterApiType=post 开启缓存已打开的api文档:cacheApi=1 启用SwaggerBootstrapUi提供的增强功能:plus=1</description></item><item><title>九、全局参数</title><link>https://www.hotmindshare.com/docs/spec/swagger/9/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/9/</guid><description>SwaggerBootstrapUi提供基于UI临时设置全局参数功能,例如后台全局token参数等.
目前全局参数功能主要提供两种参数类型：query(表单)、header(请求头)
该功能是在还没有支持全局参数时临时配置的功能，如果后端Swagger有配置全局参数，该功能可以无视
功能目录：文档管理 -&amp;gt; 全局参数设置</description></item><item><title>六、界面风格</title><link>https://www.hotmindshare.com/docs/spec/swagger/6/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/6/</guid><description>使用过swagger-bootstrap-ui的朋友应该都知道，它是基于左右菜单式的布局方式,这和目前大部分后台管理系统有些类似，使用这种风格的原因,我想应该是更符合国人的操作习惯吧.
相比较swagger-ui的上下依次铺开的结构，我想这种方式更适合接口对接人员.
每个接口文档主要通过文档说明和在线调试两个核心tab组件展开介绍,同时打开文档说明则会以多tab的方式逐次展开文档说明,来回切换查看不同接口文档说明,方便快捷.
如下图：
文档说明：会根据Swagger的标准JSON文件,详细的列出该接口的信息说明,主要包括：接口地址、接口类型、produces、consumes、接口参数字段说明、请求示例、响应参数说明、响应状态码、响应示例
在线调试：开发者可以基于此文档进行接口的调试,ui会根据接口的信息自动列出请求参数、请求地址等信息,开发者只需要填写相应的字段值即可联调测试</description></item><item><title>七、离线文档(Markdown)</title><link>https://www.hotmindshare.com/docs/spec/swagger/7/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/7/</guid><description>SwaggerBootstrapUi提供根据Swagger标准JSON文件生成一份详细的Markdown格式源文件供开发者使用
开发者可以保存后，使用其他的markdown转换软件，转换成pdf、word、html等离线文件，发送给别人
功能目录：文档管理 -&amp;gt; 离线文档(MD)</description></item><item><title>三、快速开始</title><link>https://www.hotmindshare.com/docs/spec/swagger/3/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/3/</guid><description>Java开发 如果你是一名Java开发工程师,那么使用swagger-bootstrap-ui将会非常简单,只需要在原使用的基础上,添加swagger-bootstrap-ui的maven引用jar包即可
Maven中引入Jar包 由于是springfox-swagger的增强UI包,所以基础功能依然依赖Swagger,springfox-swagger的jar包必须引入
1&amp;lt;dependency&amp;gt; 2 &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt; 3 &amp;lt;artifactId&amp;gt;springfox-swagger2&amp;lt;/artifactId&amp;gt; 4 &amp;lt;version&amp;gt;2.9.2&amp;lt;/version&amp;gt; 5&amp;lt;/dependency&amp;gt; 然后引入SwaggerBootstrapUi的jar包
1&amp;lt;dependency&amp;gt; 2 &amp;lt;groupId&amp;gt;com.github.xiaoymin&amp;lt;/groupId&amp;gt; 3 &amp;lt;artifactId&amp;gt;swagger-bootstrap-ui&amp;lt;/artifactId&amp;gt; 4 &amp;lt;version&amp;gt;${lastVersion}&amp;lt;/version&amp;gt; 5&amp;lt;/dependency&amp;gt; 编写Swagger2Config配置文件 Swagger2Config配置文件如下：
1@Configuration 2@EnableSwagger2 3public class SwaggerConfiguration { 4 @Bean 5 public Docket createRestApi() { 6 return new Docket(DocumentationType.SWAGGER_2) 7 .apiInfo(apiInfo()) 8 .select() 9 .apis(RequestHandlerSelectors.basePackage(&amp;#34;com.bycdao.cloud&amp;#34;)) 10 .paths(PathSelectors.any()) 11 .build(); 12 } 13 private ApiInfo apiInfo() { 14 return new ApiInfoBuilder() 15 .title(&amp;#34;swagger-bootstrap-ui RESTful APIs&amp;#34;) 16 .description(&amp;#34;swagger-bootstrap-ui&amp;#34;) 17 .termsOfServiceUrl(&amp;#34;http://localhost:8999/&amp;#34;) 18 .</description></item><item><title>三十、SpringMvc访问页面404</title><link>https://www.hotmindshare.com/docs/spec/swagger/30/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/30/</guid><description>SpringMvc中文档出现异常一般分2种情况：
doc.html打开提示404 doc.html已经可以打开,但是页面无任何接口文档 针对以上两种情况的解决办法：
第一种：doc.html打开提示404?
一般无需添加此配置,如果出现这种情况,在Spring的xml配置文件中,添加Spring的静态资源映射路径即可,如下：
1&amp;lt;mvc:resources location=&amp;#34;classpath:/META-INF/resources/&amp;#34; mapping=&amp;#34;doc.html&amp;#34;/&amp;gt; 2&amp;lt;mvc:resources location=&amp;#34;classpath:/META-INF/resources/webjars/&amp;#34; mapping=&amp;#34;/webjars/**&amp;#34;/&amp;gt; 第二种：doc.html已经可以打开,但是页面无任何接口文档？
在web.xml中配置了DispatcherServlet,则需要追加一个url匹配规则,如下
1&amp;lt;!-- 配置swagger-bootstrap-ui的url请求路径--&amp;gt; 2&amp;lt;servlet-mapping&amp;gt; 3 &amp;lt;servlet-name&amp;gt;swaggerDemoMvc&amp;lt;/servlet-name&amp;gt; 4 &amp;lt;url-pattern&amp;gt;/v2/api-docs&amp;lt;/url-pattern&amp;gt; 5&amp;lt;/servlet-mapping&amp;gt; 6&amp;lt;servlet-mapping&amp;gt; 7 &amp;lt;servlet-name&amp;gt;swaggerDemoMvc&amp;lt;/servlet-name&amp;gt; 8 &amp;lt;url-pattern&amp;gt;/swagger-resources&amp;lt;/url-pattern&amp;gt; 9&amp;lt;/servlet-mapping&amp;gt; 10&amp;lt;servlet-mapping&amp;gt; 11 &amp;lt;servlet-name&amp;gt;swaggerDemoMvc&amp;lt;/servlet-name&amp;gt; 12 &amp;lt;url-pattern&amp;gt;/swagger-resources/configuration/ui&amp;lt;/url-pattern&amp;gt; 13&amp;lt;/servlet-mapping&amp;gt; 14&amp;lt;servlet-mapping&amp;gt; 15 &amp;lt;servlet-name&amp;gt;swaggerDemoMvc&amp;lt;/servlet-name&amp;gt; 16 &amp;lt;url-pattern&amp;gt;/swagger-resources/configuration/security&amp;lt;/url-pattern&amp;gt; 17&amp;lt;/servlet-mapping&amp;gt; 18&amp;lt;!--此接口地址为SwaggerBootstrapUi提供的增强地址,如果不使用增强功能,可排除此配置--&amp;gt; 19&amp;lt;servlet-mapping&amp;gt; 20 &amp;lt;servlet-name&amp;gt;swaggerDemoMvc&amp;lt;/servlet-name&amp;gt; 21 &amp;lt;url-pattern&amp;gt;/v2/api-docs-ext&amp;lt;/url-pattern&amp;gt; 22&amp;lt;/servlet-mapping&amp;gt; 关于SpringMvc的代码示例可参考swagger-bootstrap-ui-demo-mvc</description></item><item><title>三十二、文件上传不显示上传选择文本域</title><link>https://www.hotmindshare.com/docs/spec/swagger/32/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/32/</guid><description>在使用SwaggerBootstrapUi的朋友经常询问的一个问题,为什么上传参数file对象不显示file文本域,而是普通文本,如下图：
因为Springfox-Swagger针对不同的版本,某些版本也会出现此问题,为一劳永逸,SwaggerBootstrapUi特别指定需要强指定dataType类型为MultipartFile
代码示例(UploadController.java)：
1@ApiOperation(value = &amp;#34;文件素材上传接口&amp;#34;) 2@ApiImplicitParams({@ApiImplicitParam(name = &amp;#34;file[]&amp;#34;, value = &amp;#34;文件流对象,接收数组格式&amp;#34;, required = true,dataType = &amp;#34;MultipartFile&amp;#34;,allowMultiple = true), 3 @ApiImplicitParam(name = &amp;#34;title&amp;#34;, value = &amp;#34;title&amp;#34;, required = true)} 4 ) 5@RequestMapping(value=&amp;#34;/uploadMaterial&amp;#34;,method = RequestMethod.POST) 6@ResponseBody 7public RestMessage uploadMaterial(@RequestParam(value=&amp;#34;file[]&amp;#34;,required = true) MultipartFile[] files,@RequestParam(value = &amp;#34;title&amp;#34;) String title, HttpServletRequest request) throws IOException { 8 //int mul=1*1024*1024; 9 String realPath=request.getSession().getServletContext().getRealPath(&amp;#34;/upload&amp;#34;); 10 File realFile=new File(realPath); 11 if (!realFile.exists()){ 12 realFile.mkdirs(); 13 } 14 List&amp;lt;Map&amp;gt; uploadFiles= Lists.</description></item><item><title>三十三、java.lang.NumberFormatException-For input string-“”</title><link>https://www.hotmindshare.com/docs/spec/swagger/33/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/33/</guid><description>很多朋友在升级Springfox-Swagger到2.9.2版本后会碰见NumberFormatException异常java.lang.NumberFormatException: For input string: “”
异常信息如下：
1java.lang.NumberFormatException: For input string: &amp;#34;&amp;#34; 2 at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) ~[na:1.8.0_111] 3 at java.lang.Long.parseLong(Long.java:601) ~[na:1.8.0_111] 4 at java.lang.Long.valueOf(Long.java:803) ~[na:1.8.0_111] 5 at 6 //more.... 解决办法是在pom.xml中排除Springfox-Swagger的Swagger-Models的jar包,重新引入，如下：
1&amp;lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&amp;gt; 2&amp;lt;dependency&amp;gt; 3 &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt; 4 &amp;lt;artifactId&amp;gt;springfox-swagger2&amp;lt;/artifactId&amp;gt; 5 &amp;lt;version&amp;gt;2.9.2&amp;lt;/version&amp;gt; 6 &amp;lt;exclusions&amp;gt; 7 &amp;lt;exclusion&amp;gt; 8 &amp;lt;groupId&amp;gt;io.swagger&amp;lt;/groupId&amp;gt; 9 &amp;lt;artifactId&amp;gt;swagger-models&amp;lt;/artifactId&amp;gt; 10 &amp;lt;/exclusion&amp;gt; 11 &amp;lt;/exclusions&amp;gt; 12&amp;lt;/dependency&amp;gt; 13&amp;lt;!-- https://mvnrepository.com/artifact/io.swagger/swagger-models --&amp;gt; 14&amp;lt;dependency&amp;gt; 15 &amp;lt;groupId&amp;gt;io.swagger&amp;lt;/groupId&amp;gt; 16 &amp;lt;artifactId&amp;gt;swagger-models&amp;lt;/artifactId&amp;gt; 17 &amp;lt;version&amp;gt;1.5.21&amp;lt;/version&amp;gt; 18&amp;lt;/dependency&amp;gt;</description></item><item><title>三十四、Swagger字段属性说明不显示</title><link>https://www.hotmindshare.com/docs/spec/swagger/34/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/34/</guid><description>不管是在SwaggerBootstrapUi以前的版本中,还是在SwaggerBootstrapUi的1.8.9版本发布新功能字段注释逐行显示时,很多朋友都会问为啥自己的UI文档上不显示注释.
1、 8.9的功能展示如下图：；
正常情况下,不管是调试还是文档说明都会显示以上字段说明(除非你没写注解说明)
这里很多朋友碰见的最多的问题主要有2个：
返回Map|Object为何不显示 使用泛型T还是不显示 不显示效果可能如下图：
返回Object不显示字段属性
返回Map为何不显示
为何返回Map不显示,大家都知道Map是Java里面的集合接口,不管是Map本身还是诸如HashMap等子实现,这类数据对于Swagger来说都是未定义结构的数据
Swagger只认识定义好的类-属性，所以接口返回Map,对于Swagger来说是没有字段展示的,这种情况同样适用与返回Object这个顶级父类.这也是为何要适用泛型T的原因
适用泛型T还是不显示
很多朋友会说我已经使用泛型T了,可是文档上还是不显示,这里主要的原因有以下几点
属性定义必须是泛型T，如下：
1private T data;//返回属性T 返回T类型的get方法必须是返回T，有时候自动生成get、setter方法插件等会将我们的代码生成返回Object，例如：
1public Object getData(){ 2 return data; 以上是错误的形式,尽管属性中已经定义为T了，正确的方式：
1public T getData(){ 2 return data; 最重要的一步,以上步骤完全正确,代码也没有问题,可是ui还是不显示属性，必须在接口层强指定泛型类型(可能是Swagger要求我们写代码要规范吧~~~),如下：
如果以上情况都ok，还是不显示说明,恭喜你发现了SwaggerBootstrapUi的一个bug，欢迎提issue反馈给我,我会搞定它的！
另外
一般在完成以上情况后,字段说明都会显示,这里再提醒一下大家,如果已经在泛型中强制约束了返回类型后,就无需在注解@ApiOperation中设置response属性值，比如如下代码
1@ApiOperation(value = &amp;#34;查询所有&amp;#34;,response=AlarmReponse.class) 2@GetMapping(&amp;#34;/queryAll&amp;#34;) 3public Rest&amp;lt;List&amp;lt;AlarmResponse&amp;gt;&amp;gt; queryAll(){ 4 //more.. 以上代码返回了泛型Rest类型的List-AlarmResponse集合,但是却ApiOperation注解中加了response属性为AlarmResponse.class，这种情况会造成Ui只显示AlarmReponse类的属性说明，这显然是不对的，因为它把Rest的属性给忽略了,所以:
一般情况下,是不写注解@ApiOperation中的response属性值,能少写就少写,将剩下的交给springfox-swagger这个框架,由它自动解析生成接口返回类型
最后贴一个简单的返回封装类供大家参考(Rest.java)
1public class Rest&amp;lt;T&amp;gt; { 2 @ApiModelProperty(value = &amp;#34;是否成功&amp;#34;) 3 private boolean success=true; 4 @ApiModelProperty(value = &amp;#34;返回对象&amp;#34;) 5 private T data; 6 @ApiModelProperty(value = &amp;#34;错误编号&amp;#34;) 7 private Integer errCode; 8 @ApiModelProperty(value = &amp;#34;错误信息&amp;#34;) 9 private String message; 10 public boolean isSuccess() { 11 return success; 12 } 13 public void setSuccess(boolean success) { 14 this.</description></item><item><title>三十五、Springfox-Swagger升级到2.9.2导致的NoSuchMethodError异常</title><link>https://www.hotmindshare.com/docs/spec/swagger/35/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/35/</guid><description>很多朋友在将SpringFox-Swagger版本升级到2.9.2版本后,运行程序都会出现如下错误：
1org.springframework.context.ApplicationContextException: Failed to start bean &amp;#39;documentationPluginsBootstrapper&amp;#39;; nested exception is com.google.common.util.concurrent.ExecutionError: java.lang.NoSuchMethodError: com.google.common.collect.FluentIterable.concat(Ljava/lang/Iterable;Ljava/lang/Iterable;)Lcom/google/common/collect/FluentIterable; 2 org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:176) 3 org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:51) 4 org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:346) 5 org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:149) 6 org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:112) 7 org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:851) 8 org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:540) 9 org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:667) 10 org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:633) 11 org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:681) 12 org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:552) 13 org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:493) 14 org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136) 15 javax.servlet.GenericServlet.init(GenericServlet.java:158) 16 org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:474) 17 org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) 18 org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:624) 19 org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) 20 org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:783) 21 org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) 22 org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:798)xxxxxxxxxx sp-nmerrororg.springframework.context.ApplicationContextException: Failed to start bean &amp;#39;documentationPluginsBootstrapper&amp;#39;; nested exception is com.google.common.util.concurrent.ExecutionError: java.lang.NoSuchMethodError: com.google.common.collect.FluentIterable.concat(Ljava/lang/Iterable;Ljava/lang/Iterable;)Lcom/google/common/collect/FluentIterable; org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:176) org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:51) org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:346) org.</description></item><item><title>三十一、Spring MVC不显示接口文档</title><link>https://www.hotmindshare.com/docs/spec/swagger/31/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/31/</guid><description>很多朋友在使用Spring MVC时,会碰到接口文档没有的情况,在此处做一个说明
1、 首先保证SwaggerConfig的配置文件中配置正确的Docket对象(即默认扫描的包路径或者基于@ApiOperation注解)；
2、 其次,区别于SpringBoot的注入,不使用@Configuration注解注入到Spring的IOC容器中,采用&amp;lt;bean&amp;gt;XML注入的方式注入到Spring的容器中,如下：；
1&amp;lt;bean id=&amp;#34;SwaggerConfig&amp;#34; class=&amp;#34;com.xiaominfo.swagger.config.SwaggerConfiguration&amp;#34;&amp;gt;&amp;lt;/bean&amp;gt; 3、 需保证注入的SwaggerConfig的bean在Spring的MVC的容器中,因为SpringMVC存在父子容器的关系,如果不将该Bean注入到SpringMVC容器中的话,Swagger就会扫描不到Controller层的接口，自然也就不会显示文档；
例如：
1&amp;lt;servlet&amp;gt; 2 &amp;lt;servlet-name&amp;gt;swaggerDemoMvc&amp;lt;/servlet-name&amp;gt; 3 &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt; 4 &amp;lt;init-param&amp;gt; 5 &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt; 6 &amp;lt;!--在第二步中注入的SwaggerConfig的bean需写在spring.xml文件中--&amp;gt; 7 &amp;lt;param-value&amp;gt;classpath:config/spring.xml&amp;lt;/param-value&amp;gt; 8 &amp;lt;/init-param&amp;gt; 9 &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt; 10 &amp;lt;/servlet&amp;gt;</description></item><item><title>十、Authorize</title><link>https://www.hotmindshare.com/docs/spec/swagger/10/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/10/</guid><description>Authorize 功能是后端配置类似JWT等权限配置而设置的,可以全局配置token等参数
当后台通过代码设置后,UI会自动识别,生成Authorize菜单功能,供开发者填相关auth参数等
后台代码示例(SwaggerConfiguration.java)：
1@Bean(value = &amp;#34;groupRestApi&amp;#34;) 2@Order(value = 1) 3public Docket groupRestApi() { 4 return new Docket(DocumentationType.SWAGGER_2) 5 .apiInfo(groupApiInfo()) 6 .groupName(&amp;#34;分组接口&amp;#34;) 7 .select() 8 .apis(RequestHandlerSelectors.basePackage(&amp;#34;com.swagger.bootstrap.ui.demo.group&amp;#34;)) 9 .paths(PathSelectors.any()) 10 .build().securityContexts(Lists.newArrayList(securityContext(),securityContext1())).securitySchemes(Lists.&amp;lt;SecurityScheme&amp;gt;newArrayList(apiKey(),apiKey1())); 11private ApiKey apiKey() { 12 return new ApiKey(&amp;#34;BearerToken&amp;#34;, &amp;#34;Authorization&amp;#34;, &amp;#34;header&amp;#34;); 13private ApiKey apiKey1() { 14 return new ApiKey(&amp;#34;BearerToken1&amp;#34;, &amp;#34;Authorization-x&amp;#34;, &amp;#34;header&amp;#34;); 15private SecurityContext securityContext() { 16 return SecurityContext.builder() 17 .securityReferences(defaultAuth()) 18 .forPaths(PathSelectors.regex(&amp;#34;/.*&amp;#34;)) 19 .build(); 20private SecurityContext securityContext1() { 21 return SecurityContext.builder() 22 .</description></item><item><title>十八、访问权限控制</title><link>https://www.hotmindshare.com/docs/spec/swagger/18/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/18/</guid><description>在开发SwaggerBootstrapUi功能时,同很多开发者经常讨论的问题就是在生产环境时,屏蔽或者去除Swagger的文档很麻烦
,通常有时候我们碰到的问题如下：
系统部署生产环境时,我们想屏蔽Swagger的文档功能,不管是接口或者html文档 通常我们有时候需要生产环境部署后,又需要Swagger的文档调试功能,辅助开发者调试,但是存在安全隐患,没有对Swagger的资源接口过滤 等等 针对以上两种情况,SwaggerBootstrapUi在1.9.0的版本中加入了过滤Filter功能,如果开发者使用SpringBoot开发框架进行开发的话,只需在application.properties或者application.yml配置文件中配置相关属性即可方便的解决上面的问题,不用删除Springfox-swagger的jar包或者删除相关代码等复杂的操作,提升开发体验.
开启生产环境,屏蔽Swagger所有资源接口 目前Springfox-Swagger以及SwaggerBootstrapUi提供的资源接口包括如下：
资源 说明 /doc.html SwaggerBootstrapUi提供的文档访问地址 /api-docs-ext SwaggerBootstrapUi提供的增强接口地址 /swagger-resources Springfox-Swagger提供的分组接口 /api-docs Springfox-Swagger提供的分组实例详情接口 /swagger-ui.html Springfox-Swagger提供的文档访问地址 /swagger-resources/configuration/ui Springfox-Swagger提供 /swagger-resources/configuration/security Springfox-Swagger提供 当我们部署系统到生产系统,为了接口安全,需要屏蔽所有Swagger的相关资源
如果使用SpringBoot框架,只需在application.properties或者application.yml配置文件中配置
1swagger.production=true 配置此属性后,所有资源都会屏蔽输出.
效果图如下：
访问页面加权控制 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 不管是官方的swagger-ui.html或者doc.html,目前接口访问都是无需权限即可访问接口文档的,很多朋友以前问我能不能提供一个登陆界面的功能,开发者输入用户名和密码来控制界面的访问,只有知道用户名和密码的人才能访问此文档
做登录页控制需要有用户的概念,所以相当长一段时间都没有提供此功能
不过在1.9.0版本时,针对Swagger的资源接口,SwaggerBootstrapUi提供了简单的Basic认证功能
效果图如下：
允许开发者在配置文件中配置一个静态的用户名和密码,当对接者访问Swagger页面时,输入此配置的用户名和密码后才能访问Swagger文档页面,如果您使用SpringBoot开发,则只需在相应的application.properties或者application.yml中配置如下：
1## 开启Swagger的Basic认证功能,默认是false 2swagger.basic.enable=true 3## Basic认证用户名 4swagger.basic.username=zhangsan 5## Basic认证密码 6swagger.basic.password=123 如果用户开启了basic认证功能,但是并未配置用户名及密码,SwaggerBootstrapUi提供了默认的用户名和密码：
1admin/123321 如果您使用的是SpringMVC,则需要在web.xml中添加相应的Filter,参考如下：
1&amp;lt;!--SwaggerBootstrapUi提供的Swagger增强功能,Filter过滤保护Swagger资源--&amp;gt; 2 &amp;lt;!--生产环境Filter--&amp;gt; 3 &amp;lt;filter&amp;gt; 4 &amp;lt;filter-name&amp;gt;swaggerProductionFilter&amp;lt;/filter-name&amp;gt; 5 &amp;lt;filter-class&amp;gt;com.github.xiaoymin.swaggerbootstrapui.filter.ProductionSecurityFilter&amp;lt;/filter-class&amp;gt; 6 &amp;lt;init-param&amp;gt; 7 &amp;lt;param-name&amp;gt;production&amp;lt;/param-name&amp;gt; 8 &amp;lt;param-value&amp;gt;false&amp;lt;/param-value&amp;gt; 9 &amp;lt;/init-param&amp;gt; 10 &amp;lt;/filter&amp;gt; 11 &amp;lt;filter-mapping&amp;gt; 12 &amp;lt;filter-name&amp;gt;swaggerProductionFilter&amp;lt;/filter-name&amp;gt; 13 &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt; 14 &amp;lt;/filter-mapping&amp;gt; 15 &amp;lt;!</description></item><item><title>十二、个性化设置</title><link>https://www.hotmindshare.com/docs/spec/swagger/12/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/12/</guid><description>个性化设置功能是SwaggerBootstrapUi针对本身Ui特点提供的个性化设置功能,主要包括：
开启请求参数缓存 菜单Api地址显示 分组tag显示description说明属性 开启RequestMapping接口类型重复地址过滤 开启SwaggerBootstrapUi增强功能. 功能目录：文档管理 -&amp;gt; 个性化设置
开启请求参数缓存
此功能在在线调试时可见效果,当针对每个接口点击发送调试查看后,后面打开该接口再调试时,默认为保留上一次发送的接口参数信息
如果不想开启此缓存,不勾选此项即可.默认为true,即开启状态
菜单Api地址显示
菜单Api地址显示是在左侧菜单不显示api地址信息,默认为false,即不显示,默认效果如下图 如果需要左侧菜单栏显示接口地址,则勾选此项接口,显示效果图如下：
分组tag显示description说明属性
tag是否显示代码中的description属性,默认为false,及不显示，如果勾选显示description属性,效果图如下：
开启RequestMapping接口类型重复地址过滤
针对后端RequestMapping注解类型的接口,如果开发者没有指定接口类型,默认使用Swagger会生成七个不同类型的接口地址,效果图如下：
再某些情况下,开发者可能需要过滤,简化重复的接口文档,此时,开发者通过勾选此选项,并在后面选择显示接口类型的选项,SwaggerBootstrapUi会根据此选项自动过滤
例如勾选，然后默认显示Post类型，则效果如下：
此项默认为false,即不开启此项(不过滤).
开启SwaggerBootstrapUi增强功能
开启此项后,可使用SwaggerBootstrapUi的增强功能,关于增强功能,可参考增强功能章节介绍说明</description></item><item><title>十九、文件下载及图片预览</title><link>https://www.hotmindshare.com/docs/spec/swagger/19/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/19/</guid><description>目前SwaggerBootstrapUi支持的响应类型如下：
类型 说明 application/octet-stream 二进制流 image/png 图片 image/jpg 图片 image/jpeg 图片 image/gif 图片 特别需要注意的是：不管是文件下载或者是需要图片预览,都需要在接口中指定接口的produces,否则不能达到预期效果,接口的produces可参考上面表格中列出项.
关于文件下载的支持 SwaggerBootstrapUi在1.8.9版本中添加了application/octet-stream下载类型的支持,并在1.9.0版本中完善,只需要配置相应接口的produces,即可在doc.html页面中查看效果，如下图：
点击下载文件即可下载当前接口响应的二进制流.示例代码可参考Api190Controller.java
特别说明,需要指定相应的produces
1@ApiOperation(value = &amp;#34;下载测试-有参数+请求头版&amp;#34;,position = 3) 2@GetMapping(value = &amp;#34;/downloadFileAndParam2&amp;#34;,produces = &amp;#34;application/octet-stream&amp;#34;) 3public void postRequest3AndParam(@RequestHeader(value = &amp;#34;uud&amp;#34;) String uud,@RequestParam(value = &amp;#34;name&amp;#34;) String name, HttpServletRequest request, HttpServletResponse response){ 4 logger.info(&amp;#34;header:{}&amp;#34;,uud); 5 download(name,response); 关于图片预览的支持 图片预览一般用在验证码等场景中,很多时候,需要直接展示出验证码的情况，如下图：
验证码预览的后端代码可参考ImageController.java
特别说明,需要指定相应的produces
1@Api(value = &amp;#34;图片预览&amp;#34;,tags = &amp;#34;图片预览&amp;#34;) 2@RestController 3@RequestMapping(&amp;#34;/api/image&amp;#34;) 4public class ImageController { 5 @GetMapping(value = &amp;#34;/preview&amp;#34;,produces = &amp;#34;image/jpeg&amp;#34;) 6 public void preview(HttpServletRequest request, HttpServletResponse response) throws IOException { 7 //more.</description></item><item><title>十六、版本升级</title><link>https://www.hotmindshare.com/docs/spec/swagger/16/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/16/</guid><description>swagger-bootstrap-ui经历两年的稳定发展,目前整体架构已经趋于稳定
但是伴随新版本的发布,每个版本都会加入很多好玩的新特性,作者会尽力保证做到向下兼容,但是如果开发者在使用swagger-bootstrap-ui的途中,因为升级版本导致的问题
一般都是由于前端的问题导致,作者在开发的时候未考虑周全,请大家见谅.
swagger-bootstrap-ui大量使用了浏览器的localStorage对象来进行相关缓存的处理
所以如果开发者升级之后,后端没问题的情况下,前端JS报错时,可以考虑清理浏览器的缓存和localStorage对象的值
如下图：</description></item><item><title>十七、关于字段排序</title><link>https://www.hotmindshare.com/docs/spec/swagger/17/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/17/</guid><description>无论是springfox-swagger官方的swagger-ui,还是SwaggerBootstrapUi都没有针对界面文档说明时和后端字段顺序对应的功能
不过SwaggerBootstrapUi在后来的发展中,吸取了开发者的意见,将必填字段和非必填字段进行了排序,必填字段放在最前面,调试时也如此,方便开发者联调测试
字段说明效果如下图：
调试效果如下图：</description></item><item><title>十三、版本控制</title><link>https://www.hotmindshare.com/docs/spec/swagger/13/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/13/</guid><description>swagger-bootstrap-ui 使用浏览器的localStorage对象,提供了一个细微的版本控制功能,主要体现在如下两个方面：
后端新增接口是识别出变化 后端接口信息变更是会识别出接口变更 swagger-bootstrap-ui 判断新接口的依据:接口地址+接口请求类型(POST|GET|PUT…)
而任何元素的变更,包括参数类型、接口说明、响应参数等等元素的变更,swagger-bootstrap-ui 都能识别出接口的变化,并通过icon图表(new)的方式在接口文档中展示出来
对接接口的开发者只需要刷新当前文档页就能看到后端接口是否新增或修改.
效果图:</description></item><item><title>十四、自定义文档</title><link>https://www.hotmindshare.com/docs/spec/swagger/14/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/14/</guid><description>效果说明 在1、9.3版本中,swagger-bootstrap-ui为了满足文档的个性化配置,添加了自定义文档功能
开发者可自定义md文件扩展补充整个系统的文档说明
开发者可以在当前项目中添加一个文件夹，文件夹中存放.md格式的markdown文件,每个.md文档代表一份自定义文档说明
注意：自定义文档说明必须以.md结尾的文件,其他格式文件会被忽略
例如项目结构如下：
每个.md文件中，swagger-bootstrap-ui允许一级(h1)、二级(h2)、三级(h3)标题作为最终的文档标题
比如api.md文档：
1# 自定义文档说明 2## 效果说明 3 4 5&amp;lt;div class=&amp;#34;hugo-encrypt&amp;#34; data-error-msg=&amp;#34;验证码不正确。&amp;#34; data-id=&amp;#34;b2503d1ee4780d204a629a770a0ac41b&amp;#34;&amp;gt; 6 &amp;lt;p class=&amp;#34;hugo-encrypt-info&amp;#34;&amp;gt; 7 &amp;lt;svg aria-hidden=&amp;#34;true&amp;#34; class=&amp;#34;bi bi-file-earmark-lockbi bi-file-earmark-lock hi-svg-inline hugo-encrypt-icon&amp;#34; fill=&amp;#34;currentColor&amp;#34; height=&amp;#34;1em&amp;#34; viewBox=&amp;#34;0 0 16 16&amp;#34; width=&amp;#34;1em&amp;#34; xmlns=&amp;#34;http://www.w3.org/2000/svg&amp;#34;&amp;gt; 8 &amp;lt;path d=&amp;#34;M10 7v1.076c.54.166 1 .597 1 1.224v2.4c0 .816-.781 1.3-1.5 1.3h-3c-.719 0-1.5-.484-1.5-1.3V9.3c0-.627.46-1.058 1-1.224V7a2 2 0 1 1 4 0M7 7v1h2V7a1 1 0 0 0-2 0M6 9.3v2.4c0 .042.02.107.105.175A.637.637 0 0 0 6.5 12h3a.64.64 0 0 0 .</description></item><item><title>十五、i18n 国际化</title><link>https://www.hotmindshare.com/docs/spec/swagger/15/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/15/</guid><description>在1、9.3版本中,添加了i18n国际化的支持,目前主要实现中文、English两个语言版本,如果后续要求有新的语言支持,可以提issue给我,或者修改项目中的i18n.js文件,提交pr给我
swagger-bootstrap-ui通过读取浏览器的navigator对象,判断当前浏览器的默认语言版本
1//获取当前浏览器语言 2if(window.navigator){ 3 var lang =(navigator.language || navigator.browserLanguage); 4 if(lang!=null&amp;amp;&amp;amp;lang!=undefined&amp;amp;&amp;amp;lang!=&amp;#34;&amp;#34;){ 5 lang=lang.toLowerCase(); 6 if (lang.indexOf(&amp;#34;en&amp;#34;)&amp;gt;0){ 7 this.language=&amp;#34;en&amp;#34;; 8 } 9 } 如果你想使用非当前浏览器默认的语言版本,可以在个性化设置功能中进行切换
swagger-bootstrap-ui默认使用的是中文版本
或者使用个性化快速设置功能,地址栏快速设置访问：
http://127.0.0.1:8888/doc.html?plus=1&amp;amp;cache=1&amp;amp;lang=en
lang可选择：中文(zh)、English(en)</description></item><item><title>十一、增强功能</title><link>https://www.hotmindshare.com/docs/spec/swagger/11/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/11/</guid><description>SwaggerBootstrapUi自[1.8.5][]版本以后,增加了后端Java代码的支持功能,主要目的是辅助Java开发者在使用Springfox-Swagger的同时,扩展一些增强功能，帮助开发者拥有更好的文档体验.
目前主要增强功能：
tags分组标签排序 api接口排序 使用swagger-bootstrap-ui提供的增强功能,需要在源Spring的config配置文件中开启,在原EnableSwagger2注解上增加@EnableSwaggerBootstrapUi注解，示例代码如下：
1@Configuration 2@EnableSwagger2 3@EnableSwaggerBootstrapUI 4public class SwaggerConfiguration { 5 //more... 针对tags分组排序，UI的排序规则是顺序排序，最小值1，最大值也是默认值Integer.Max_VALUE;
如果不使用SwaggerBootstrapUi的增强功能,则无需开启@EnableSwaggerBootstrapUi注解
tags的排序规则分两种：
a、一种是判断Swagger的@Api注解的position属性是否不等于0（默认值为0），如果该值不为空,则获取此值,根据该值排序
b、如果postion=0（不写的情况下）,判断是否存在注解@ApiSort的值，如果有值，则获取此值,根据该值排序
c、所以排序的取值规则是：position&amp;gt;@ApiSort
接口api的排序规则：
a、判断@ApiOperation注解上的postion属性是否不等于0（默认值为0），如果该值不为空,则获取此值,根据该值排序
1//postion属性赋值 2@ApiOperation(httpMethod = &amp;#34;POST&amp;#34;,position = 2,value = &amp;#34;Test2Model测试数组参数，多个&amp;#34;,response=Test2Model.class) 3@ApiResponses({ 4 @ApiResponse(code = 200, message = &amp;#34;非HTTP状态码，返回值JSON code字段值，描述：成功&amp;#34;) 5}) 6@ApiImplicitParams({ 7 @ApiImplicitParam(name = &amp;#34;ids&amp;#34;,paramType =&amp;#34;form&amp;#34;,value = &amp;#34;参数&amp;#34;,allowMultiple = true, required = true) 8}) b、如果postion=0（不写的情况下）,判断是否存在注解@ApiOperationSort的值，如果有值，则获取此值,根据该值排序
c、所以排序的取值规则是：position&amp;gt;@ApiOperationSort
注意：
注解@EnableSwaggerBootstrapUi、@ApiSort、@ApiOperationSort是本UI工具包提供的Java注解,排序功能的使用需要在启用原EnableSwagger2注解上增加@EnableSwaggerBootstrapUi注解方可生效
以上后台设置全部完成后,在UI的个性化设置中还需勾选开启增强功能,否则增强功能不生效.
功能目录：文档管理 -&amp;gt; 个性化设置</description></item><item><title>四、UI特点</title><link>https://www.hotmindshare.com/docs/spec/swagger/4/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/4/</guid><description> 以markdown形式展示文档,将文档的请求地址、类型、请求参数、示例、响应参数分层次依次展示,接口文档一目了然,方便开发者对接 接口排序,支持分组及接口的排序功能 支持接口在线搜索功能 提供Swagger资源保护策略,保护文档安全 个性化配置项,支持接口地址、接口description属性、UI增强等个性化配置功能 支持markdown文档离线文档导出,也可在线查看离线文档 在线调试栏除了自动解析参数外,针对必填项着颜色区分,同时支持tab键快速输入上下切换.调试时可自定义Content-Type请求头类型 调试信息全局缓存,页面刷新后依然存在,方便开发者调试 以更人性化的treetable组件展示Swagger Models功能 响应内容可全屏查看,针对响应内容很多的情况下，全屏查看，方便调试、复制 文档以多tab方式可显示多个接口文档 请求参数栏请求类型、是否必填着颜色区分 主页中粗略统计接口不同类型数量 左右菜单和内容页可自由拖动宽度 支持自定义全局参数功能，主页包括header及query两种类型 i18n国际化支持,目前支持：中文简体、中文繁体、英文 JSR-303 annotations 注解的支持 更多个性化设置功能</description></item><item><title>五、界面欣赏</title><link>https://www.hotmindshare.com/docs/spec/swagger/5/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/5/</guid><description>SwaggerBootstrapUi界面图如下,供大家赏鉴：</description></item><item><title>一、简介</title><link>https://www.hotmindshare.com/docs/spec/swagger/1/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.hotmindshare.com/docs/spec/swagger/1/</guid><description>swagger-bootstrap-ui是springfox-swagger的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验
效果：http://swagger-bootstrap-ui.xiaominfo.com/doc.html
示例:https://gitee.com/xiaoym/swagger-bootstrap-ui-demo
核心功能 该UI增强包主要包括两大核心功能：文档说明 和 在线调试
文档说明：根据Swagger的规范说明，详细列出接口文档的说明，包括接口地址、类型、请求示例、请求参数、响应示例、响应参数、响应码等信息，使用swagger-bootstrap-ui能根据该文档说明，对该接口的使用情况一目了然。 在线调试：提供在线接口联调的强大功能，自动解析当前接口参数,同时包含表单验证，调用参数可返回接口响应内容、headers、Curl请求命令实例、响应时间、响应状态码等信息，帮助开发者在线调试，而不必通过其他测试工具测试接口是否正确,简介、强大。 UI增强 同时，swagger-bootstrap-ui在满足以上功能的同时，还提供了文档的增强功能，这些功能是官方swagger-ui所没有的，每一个增强的功能都是贴合实际,考虑到开发者的实际开发需要,是比不可少的功能，主要包括：
个性化配置：通过个性化ui配置项，可自定义UI的相关显示信息 离线文档：根据标准规范，生成的在线markdown离线文档，开发者可以进行拷贝生成markdown接口文档，通过其他第三方markdown转换工具转换成html或pdf，这样也可以放弃swagger2markdown组件 接口排序：自1.8.5后，ui支持了接口排序功能，例如一个注册功能主要包含了多个步骤,可以根据swagger-bootstrap-ui提供的接口排序规则实现接口的排序，step化接口操作，方便其他开发者进行接口对接 UI特点 以markdown形式展示文档,将文档的请求地址、类型、请求参数、示例、响应参数分层次依次展示,接口文档一目了然,方便开发者对接 在线调试栏除了自动解析参数外,针对必填项着颜色区分,同时支持tab键快速输入上下切换.调试时可自定义Content-Type请求头类型 个性化配置项,支持接口地址、接口description属性、UI增强等个性化配置功能 接口排序,支持分组及接口的排序功能 支持markdown文档离线文档导出,也可在线查看离线文档 调试信息全局缓存,页面刷新后依然存在,方便开发者调试 以更人性化的treetable组件展示Swagger Models功能 响应内容可全屏查看,针对响应内容很多的情况下，全屏查看，方便调试、复制 文档以多tab方式可显示多个接口文档 请求参数栏请求类型、是否必填着颜色区分 主页中粗略统计接口不同类型数量 支持接口在线搜索功能 左右菜单和内容页可自由拖动宽度 支持自定义全局参数功能，主页包括header及query两种类型 i18n国际化支持,目前支持：中文简体、中文繁体、英文 JSR-303 annotations 注解的支持 UI效果图</description></item></channel></rss>