<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JUnit on 程序员安仔</title><link>https://www.shellio.cc/series/junit/</link><description>Recent content in JUnit on 程序员安仔</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>个人技术博客</copyright><lastBuildDate>Sat, 21 Oct 2023 12:22:54 +0800</lastBuildDate><atom:link href="https://www.shellio.cc/series/junit/index.xml" rel="self" type="application/rss+xml"/><item><title>八、JUnit – 执行过程</title><link>https://www.shellio.cc/docs/java/junit/8/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/8/</guid><description>JUnit – 执行过程 本教程阐明了 JUnit 中的方法执行过程，即哪一个方法首先被调用，哪一个方法在一个方法之后调用。以下为 JUnit 测试方法的 API，并且会用例子来说明。
在目录C:\ &amp;gt; JUNIT_WORKSPACE 创建一个 java 类文件命名为 JunitAnnotation.java 来测试注释程序。
1import org.junit.After; 2import org.junit.AfterClass; 3import org.junit.Before; 4import org.junit.BeforeClass; 5import org.junit.Ignore; 6import org.junit.Test; 7public class ExecutionProcedureJunit { 8 //execute only once, in the starting 9 @BeforeClass 10 public static void beforeClass() { 11 System.out.println(&amp;#34;in before class&amp;#34;); 12 } 13 //execute only once, in the end 14 @AfterClass 15 public static void afterClass() { 16 System.</description></item><item><title>二、JUnit – 环境设置</title><link>https://www.shellio.cc/docs/java/junit/2/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/2/</guid><description>Junit – 环境设置 本地环境设置 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 JUnit 是 Java 的一个框架，所以最根本的需要是在你的机器里装有 JDK。
系统要求 JDK 1.5或1.5以上 内存 没有最小要求 磁盘空间 没有最小要求 操作系统 没有最小要求 步骤1：在你的机器里验证 Java 装置 现在打开控制台，执行以下 java 要求。
操作系统 任务 命令 Windows 打开命令操作台 c:&amp;gt;java -version Linux 打开命令终端 $ java -version Mac 打开终端 machine:~ joseph$ java -version 我们来验证一下所有操作系统的输出：
操作系统 输出 Windows java 版本 “1.6.0_21” Java（TM）SE 运行环境（build 1.6.0_21-b07）
Java 热点（TM）客户端虚拟机（build 17.0-b17，混合模式，共享）
Linux java 版本“1.6.0_21” Java（TM）SE 运行环境（build 1.6.0_21-b07）
Java 热点（TM）客户端虚拟机（build 17.0-b17，混合模式，共享）
Mac java 版本“1.6.0_21”
Java（TM）SE 运行环境（build 1.</description></item><item><title>九、JUnit – 执行测试</title><link>https://www.shellio.cc/docs/java/junit/9/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/9/</guid><description>JUnit – 执行测试 测试用例是使用 JUnitCore 类来执行的。JUnitCore 是运行测试的外观类。它支持运行 JUnit 4 测试, JUnit 3.8.x 测试,或者他们的混合。 要从命令行运行测试，可以运行 java org.junit.runner.JUnitCore 。对于只有一次的测试运行，可以使用静态方法 runClasses(Class[])。
下面是org.junit.runner.JUnitCore 类的声明：
1public class JUnitCore extends java.lang.Object 创建一个类 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 在目录 C:\ &amp;gt; JUNIT_WORKSPACE 中创建一个被测试的 Java 类命名为 MessageUtil.java。 1/* 2* This class prints the given message on console. 3*/ 4public class MessageUtil { 5 private String message; 6 //Constructor 7 //@param message to be printed 8 public MessageUtil(String message){ 9 this.message = message; 10 } 11 // prints the message 12 public String printMessage(){ 13 System.</description></item><item><title>六、JUnit – 编写测试</title><link>https://www.shellio.cc/docs/java/junit/6/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/6/</guid><description>JUnit – 编写测试 在这里你将会看到一个应用 POJO 类，Business logic 类和在 test runner 中运行的 test 类的 JUnit 测试的例子。
在 C:\ &amp;gt; JUNIT_WORKSPACE 路径下创建一个名为 EmployeeDetails.java 的 POJO 类。
1public class EmployeeDetails { 2 private String name; 3 private double monthlySalary; 4 private int age; 5 /** 6 * @return the name 7 */ 8 public String getName() { 9 return name; 10 } 11 /** 12 * @param name the name to set 13 */ 14 public void setName(String name) { 15 this.</description></item><item><title>七、JUnit – 使用断言</title><link>https://www.shellio.cc/docs/java/junit/7/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/7/</guid><description>JUnit – 使用断言 断言 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 所有的断言都包含在 Assert 类中
1public class Assert extends java.lang.Object 这个类提供了很多有用的断言方法来编写测试用例。只有失败的断言才会被记录。Assert 类中的一些有用的方法列式如下：
序号 方法和描述 1 void assertEquals(boolean expected, boolean actual)
检查两个变量或者等式是否平衡 2 void assertTrue(boolean expected, boolean actual)
检查条件为真 3 void assertFalse(boolean condition)
检查条件为假 4 void assertNotNull(Object object)
检查对象不为空 5 void assertNull(Object object)
检查对象为空 6 void assertSame(boolean condition)
assertSame() 方法检查两个相关对象是否指向同一个对象 7 void assertNotSame(boolean condition)
assertNotSame() 方法检查两个相关对象是否不指向同一个对象 8 void assertArrayEquals(expectedArray, resultArray)
assertArrayEquals() 方法检查两个数组是否相等 下面我们在例子中试验一下上面提到的各种方法。在 C:\ &amp;gt; JUNIT_WORKSPACE 路径下创建一个文件名为 TestAssertions.</description></item><item><title>三、JUnit – 测试框架</title><link>https://www.shellio.cc/docs/java/junit/3/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/3/</guid><description>JUnit – 测试框架 什么是 Junit 测试框架？ 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 JUnit 是一个回归测试框架，被开发者用于实施对应用程序的单元测试，加快程序编制速度，同时提高编码的质量。JUnit 测试框架能够轻松完成以下任意两种结合：
Eclipse 集成开发环境 Ant 打包工具 Maven 项目构建管理 特性 JUnit 测试框架具有以下重要特性：
测试工具 测试套件 测试运行器 测试分类 测试工具 测试工具是一整套固定的工具用于基线测试。测试工具的目的是为了确保测试能够在共享且固定的环境中运行，因此保证测试结果的可重复性。它包括：
在所有测试调用指令发起前的 setUp() 方法。 在测试方法运行后的 tearDown() 方法。 让我们来看一个例子：
1import junit.framework.*; 2public class JavaTest extends TestCase { 3 protected int value1, value2; 4 // assigning the values 5 protected void setUp(){ 6 value1=3; 7 value2=3; 8 } 9 // test method to add two values 10 public void testAdd(){ 11 double result= value1 + value2; 12 assertTrue(result == 6); 13 } 测试套件 测试套件意味捆绑几个测试案例并且同时运行。在 JUnit 中，@RunWith 和 @Suite 都被用作运行测试套件。以下为使用 TestJunit1 和 TestJunit2 的测试分类：</description></item><item><title>十、JUnit – 套件测试</title><link>https://www.shellio.cc/docs/java/junit/10/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/10/</guid><description>JUnit – 套件测试 测试套件 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 测试套件意味着捆绑几个单元测试用例并且一起执行他们。在 JUnit 中，@RunWith 和 @Suite 注释用来运行套件测试。这个教程将向您展示一个例子，其中含有两个测试样例 TestJunit1 &amp;amp; TestJunit2 类，我们将使用测试套件一起运行他们。
创建一个类 在目录C:\ &amp;gt; JUNIT_WORKSPACE 中创建一个被测试的 java 类命名为 MessageUtil.java
1/* 2* This class prints the given message on console. 3*/ 4public class MessageUtil { 5 private String message; 6 //Constructor 7 //@param message to be printed 8 public MessageUtil(String message){ 9 this.message = message; 10 } 11 // prints the message 12 public String printMessage(){ 13 System.</description></item><item><title>十二、JUnit – 时间测试</title><link>https://www.shellio.cc/docs/java/junit/12/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/12/</guid><description>JUnit – 时间测试 Junit 提供了一个暂停的方便选项。如果一个测试用例比起指定的毫秒数花费了更多的时间，那么 Junit 将自动将它标记为失败。timeout 参数和 @Test 注释一起使用。现在让我们看看活动中的 @test(timeout)。
创建一个类 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 创建一个在 C:\JUNIT_WORKSPACE 中叫做 MessageUtil.java 的 java 类来测试。 在 printMessage() 方法内添加一个无限 while 循环。 1/* 2* This class prints the given message on console. 3*/ 4public class MessageUtil { 5 private String message; 6 //Constructor 7 //@param message to be printed 8 public MessageUtil(String message){ 9 this.message = message; 10 } 11 // prints the message 12 public void printMessage(){ 13 System.</description></item><item><title>十六、JUnit – Eclipse 插件</title><link>https://www.shellio.cc/docs/java/junit/16/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/16/</guid><description>JUnit – Eclipse 插件 为了设置带有 eclipse 的 JUnit，需要遵循以下步骤。
步骤 1：下载 Junit archive 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 下载 JUnit
操作系统 文件名 Windows junit4.10.jar Linux junit4.10.jar Mac junit4.10.jar 假设你在 C:&amp;gt;JUnit 文件夹中复制了以上 JAR 文件。
步骤 2：设置 Eclipse 环境 打开 eclipse -&amp;gt; 右击 project 并 点击 property &amp;gt; Build Path &amp;gt; Configure Build Path，然后使用 Add External Jar 按钮在函数库中添加 junit-4.10.jar。 我们假设你的 eclipse 已经内置了 junit 插件并且它在 C:&amp;gt;eclipse/plugins 目录下，如不能获得，那么你可以从 JUnit Plugin 上下载。在 eclipse 的插件文件夹中解压下载的 zip 文件。最后重启 eclipse。 现在你的 eclipse 已经准备好 JUnit 测试用例的开发了。</description></item><item><title>十七、JUnit – 框架扩展</title><link>https://www.shellio.cc/docs/java/junit/17/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/17/</guid><description>JUnit – 框架扩展 以下是JUnit 扩展
Cactus JWebUnit XMLUnit MockObject Cactus 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 Cactus 是一个简单框架用来测试服务器端的 Java 代码（Servlets, EJBs, Tag Libs, Filters）。Cactus 的设计意图是用来减小为服务器端代码写测试样例的成本。它使用 JUnit 并且在此基础上进行扩展。Cactus 实现了 in-container 的策略，意味着可以在容器内部执行测试。
Cactus 系统由以下几个部分组成：
Cactus Framework（Cactus 框架） 是 Cactus 的核心。它是提供 API 写 Cactus 测试代码的引擎。 Cactus Integration Modules（Cactus 集成模块） 它是提供使用 Cactus Framework（Ant scripts, Eclipse plugin, Maven plugin）的前端和框架。 这是使用 cactus 的样例代码。
1import org.apache.cactus.*; 2import junit.framework.*; 3public class TestSampleServlet extends ServletTestCase { 4 @Test 5 public void testServlet() { 6 // Initialize class to test 7 SampleServlet servlet = new SampleServlet(); 8 // Set a variable in session as the doSomething() 9 // method that we are testing 10 session.</description></item><item><title>十三、JUnit – 异常测试</title><link>https://www.shellio.cc/docs/java/junit/13/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/13/</guid><description>JUnit – 异常测试 Junit 用代码处理提供了一个追踪异常的选项。你可以测试代码是否它抛出了想要得到的异常。expected 参数和 @Test 注释一起使用。现在让我们看看活动中的 @Test(expected)。
创建一个类 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 在 C:\ &amp;gt; JUNIT_WORKSPACE 中创建一个叫做 MessageUtil.java 的 java 类来测试。 在 printMessage()方法中添加一个错误条件。 1/* 2* This class prints the given message on console. 3*/ 4public class MessageUtil { 5 private String message; 6 //Constructor 7 //@param message to be printed 8 public MessageUtil(String message){ 9 this.message = message; 10 } 11 // prints the message 12 public void printMessage(){ 13 System.</description></item><item><title>十四、JUnit – 参数化测试</title><link>https://www.shellio.cc/docs/java/junit/14/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/14/</guid><description>JUnit – 参数化测试 Junit 4 引入了一个新的功能参数化测试。参数化测试允许开发人员使用不同的值反复运行同一个测试。你将遵循 5 个步骤来创建参数化测试。
用 @RunWith(Parameterized.class) 来注释 test 类。 创建一个由 @Parameters 注释的公共的静态方法，它返回一个对象的集合(数组)来作为测试数据集合。 创建一个公共的构造函数，它接受和一行测试数据相等同的东西。 为每一列测试数据创建一个实例变量。 用实例变量作为测试数据的来源来创建你的测试用例。 一旦每一行数据出现测试用例将被调用。让我们看看活动中的参数化测试。
创建一个类 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 在 C:\ &amp;gt; JUNIT_WORKSPACE 创建一个叫做 PrimeNumberChecker.java 的 java 类来测试。 1public class PrimeNumberChecker { 2 public Boolean validate(final Integer primeNumber) { 3 for (int i = 2; i &amp;lt; (primeNumber / 2); i++) { 4 if (primeNumber % i == 0) { 5 return false; 6 } 7 } 8 return true; 9 } 创建 Parameterized Test Case 类 创建一个叫做 PrimeNumberCheckerTest.</description></item><item><title>十五、JUnit – ANT 插件</title><link>https://www.shellio.cc/docs/java/junit/15/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/15/</guid><description>JUnit – ANT 插件 在这个例子中，我们将展示如何使用 ANT 运行 JUnit。让我们跟随以下步骤：
步骤 1:下载 Apache Ant 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 下载 Apache ANT
操作系统 文件名 Windows apache-ant-1.8.4-bin.zip Linux apache-ant-1.8.4-bin.tar.gz Mac apache-ant-1.8.4-bin.tar.gz 步骤 2:设置 Ant 环境 设置 ANT_HOME 环境变量来指向 ANT 函数库在机器中存储的基本文件地址。例如，我们已经在不同的操作系统的 apache-ant-1.8.4 文件夹中存储了 ANT 函数库。
操作系统 输出 Windows 在 C:\Program Files\Apache Software Foundation
\apache-ant-1.8.4 中设置环境变量 ANT_HOME Linux 导出 ANT_HOME=/usr/local/\apache-ant-1.8.4 Mac export ANT_HOME=/Library/\apache-ant-1.8.4 附加ANT 编译器地址到系统路径，对于不同的操作系统来说如下所示：
操作系统 输出 Windows 附加字符串 ;%ANT_HOME\bin to the end of the
system variable, Path. Linux 导出 PATH=$PATH:$ANT_HOME/bin/ Mac 不需要 步骤 3:下载 Junit Archive 下载 JUnit Archive</description></item><item><title>十一、JUnit – 忽略测试</title><link>https://www.shellio.cc/docs/java/junit/11/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/11/</guid><description>JUnit – 忽略测试 有时可能会发生我们的代码还没有准备好的情况，这时测试用例去测试这个方法或代码的时候会造成失败。@Ignore 注释会在这种情况时帮助我们。
一个含有 @Ignore 注释的测试方法将不会被执行。 如果一个测试类有 @Ignore 注释，则它的测试方法将不会执行。 现在我们用例子来学习 @Ignore。
创建一个类 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 在目录 C:\ &amp;gt; JUNIT_WORKSPACE 中创建一个将被测试的 java 类命名为 MessageUtil.java。 1/* 2* This class prints the given message on console. 3*/ 4public class MessageUtil { 5 private String message; 6 //Constructor 7 //@param message to be printed 8 public MessageUtil(String message){ 9 this.message = message; 10 } 11 // prints the message 12 public String printMessage(){ 13 System.</description></item><item><title>四、JUnit – 基本用法</title><link>https://www.shellio.cc/docs/java/junit/4/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/4/</guid><description>JUnit – 基本用法 现在我们将应用简单的例子来一步一步教你如何使用 Junit。
创建一个类 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 在C:\ &amp;gt; JUNIT_WORKSPACE 路径下创建一个名为 MessageUtil.java 的类用来测试。 1/* 2* This class prints the given message on console. 3*/ 4public class MessageUtil { 5 private String message; 6 //Constructor 7 //@param message to be printed 8 public MessageUtil(String message){ 9 this.message = message; 10 } 11 // prints the message 12 public String printMessage(){ 13 System.out.println(message); 14 return message; 15 } 16} 创建 Test Case 类 创建一个名为 TestJunit.</description></item><item><title>五、JUnit – API</title><link>https://www.shellio.cc/docs/java/junit/5/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/5/</guid><description>JUnit – API JUnit 中的重要的 API 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 JUnit 中的最重要的程序包是 junit.framework 它包含了所有的核心类。一些重要的类列示如下：
序号 类的名称 类的功能 1 Assert assert 方法的集合 2 TestCase 一个定义了运行多重测试的固定装置 3 TestResult TestResult 集合了执行测试样例的所有结果 4 TestSuite TestSuite 是测试的集合 Assert 类 下面介绍的是 org.junit.Assert 类：
1public class Assert extends java.lang.Object 这个类提供了一系列的编写测试的有用的声明方法。只有失败的声明方法才会被记录。Assert 类的重要方法列式如下：
序号 方法和描述 1 void assertEquals(boolean expected, boolean actual) 检查两个变量或者等式是否平衡 2 void assertFalse(boolean condition) 检查条件是假的 3 void assertNotNull(Object object) 检查对象不是空的 4 void assertNull(Object object) 检查对象是空的 5 void assertTrue(boolean condition) 检查条件为真 6 void fail() 在没有报告的情况下使测试不通过 下面让我们在例子中来测试一下上面提到的一些方法。在 C:\ &amp;gt; JUNIT_WORKSPACE 目录下创建一个名为 TestJunit1.</description></item><item><title>一、JUnit – 概述</title><link>https://www.shellio.cc/docs/java/junit/1/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/junit/1/</guid><description>JUnit – 概述 所谓单元测试是测试应用程序的功能是否能够按需要正常运行，并且确保是在开发人员的水平上，单元测试生成图片。单元测试是一个对单一实体（类或方法）的测试。单元测试是每个软件公司提高产品质量、满足客户需求的重要环节。
单元测试可以由两种方式完成
人工测试 自动测试 手动执行测试用例并不借助任何工具的测试被称为人工测试。
– 消耗时间并单调：由于测试用例是由人力资源执行，所以非常缓慢并乏味。
– 人力资源上投资巨大：由于测试用例需要人工执行，所以在人工测试上需要更多的试验员。
– 可信度较低：人工测试可信度较低是可能由于人工错误导致测试运行时不够精确。
– 非程式化：编写复杂并可以获取隐藏的信息的测试的话，这样的程序无法编写。 借助工具支持并且利用自动工具执行用例被称为自动测试。
– 快速自动化运行测试用例时明显比人力资源快。 – 人力资源投资较少：测试用例由自动工具执行，所以在自动测试中需要较少的试验员。
– 可信度更高：自动化测试每次运行时精确地执行相同的操作。
– 程式化：试验员可以编写复杂的测试来显示隐藏信息。 什么是 JUnit？ JUnit 是一个 Java 编程语言的单元测试框架。JUnit 在测试驱动的开发方面有很重要的发展，是起源于 JUnit 的一个统称为 xUnit 的单元测试框架之一。
JUnit 促进了“先测试后编码”的理念，强调建立测试数据的一段代码，可以先测试，然后再应用。这个方法就好比“测试一点，编码一点，测试一点，编码一点……”，增加了程序员的产量和程序的稳定性，可以减少程序员的压力和花费在排错上的时间。
特点： JUnit 是一个开放的资源框架，用于编写和运行测试。 提供注释来识别测试方法。 提供断言来测试预期结果。 提供测试运行来运行测试。 JUnit 测试允许你编写代码更快，并能提高质量。 JUnit 优雅简洁。没那么复杂，花费时间较少。 JUnit 测试可以自动运行并且检查自身结果并提供即时反馈。所以也没有必要人工梳理测试结果的报告。 JUnit 测试可以被组织为测试套件，包含测试用例，甚至其他的测试套件。 JUnit 在一个条中显示进度。如果运行良好则是绿色；如果运行失败，则变成红色。 什么是一个单元测试用例? 单元测试用例是一部分代码，可以确保另一端代码（方法）按预期工作。为了迅速达到预期的结果，就需要测试框架。JUnit 是 java 编程语言理想的单元测试框架。
一个正式的编写好的单元测试用例的特点是：已知输入和预期输出，即在测试执行前就已知。已知输入需要测试的先决条件，预期输出需要测试后置条件。
每一项需求至少需要两个单元测试用例：一个正检验，一个负检验。如果一个需求有子需求，每一个子需求必须至少有正检验和负检验两个测试用例。</description></item></channel></rss>