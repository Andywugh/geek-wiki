<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>关系型数据库 on 程序员安仔</title><link>https://www.shellio.cc/categories/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/</link><description>Recent content in 关系型数据库 on 程序员安仔</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>粤ICP备2023148789号</copyright><lastBuildDate>Sat, 21 Oct 2023 12:22:54 +0800</lastBuildDate><atom:link href="https://www.shellio.cc/categories/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>八、MySQL 获取数据库列表</title><link>https://www.shellio.cc/docs/database/mysql/8/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/8/</guid><description>如果要查看当前 MySQL 服务器有哪些数据库，可以使用 SHOW DATABASES; 命令
在 mysql&amp;gt;` 终端中查看数据库列表 打开一个终端(命令行)，输入 mysql -u root -p 进入 mysql&amp;gt; 命令行
然后输入 SHOW DATABASES; 命令就可以查看连接的服务器有多少数据库了
1$ mysql -uroot -p 2Enter password: 3Welcome to the MariaDB monitor. Commands end with ; or \g. 4Your MariaDB connection id is 113 5Server version: 10.2.13-MariaDB Homebrew 6Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. 7Type &amp;#39;help;&amp;#39; or &amp;#39;\h&amp;#39; for help. Type &amp;#39;\c&amp;#39; to clear the current input statement.</description></item><item><title>八、SQLite Group By</title><link>https://www.shellio.cc/docs/database/sqlite/8/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/8/</guid><description>SQLite Group By SQLite 的 GROUP BY 子句用于与 SELECT 语句一起使用，来对相同的数据进行分组。
在SELECT 语句中，GROUP BY 子句放在 WHERE 子句之后，放在 ORDER BY 子句之前。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 下面给出了 GROUP BY 子句的基本语法。GROUP BY 子句必须放在 WHERE 子句中的条件之后，必须放在 ORDER BY 子句之前。
1SELECT column-list 2FROM table_name 3WHERE [ conditions ] 4GROUP BY column1, column2....columnN 5ORDER BY column1, column2....columnN 您可以在 GROUP BY 子句中使用多个列。确保您使用的分组列在列清单中。
实例 假设COMPANY 表有以下记录：
1ID NAME AGE ADDRESS SALARY 2---------- ---------- ---------- ---------- ---------- 31 Paul 32 California 20000.</description></item><item><title>二、MySQL 简介</title><link>https://www.shellio.cc/docs/database/mysql/2/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/2/</guid><description>MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司
MySQL 同时也是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性
为什么是 MySQL MySQL 是开源的，目前不需要支付任何费用就可以使用它的社区版 MySQL 是跨平台的，可以运行在 Windows 、Linux 、Mac OS 多个系统上 MySQL 支持多种语言，如 C、C++、Python、Java、Perl、PHP、Ruby 等 MySQL 可以处理上千万条的记录 MySQL 支持大型数据库，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4 GB，64 位系统支持最大的表文件为 8TB 目前 WEB 服务器几乎都是 64 位的，所以不用担心 MySQL 表文件大小问题
MySQL 使用标准的 SQL 数据语言形式 如果你对 SQL 还很陌生，那么可以访问我们的 SQL 基础教程 学习 SQL 知识
MySQL 对 PHP 有很好的支持，PHP 内建的 PDO_MYSQL 提供了访问 MySQL 数据库的丰富的 API MySQL 是可以定制的，采用了 GPL 协议，我们可以修改源码来开发自己的 MySQL 系统</description></item><item><title>二、SQLite 简介</title><link>https://www.shellio.cc/docs/database/sqlite/2/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/2/</guid><description>SQLite 简介 本教程帮助您了解什么是 SQLite，它与 SQL 之间的不同，为什么需要它，以及它的应用程序数据库处理方式。
SQLite是一个软件库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。SQLite是一个增长最快的数据库引擎，这是在普及方面的增长，与它的尺寸大小无关。SQLite 源代码不受版权限制。
什么是 SQLite？ 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 SQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库一样，您不需要在系统中配置。
就像其他数据库，SQLite 引擎不是一个独立的进程，可以按应用程序需求进行静态或动态连接。SQLite 直接访问其存储文件。
为什么要用 SQLite？ 不需要一个单独的服务器进程或操作的系统（无服务器的）。 SQLite 不需要配置，这意味着不需要安装或管理。 一个完整的 SQLite 数据库是存储在一个单一的跨平台的磁盘文件。 SQLite 是非常小的，是轻量级的，完全配置时小于 400KiB，省略可选功能配置时小于250KiB。 SQLite 是自给自足的，这意味着不需要任何外部的依赖。 SQLite 事务是完全兼容 ACID 的，允许从多个进程或线程安全访问。 SQLite 支持 SQL92（SQL2）标准的大多数查询语言的功能。 SQLite 使用 ANSI-C 编写的，并提供了简单和易于使用的 API。 SQLite 可在 UNIX（Linux, Mac OS-X, Android, iOS）和 Windows（Win32, WinCE, WinRT）中运行。 历史 1、 2000—D.RichardHipp设计SQLite是为了不需要管理即可操作程序；
2、 2000—在八月，SQLite1.0发布GNU数据库管理器（GNUDatabaseManager）；
3、 2011—Hipp宣布，向SQLiteDB添加UNQl接口，开发UNQLite（面向文档的数据库）；
SQLite 局限性 在SQLite 中，SQL92 不支持的特性如下所示：
特性 描述 RIGHT OUTER JOIN 只实现了 LEFT OUTER JOIN。 FULL OUTER JOIN 只实现了 LEFT OUTER JOIN。 ALTER TABLE 支持 RENAME TABLE 和 ALTER TABLE 的 ADD COLUMN variants 命令，不支持 DROP COLUMN、ALTER COLUMN、ADD CONSTRAINT。 Trigger 支持 支持 FOR EACH ROW 触发器，但不支持 FOR EACH STATEMENT 触发器。 VIEWs 在 SQLite 中，视图是只读的。您不可以在视图上执行 DELETE、INSERT 或 UPDATE 语句。 GRANT 和 REVOKE 可以应用的唯一的访问权限是底层操作系统的正常文件访问权限。 SQLite 命令 与关系数据库进行交互的标准 SQLite 命令类似于 SQL。命令包括 CREATE、SELECT、INSERT、UPDATE、DELETE 和 DROP。这些命令基于它们的操作性质可分为以下几种：</description></item><item><title>二十、MySQL UPDATE 更新数据</title><link>https://www.shellio.cc/docs/database/mysql/20/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/20/</guid><description>如果需要修改或更新 MySQL 中某个表中的数据，可以使用 UPDATE SQL 语句
UPDATE SQL 语句语法 UPDATE SQL 语句修改数据的通用语法格式如下
1UPDATE table_name SET field1=new-value1, field2=new-value2 2[WHERE Clause] 可以同时更新一个或多个字段 可以在 WHERE 子句中指定任何条件 可以在一个单独表中同时更新数据 如果没有 WHERE 语句，那么会更新表中的全部数据 注意： 不使用 WHERE 子句将数据表的全部数据进行更新，所以要慎重
通过命令提示符更新数据 可以在mysql&amp;gt; 命令提示窗口中执行 UPDATE SQL 语句更新表中的数据
下面的代码使用 UPDATE SQL 语句将 name='Python' 的数据行中的 url 改成 https://ddkk.com/'
1MariaDB [souyunku]&amp;gt; SELECT * FROM tbl_language WHERE BINARY name=&amp;#39;Python&amp;#39;; 2+----+--------+---------------------+------------+ 3| id | name | url | founded_at | 4+----+--------+---------------------+------------+ 5| 1 | Python | https://ddkk.</description></item><item><title>二十、SQLite Alter 命令</title><link>https://www.shellio.cc/docs/database/sqlite/20/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/20/</guid><description>SQLite Alter 命令 SQLite 的 ALTER TABLE 命令不通过执行一个完整的转储和数据的重载来修改已有的表。您可以使用 ALTER TABLE 语句重命名表，使用 ALTER TABLE 语句还可以在已有的表中添加额外的列。
在SQLite 中，除了重命名表和在已有的表中添加列，ALTER TABLE 命令不支持其他操作。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 用来重命名已有的表的 ALTER TABLE 的基本语法如下：
1ALTER TABLE database_name.table_name RENAME TO new_table_name; 用来在已有的表中添加一个新的列的 ALTER TABLE 的基本语法如下：
1ALTER TABLE database_name.table_name ADD COLUMN column_def...; 实例 假设我们的 COMPANY 表有如下记录：
1ID NAME AGE ADDRESS SALARY 2---------- ---------- ---------- ---------- ---------- 31 Paul 32 California 20000.0 42 Allen 25 Texas 15000.0 53 Teddy 23 Norway 20000.0 64 Mark 25 Rich-Mond 65000.</description></item><item><title>二十八、MySQL NULL 值处理</title><link>https://www.shellio.cc/docs/database/mysql/28/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/28/</guid><description>我们在创建表的时候可以让某个字段为空，比如下面的创建 tbl_language 的语句
1CREATE TABLE IF NOT EXISTS tbl_language( 2 id INT UNSIGNED AUTO_INCREMENT, 3 name VARCHAR(64) NOT NULL, 4 url VARCHAR(128) NOT NULL, 5 founded_at DATE, 6 PRIMARY KEY ( id ) 7)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 因为founded_at 没有明确指明 NOT NULL ，所以它是可以为空的
然后我们运行下面的语句插入数据
1truncate tbl_language; 2INSERT INTO tbl_language VALUES 3 (1,&amp;#39;Python&amp;#39;,&amp;#39;https://ddkk.com&amp;#39;,&amp;#39;1991-2-20&amp;#39;), 4 (2,&amp;#39;PHP&amp;#39;,&amp;#39;http://www.php.net&amp;#39;,&amp;#39;1994-1-1&amp;#39;), 5 (3,&amp;#39;Ruby&amp;#39;,&amp;#39;https://www.ruby-lang.org/&amp;#39;,&amp;#39;1996-12-25&amp;#39;), 6 (4,&amp;#39;Kotlin&amp;#39;,&amp;#39;http://kotlinlang.org/&amp;#39;,&amp;#39;2016-02-17&amp;#39;); 7INSERT INTO tbl_language (name,url) VALUES 8 (&amp;#39;Perl&amp;#39;,&amp;#39;http://www.perl.org/&amp;#39;), 9 (&amp;#39;Scala&amp;#39;,&amp;#39;http://www.scala-lang.org/&amp;#39;); 使用不带 WHERE 的 SELECT 语句可以看到 6 条记录</description></item><item><title>二十八、SQLite Vacuum</title><link>https://www.shellio.cc/docs/database/sqlite/28/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/28/</guid><description>SQLite Vacuum VACUUM 命令通过复制主数据库中的内容到一个临时数据库文件，然后清空主数据库，并从副本中重新载入原始的数据库文件。这消除了空闲页，把表中的数据排列为连续的，另外会清理数据库文件结构。
如果表中没有明确的整型主键（INTEGER PRIMARY KEY），VACUUM 命令可能会改变表中条目的行 ID（ROWID）。VACUUM 命令只适用于主数据库，附加的数据库文件是不可能使用 VACUUM 命令。
如果有一个活动的事务，VACUUM 命令就会失败。VACUUM 命令是一个用于内存数据库的任何操作。由于 VACUUM 命令从头开始重新创建数据库文件，所以 VACUUM 也可以用于修改许多数据库特定的配置参数。
手动 VACUUM 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 下面是在命令提示符中对整个数据库发出 VACUUM 命令的语法：
1$sqlite3 database_name &amp;#34;VACUUM;&amp;#34; 您也可以在 SQLite 提示符中运行 VACUUM，如下所示：
1sqlite&amp;gt; VACUUM; 您也可以在特定的表上运行 VACUUM，如下所示：
1sqlite&amp;gt; VACUUM table_name; 自动 VACCUM（Auto-VACUUM） SQLite 的 Auto-VACUUM 与 VACUUM 不大一样，它只是把空闲页移到数据库末尾，从而减小数据库大小。通过这样做，它可以明显地把数据库碎片化，而 VACUUM 则是反碎片化。所以 Auto-VACUUM 只会让数据库更小。
在SQLite 提示符中，您可以通过下面的编译运行，启用/禁用 SQLite 的 Auto-VACUUM：
1sqlite&amp;gt; PRAGMA auto_vacuum = NONE; -- 0 means disable auto vacuum 2sqlite&amp;gt; PRAGMA auto_vacuum = INCREMENTAL; -- 1 means enable incremental vacuum 3sqlite&amp;gt; PRAGMA auto_vacuum = FULL; -- 2 means enable full auto vacuum 您可以从命令提示符中运行下面的命令来检查 auto-vacuum 设置：</description></item><item><title>二十二、MySQL 返回删改查受影响的行数</title><link>https://www.shellio.cc/docs/database/mysql/22/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/22/</guid><description>在执行SELECT 、 DELATE 和 UPDATE 命令时最关心的应该是查询或删除或更新了多少条数据
这在mysql&amp;gt; 命令行中使用时是非常直观的，比如下面的执行结果
DELETE 1MariaDB [souyunku]&amp;gt;` DELETE FROM tbl_language WHERE name=&amp;#39;Python&amp;#39;; 2Query OK, 1 row affected (0.01 sec) 1row affected 表示删除了一条
UPDATE 1MariaDB [souyunku]&amp;gt; UPDATE tbl_language SET url=&amp;#39;https://ddkk.com/&amp;#39; WHERE name=&amp;#39;Python&amp;#39;; 2Query OK, 1 row affected (0.01 sec) 3Rows matched: 1 Changed: 1 Warnings: 0 1row affected 表示更新了一条
SELECT 1MariaDB [souyunku]&amp;gt; SELECT * FROM tbl_language WHERE name=&amp;#39;Python&amp;#39;; 2+----+--------+----------------------+------------+ 3| id | name | url | founded_at | 4+----+--------+----------------------+------------+ 5| 1 | Python | https://ddkk.</description></item><item><title>二十二、SQLite 视图</title><link>https://www.shellio.cc/docs/database/sqlite/22/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/22/</guid><description>SQLite 视图（View） 视图（View）只不过是通过相关的名称存储在数据库中的一个 SQLite 语句。视图（View）实际上是一个以预定义的 SQLite 查询形式存在的表的组合。
视图（View）可以包含一个表的所有行或从一个或多个表选定行。视图（View）可以从一个或多个表创建，这取决于要创建视图的 SQLite 查询。、
视图（View）是一种虚表，允许用户实现以下几点：
用户或用户组查找结构数据的方式更自然或直观。 限制数据访问，用户只能看到有限的数据，而不是完整的表。 汇总各种表中的数据，用于生成报告。 SQLite 视图是只读的，因此可能无法在视图上执行 DELETE、INSERT 或 UPDATE 语句。但是可以在视图上创建一个触发器，当尝试 DELETE、INSERT 或 UPDATE 视图时触发，需要做的动作在触发器内容中定义。
创建视图 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 SQLite 的视图是使用 CREATE VIEW 语句创建的。SQLite 视图可以从一个单一的表、多个表或其他视图创建。
CREATE VIEW 的基本语法如下：
1CREATE [TEMP | TEMPORARY] VIEW view_name AS 2SELECT column1, column2..... 3FROM table_name 4WHERE [condition]; 您可以在 SELECT 语句中包含多个表，这与在正常的 SQL SELECT 查询中的方式非常相似。如果使用了可选的 TEMP 或 TEMPORARY 关键字，则将在临时数据库中创建视图。
实例 假设COMPANY 表有以下记录：
1ID NAME AGE ADDRESS SALARY 2---------- ---------- ---------- ---------- ---------- 31 Paul 32 California 20000.</description></item><item><title>二十九、MySQL REGEXP 子句正则表达式查询</title><link>https://www.shellio.cc/docs/database/mysql/29/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/29/</guid><description>前面章节中我们已经了解到 MySQL 可以通过 LIKE ...% 子句来进行模糊匹配，但这都只是简单的模糊查询，也是速度最快的模糊查询
除此之外，MySQL 同样也支持其它正则表达式的匹配
MySQL 通过使用 REGEXP 操作符来进行正则表达式匹配
如果你了解过其它语言的正则表达式，比如 PHP 或 Perl 等，那么你会对 MySQL 的正则表达式元字符非常熟悉，因为它们都类似
MySQL REGEXP 操作符支持以下几种元子符
元字符 描述 ^ 匹配输入字符串的开始位置
如果设置了 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置 $ 匹配输入字符串的结束位置
如果设置了 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置 . 匹配除 “\n” 之外的任何单个字符
如果要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式 […] 字符集合。匹配所包含的任意一个字符
例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’ [^…] 负值字符集合。匹配未包含的任意字符
例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’ p1|p2|p3 匹配 p1 或 p2 或 p3</description></item><item><title>二十九、SQLite 常用函数</title><link>https://www.shellio.cc/docs/database/sqlite/29/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/29/</guid><description>SQLite 常用函数 SQLite 有许多内置函数用于处理字符串或数字数据。下面列出了一些有用的 SQLite 内置函数，且所有函数都是大小写不敏感，这意味着您可以使用这些函数的小写形式或大写形式或混合形式。欲了解更多详情，请查看 SQLite 的官方文档：
序号 函数 &amp;amp; 描述 1 SQLite COUNT 函数
SQLite COUNT 聚集函数是用来计算一个数据库表中的行数。 2 SQLite MAX 函数
SQLite MAX 聚合函数允许我们选择某列的最大值。 3 SQLite MIN 函数
SQLite MIN 聚合函数允许我们选择某列的最小值。 4 SQLite AVG 函数
SQLite AVG 聚合函数计算某列的平均值。 5 SQLite SUM 函数
SQLite SUM 聚合函数允许为一个数值列计算总和。 6 SQLite RANDOM 函数
SQLite RANDOM 函数返回一个介于 -9223372036854775808 和 +9223372036854775807 之间的伪随机整数。 7 SQLite ABS 函数
SQLite ABS 函数返回数值参数的绝对值。 8 SQLite UPPER 函数
SQLite UPPER 函数把字符串转换为大写字母。 9 SQLite LOWER 函数</description></item><item><title>二十六、MySQL GROUP BY 分组查询数据</title><link>https://www.shellio.cc/docs/database/mysql/26/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/26/</guid><description>GROUP BY 语句根据一个或多个列对结果集进行分组
在分组的列上可以使用 COUNT(), SUM(), AVG() 等函数
GROUP BY 语法格式 SQLSELECT 中语句使用 GROUP BY 子句对查询数据进行分组的语法格式如下
1SELECT column_name, function(column_name) 2FROM table_name 3WHERE column_name operator value 4GROUP BY column_name; 范例数据 可以在mysql&amp;gt; 命令行中运行以下语句填充范例数据
1DROP TABLE IF EXISTS tbl_language; 2DROP TABLE IF EXISTS tbl_rank; 3CREATE TABLE IF NOT EXISTS tbl_language( 4 id INT UNSIGNED AUTO_INCREMENT, 5 name VARCHAR(64) NOT NULL, 6 url VARCHAR(128) NOT NULL, 7 founded_at DATE, 8 PRIMARY KEY ( id ) 9)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 10CREATE TABLE IF NOT EXISTS tbl_rank( 11 id INT UNSIGNED AUTO_INCREMENT, 12 name VARCHAR(64) NOT NULL, 13 month VARCHAR(7) NOT NULL, 14 rank TINYINT NOT NULL, 15 rate VARCHAR(32) NOT NULL, 16 PRIMARY KEY ( id ) 17)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 18INSERT INTO tbl_language VALUES 19 (1,&amp;#39;Python&amp;#39;,&amp;#39;https://ddkk.</description></item><item><title>二十六、SQLite 注入</title><link>https://www.shellio.cc/docs/database/sqlite/26/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/26/</guid><description>SQLite 注入 如果您的站点允许用户通过网页输入，并将输入内容插入到 SQLite 数据库中，这个时候您就面临着一个被称为 SQL 注入的安全问题。本章节将向您讲解如何防止这种情况的发生，确保脚本和 SQLite 语句的安全。
注入通常在请求用户输入时发生，比如需要用户输入姓名，但用户却输入了一个 SQLite 语句，而这语句就会在不知不觉中在数据库上运行。
永远不要相信用户提供的数据，所以只处理通过验证的数据，这项规则是通过模式匹配来完成的。在下面的实例中，用户名 username 被限制为字母数字字符或者下划线，长度必须在 8 到 20 个字符之间 – 请根据需要修改这些规则。
1if (preg_match(&amp;#34;/^\w{8,20}$/&amp;#34;, $_GET[&amp;#39;username&amp;#39;], $matches)){ 2 $db = new SQLiteDatabase(&amp;#39;filename&amp;#39;); 3 $result = @$db-&amp;gt;query(&amp;#34;SELECT * FROM users WHERE username=$matches[0]&amp;#34;); 4}else{ 5 echo &amp;#34;username not accepted&amp;#34;; 为了演示这个问题，假设考虑此摘录：To demonstrate the problem, consider this excerpt:
1$name = &amp;#34;Qadir&amp;#39;; DELETE FROM users;&amp;#34;; 2@$db-&amp;gt;query(&amp;#34;SELECT * FROM users WHERE username=&amp;#39;{$name}&amp;#39;&amp;#34;); 函数调用是为了从用户表中检索 name 列与用户指定的名称相匹配的记录。正常情况下，$name 只包含字母数字字符或者空格，比如字符串 ilia。但在这里，向 $name 追加了一个全新的查询，这个对数据库的调用将会造成灾难性的问题：注入的 DELETE 查询会删除 users 的所有记录。</description></item><item><title>二十七、MySQL JOIN 进行多表查询</title><link>https://www.shellio.cc/docs/database/mysql/27/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/27/</guid><description>前面我们学的都是单张表的操作，都比较简单，但数据往往是多张表组成的，往往需要从多张表中查找数据
这时候就会用到表连接，也就是两张或者多张表如何组成一张大表，然后从大表里查找数据
连表方式 我们先来看看两张表连接的情况，我们假设两张表，A 表 和 B 表，如下图
当我们把两张表和在一起的时候，有一种拼合法只取表头颜色一样的拼在一起，不一样的扔掉，就像下图一样，这种拼接法，我们称之为 内连接
还有一种拼接法就是把 A 表中的都留下来，然后从 B 中找对应的颜色粘合在一起，就像下图一样，我们称之为 左连接
还有一种拼接法就是把 B 表中的都留下来，然后从 A 表里找对应的颜色粘合在一起,就像下图一样，我们称之为 右连接
最后一种拼接法，就是 A 表中的都留下，然后从 B 表中找对应的颜色粘合在一起，剩下的那些 B 表中的则全部排在最后，并不扔掉，就先下图一样，我们称之为 外链接
注意： 记住我刚刚说的查找过程，因为这是面试常考题目，就是先把一张表的记录查出来，然后根据记录一条一条去另一张表里找，这是不是很像我们堆积木游戏一样，表连接的本质过程也是这样，所以才导致了表连接很慢
如果有三张，四张，五张表也是同一个道理
这里有一点没演示到，就是如果任何一张表中有重复的表头颜色，那么也会重复显示一次
MySQL 中的连表 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 MySQL 支持上面四种连接中的前三种，第四种外连接不支持
可以在SELECT, UPDATE 和 DELETE 语句中使用 MySQL 的 JOIN 来联合多表查询
连表方式 名称 说明 INNER JOIN 内连接 获取两个表中字段匹配关系的记录 LEFT JOIN 左连接 获取左表所有记录，即使右表没有对应匹配的记录 RIGHT JOIN 右连接 获取右表所有记录，即使左表没有对应匹配的记录 MySQL 中的 INNER JOIN 可以省略 INNER 关键字，也就是 JOIN == INNER JOIN</description></item><item><title>二十七、SQLite Explain</title><link>https://www.shellio.cc/docs/database/sqlite/27/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/27/</guid><description>SQLite Explain（解释） 在SQLite 语句之前，可以使用 “EXPLAIN” 关键字或 “EXPLAIN QUERY PLAN” 短语，用于描述表的细节。
如果省略了 EXPLAIN 关键字或短语，任何的修改都会引起 SQLite 语句的查询行为，并返回有关 SQLite 语句如何操作的信息。
来自 EXPLAIN 和 EXPLAIN QUERY PLAN 的输出只用于交互式分析和排除故障。 输出格式的细节可能会随着 SQLite 版本的不同而有所变化。 应用程序不应该使用 EXPLAIN 或 EXPLAIN QUERY PLAN，因为其确切的行为是可变的且只有部分会被记录。 语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 EXPLAIN 的语法如下：
1EXPLAIN [SQLite Query] EXPLAIN QUERY PLAN 的语法如下：
1EXPLAIN QUERY PLAN [SQLite Query] 实例 假设COMPANY 表有以下记录：
1ID NAME AGE ADDRESS SALARY 2---------- ---------- ---------- ---------- ---------- 31 Paul 32 California 20000.0 42 Allen 25 Texas 15000.</description></item><item><title>二十三、MySQL LIKE 子句模糊查询数据</title><link>https://www.shellio.cc/docs/database/mysql/23/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/23/</guid><description>我们知道在 MySQL 中可以使用 SQL SELECT FROM 命令查询数据，也可以在 SELECT FROM 语句中使用 WHERE 子句有条件的获取指定的记录
我们知道 = 操作符用于完全匹配某个条件，比如 name='Python 只能查询 name 为 Python 的记录，却不能查询以 P 开头的记录
但如果我们想要查询 name 以 P 开头的记录要怎么做呢？
答案就是在 WHERE 字句中使用 LIKE 子句
LIKE 子句 LIKE 子句用于设定模糊查询条件
LIKE 子句中可以使用 百分号% 字符来表示任意字符，比如 P% 可以匹配以 P 开头的所有字符串，%on 可以匹配所有以 on 结尾的字符串
LIKE 子句语法 在SELECT FROM 语句使用 LIKE 子句从数据表中读取数据的语法格式如下
1SELECT field1, field2,...fieldN 2FROM table_name 3WHERE field1 LIKE condition1 [AND [OR]] filed2 = &amp;#39;somevalue&amp;#39; 可以在 WHERE 子句中使用 LIKE 子句 LIKE 通常与 % 一同使用，类似于一个元字符的搜索 可以在DELETE 或 UPDATE 命令中使用 WHERE.</description></item><item><title>二十三、SQLite 事务</title><link>https://www.shellio.cc/docs/database/sqlite/23/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/23/</guid><description>SQLite 事务（Transaction） 事务（Transaction）是一个对数据库执行工作单元。事务（Transaction）是以逻辑顺序完成的工作单位或序列，可以是由用户手动操作完成，也可以是由某种数据库程序自动完成。
事务（Transaction）是指一个或多个更改数据库的扩展。例如，如果您正在创建一个记录或者更新一个记录或者从表中删除一个记录，那么您正在该表上执行事务。重要的是要控制事务以确保数据的完整性和处理数据库错误。
实际上，您可以把许多的 SQLite 查询联合成一组，把所有这些放在一起作为事务的一部分进行执行。
事务的属性 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 事务（Transaction）具有以下四个标准属性，通常根据首字母缩写为 ACID：
**原子性（Atomicity）：**确保工作单位内的所有操作都成功完成，否则，事务会在出现故障时终止，之前的操作也会回滚到以前的状态。 **一致性（Consistency)：**确保数据库在成功提交的事务上正确地改变状态。 **隔离性（Isolation）：**使事务操作相互独立和透明。 **持久性（Durability）：**确保已提交事务的结果或效果在系统发生故障的情况下仍然存在。 事务控制 使用下面的命令来控制事务：
BEGIN TRANSACTION：开始事务处理。 COMMIT：保存更改，或者可以使用 END TRANSACTION 命令。 ROLLBACK：回滚所做的更改。 事务控制命令只与 DML 命令 INSERT、UPDATE 和 DELETE 一起使用。他们不能在创建表或删除表时使用，因为这些操作在数据库中是自动提交的。
BEGIN TRANSACTION 命令 事务（Transaction）可以使用 BEGIN TRANSACTION 命令或简单的 BEGIN 命令来启动。此类事务通常会持续执行下去，直到遇到下一个 COMMIT 或 ROLLBACK 命令。不过在数据库关闭或发生错误时，事务处理也会回滚。以下是启动一个事务的简单语法：
1BEGIN; 2or 3BEGIN TRANSACTION; COMMIT 命令 COMMIT 命令是用于把事务调用的更改保存到数据库中的事务命令。
COMMIT 命令把自上次 COMMIT 或 ROLLBACK 命令以来的所有事务保存到数据库。
COMMIT 命令的语法如下：
1COMMIT; 2or 3END TRANSACTION; ROLLBACK 命令 ROLLBACK 命令是用于撤消尚未保存到数据库的事务的事务命令。
ROLLBACK 命令只能用于撤销自上次发出 COMMIT 或 ROLLBACK 命令以来的事务。</description></item><item><title>二十四、MySQL UNION 操作符查询多张表</title><link>https://www.shellio.cc/docs/database/mysql/24/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/24/</guid><description>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中
多个SELECT 语句会删除重复的数据
UNION 操作符语法 MySQL UNION 操作符的语法格式如下
1SELECT expression1, expression2, ... expression_n 2FROM tables 3[WHERE conditions] 4UNION [ALL | DISTINCT] 5SELECT expression1, expression2, ... expression_n 6FROM tables 7[WHERE conditions]; 参数 说明 expression1, expression2, … expression_n 要检索的列 tables 要检索的数据表 WHERE conditions 可选， 检索条件 DISTINCT 可选，删除结果集中重复的数据
默认情况下 UNION 操作符已经删除了重复数据
所以 DISTINCT 修饰符对结果没啥影响 ALL 可选，返回所有结果集，包含重复数据 范例数据 可以在mysql&amp;gt; 命令行中运行以下语句填充范例数据
1DROP TABLE IF EXISTS tbl_language; 2DROP TABLE IF EXISTS tbl_rank; 3CREATE TABLE IF NOT EXISTS tbl_language( 4 id INT UNSIGNED AUTO_INCREMENT, 5 name VARCHAR(64) NOT NULL, 6 url VARCHAR(128) NOT NULL, 7 founded_at DATE, 8 PRIMARY KEY ( id ) 9)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 10CREATE TABLE IF NOT EXISTS tbl_rank( 11 id INT UNSIGNED AUTO_INCREMENT, 12 name VARCHAR(64) NOT NULL, 13 month VARCHAR(7) NOT NULL, 14 rank TINYINT NOT NULL, 15 rate VARCHAR(32) NOT NULL, 16 PRIMARY KEY ( id ) 17)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 18INSERT INTO tbl_language VALUES 19 (1,&amp;#39;Python&amp;#39;,&amp;#39;https://ddkk.</description></item><item><title>二十四、SQLite 子查询</title><link>https://www.shellio.cc/docs/database/sqlite/24/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/24/</guid><description>SQLite 子查询 子查询或内部查询或嵌套查询是在另一个 SQLite 查询内嵌入在 WHERE 子句中的查询。
使用子查询返回的数据将被用在主查询中作为条件，以进一步限制要检索的数据。
子查询可以与 SELECT、INSERT、UPDATE 和 DELETE 语句一起使用，可伴随着使用运算符如 =、&amp;lt;、&amp;gt;、&amp;gt;=、&amp;lt;=、IN、BETWEEN 等。
以下是子查询必须遵循的几个规则：
子查询必须用括号括起来。 子查询在 SELECT 子句中只能有一个列，除非在主查询中有多列，与子查询的所选列进行比较。 ORDER BY 不能用在子查询中，虽然主查询可以使用 ORDER BY。可以在子查询中使用 GROUP BY，功能与 ORDER BY 相同。 子查询返回多于一行，只能与多值运算符一起使用，如 IN 运算符。 BETWEEN 运算符不能与子查询一起使用，但是，BETWEEN 可在子查询内使用。 SELECT 语句中的子查询使用 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 子查询通常与 SELECT 语句一起使用。基本语法如下：
1SELECT column_name [, column_name ] 2FROM table1 [, table2 ] 3WHERE column_name OPERATOR 4 (SELECT column_name [, column_name ] 5 FROM table1 [, table2 ] 6 [WHERE]) 实例 假设COMPANY 表有以下记录：</description></item><item><title>二十五、MySQL ORDER BY 排序</title><link>https://www.shellio.cc/docs/database/mysql/25/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/25/</guid><description>前面我们学到了可以使用 SELECT FROM 从 MySQL 中查询数据，但是，查出来数据的排序可能不是我们想要的，比如我们想根据 name 排序，要怎么做呢？
答案就是使用 MySQL 的 ORDER BY 子句
ORDER BY 子句可以设定想按哪个字段哪种方式来进行排序，再返回搜索结果
ORDER BY 子句语法 SQLSELECT 中语句使用 ORDER BY 子句对查询数据进行排序的语法格式如下
1SELECT field1, field2,...fieldN table_name1, table_name2... 2ORDER BY field1, [field2...] [ASC [DESC]] 可以使用任何字段来作为排序的条件，从而返回排序后的查询结果 可以设定多个字段来排序 可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列 默认情况下按升序排列 可以添加 WHERE 子句来设置条件 范例数据 可以在mysql&amp;gt; 命令行中运行以下语句填充范例数据
1DROP TABLE IF EXISTS tbl_language; 2CREATE TABLE IF NOT EXISTS tbl_language( 3 id INT UNSIGNED AUTO_INCREMENT, 4 name VARCHAR(64) NOT NULL, 5 url VARCHAR(128) NOT NULL, 6 founded_at DATE, 7 PRIMARY KEY ( id ) 8)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 9INSERT INTO tbl_language VALUES 10 (1,&amp;#39;Python&amp;#39;,&amp;#39;https://ddkk.</description></item><item><title>二十五、SQLite Autoincrement</title><link>https://www.shellio.cc/docs/database/sqlite/25/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/25/</guid><description>SQLite Autoincrement（自动递增） SQLite 的 AUTOINCREMENT 是一个关键字，用于表中的字段值自动递增。我们可以在创建表时在特定的列名称上使用 AUTOINCREMENT 关键字实现该字段值的自动增加。
关键字AUTOINCREMENT 只能用于整型（INTEGER）字段。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 AUTOINCREMENT 关键字的基本用法如下：
1CREATE TABLE table_name( 2 column1 INTEGER AUTOINCREMENT, 3 column2 datatype, 4 column3 datatype, 5 ..... 6 columnN datatype, 7); 实例 假设要创建的 COMPANY 表如下所示：
1sqlite&amp;gt; CREATE TABLE COMPANY( 2 ID INTEGER PRIMARY KEY AUTOINCREMENT, 3 NAME TEXT NOT NULL, 4 AGE INT NOT NULL, 5 ADDRESS CHAR(50), 6 SALARY REAL 7); 现在，向 COMPANY 表插入以下记录：
1INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) 2VALUES ( &amp;#39;Paul&amp;#39;, 32, &amp;#39;California&amp;#39;, 20000.</description></item><item><title>二十一、MySQL DELETE FROM 语句删除数据</title><link>https://www.shellio.cc/docs/database/mysql/21/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/21/</guid><description>可以使用 SQL 的 DELETE FROM 命令来删除 MySQL 数据表中的记录
DELETE FROM 语句语法 DELETE FROM SQL 语句删除数据的通用语法格式如下
1DELETE FROM table_name [WHERE Clause] 如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除 可以在 WHERE 子句中指定任何条件 可以在单个表中一次性删除记录 注意： 如果没有 WHERE 语句，那会删除所有的数据，而且无法复原，所以请谨慎
当你想删除数据表中指定的记录时 WHERE 子句是非常有用的。
通过命令提示符删除数据 可以在mysql&amp;gt; 命令提示窗口中执行 DELETE FROM SQL 语句删除表中的数据
下面的代码使用 DELETE SQL 语句将 name='Python' 的数据行删除
1MariaDB [souyunku]&amp;gt;` SELECT * FROM tbl_language; 2+----+--------+----------------------------+------------+ 3| id | name | url | founded_at | 4+----+--------+----------------------------+------------+ 5| 1 | Python | https://ddkk.</description></item><item><title>二十一、SQLite Truncate Table</title><link>https://www.shellio.cc/docs/database/sqlite/21/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/21/</guid><description>SQLite Truncate Table 在SQLite 中，并没有 TRUNCATE TABLE 命令，但可以使用 SQLite 的 DELETE 命令从已有的表中删除全部的数据，但建议使用 DROP TABLE 命令删除整个表，然后再重新创建一遍。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 DELETE 命令的基本语法如下：
1sqlite&amp;gt; DELETE FROM table_name; DROP TABLE 的基本语法如下：
1sqlite&amp;gt; DROP TABLE table_name; 如果您使用 DELETE TABLE 命令删除所有记录，建议使用 VACUUM 命令清除未使用的空间。
实例 假设COMPANY 表有如下记录：
1ID NAME AGE ADDRESS SALARY 2---------- ---------- ---------- ---------- ---------- 31 Paul 32 California 20000.0 42 Allen 25 Texas 15000.0 53 Teddy 23 Norway 20000.0 64 Mark 25 Rich-Mond 65000.0 75 David 27 Texas 85000.</description></item><item><title>九、MySQL 创建数据库</title><link>https://www.shellio.cc/docs/database/mysql/9/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/9/</guid><description>MySQL 创建数据库的方式有两种：
1、 使用mysqladmin创建数据库；
2、 使用CREATEDATABASE语句创建数据库；
如果使用普通用户连接到 MySQL 服务器，可能需要特定的权限来创建或者删除 MySQL 数据库
所以接下来的教程中，我们使用 root 用户登录，因为 root 用户拥有最高权限
使用 mysqladmin 创建数据库 可以使用 mysqladmin 命令来创建数据库
mysqladmin 命令语法格式如下 1mysqladmin [OPTIONS] command [command-option] command ... 通过执行 mysqladmin --help，可以得到 mysqladmin 的版本所支持的一个选项列表
命令(command) 描述 create databasename 创建一个新数据库 drop databasename 删除一个数据库及其所有表 extended-status 给出服务器的一个扩展状态消息 flush-hosts 洗掉所有缓存的主机 flush-logs 洗掉所有日志 flush-tables 洗掉所有表 flush-privileges 再次装载授权表(同 reload ) kill id,id,… 杀死 mysql 线程 password 新口令，将老口令改为新口令 ping 检查 mysqld 是否活着 processlist 显示服务其中活跃线程列表 reload 重载授权表 refresh 洗掉所有表并关闭和打开日志文件 shutdown 关掉服务器 status 给出服务器的简短状态消息 variables 打印出可用变量 version 得到服务器的版本信息 下面的mysqladmin 命令演示了创建数据库 souyunku 的过程</description></item><item><title>九、SQLite Having 子句</title><link>https://www.shellio.cc/docs/database/sqlite/9/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/9/</guid><description>SQLite Having 子句 HAVING 子句允许指定条件来过滤将出现在最终结果中的分组结果。
WHERE 子句在所选列上设置条件，而 HAVING 子句则在由 GROUP BY 子句创建的分组上设置条件。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 下面是HAVING 子句在 SELECT 查询中的位置：
1SELECT 2FROM 3WHERE 4GROUP BY 5HAVING 6ORDER BY 在一个查询中，HAVING 子句必须放在 GROUP BY 子句之后，必须放在 ORDER BY 子句之前。下面是包含 HAVING 子句的 SELECT 语句的语法：
1SELECT column1, column2 2FROM table1, table2 3WHERE [ conditions ] 4GROUP BY column1, column2 5HAVING [ conditions ] 6ORDER BY column1, column2 实例 假设COMPANY 表有以下记录：
1ID NAME AGE ADDRESS SALARY 2---------- ---------- ---------- ---------- ---------- 31 Paul 32 California 20000.</description></item><item><title>六、MySQL PHP 语法</title><link>https://www.shellio.cc/docs/database/mysql/6/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/6/</guid><description>很多语言都提供了操作 MySQL 的函数库，包括 PERL, C, C++, JAVA 和 PHP 等等。
这些语言中，尤以 PHP 与 MySQL 的结合最为广泛。
MySQL 与 PHP、Linux、Apache、Nginx 组成的 LAMP 和 LNMP 最为经典
如果你想了解 MySQL 在 PHP 中的应用，可以访问我们的 PHP MySQL 基础教程
范例 下面的代码演示了 PHP 使用 PDO_MySQL 操作 MySQL
1&amp;lt;?php 2/* 3 * filename: main.php 4 * author: DDKK.COM 弟弟快看，程序员编程资料站(ddkk.com) 5 * 6 * Copyright © 2015-2065 ddkk.com. All rights reserved. 7 */ 8try { 9 $dbh = new PDO(&amp;#39;mysql:host=127.0.0.1;dbname=souyunku&amp;#39;, &amp;#39;root&amp;#39;, &amp;#39;&amp;#39;); 10 print_r($dbh); 11 $dbh = null; 12catch (PDOException $e) 13{ 14 print &amp;#34;Error!</description></item><item><title>六、SQLite Limit 子句</title><link>https://www.shellio.cc/docs/database/sqlite/6/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/6/</guid><description>SQLite Limit 子句 SQLite 的 LIMIT 子句用于限制由 SELECT 语句返回的数据数量。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 带有LIMIT 子句的 SELECT 语句的基本语法如下：
1SELECT column1, column2, columnN 2FROM table_name 3LIMIT [no of rows] 下面是LIMIT 子句与 OFFSET 子句一起使用时的语法：
1SELECT column1, column2, columnN 2FROM table_name 3LIMIT [no of rows] OFFSET [row num] SQLite 引擎将返回从下一行开始直到给定的 OFFSET 为止的所有行，如下面的最后一个实例所示。
实例 假设COMPANY 表有以下记录：
1ID NAME AGE ADDRESS SALARY 2---------- ---------- ---------- ---------- ---------- 31 Paul 32 California 20000.0 42 Allen 25 Texas 15000.0 53 Teddy 23 Norway 20000.</description></item><item><title>七、MySQL 创建连接</title><link>https://www.shellio.cc/docs/database/mysql/7/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/7/</guid><description>连接到MySQL 服务器由三种办法，使用 mysql 命名 、使用 Navicat MySQL 客户端和使用各种开发语言连接
使用 mysql 命令连接 mysql 命令一般会随着 MySQL 安装而自带，这是最基本的也是最容易连接到 MySQL 服务器的方式
可以使用下面的命令连接到 MySQL 服务器
1mysql -u [用户名] -p [密码,可以不输入] 例如使用 root 用户登录
1[root@locahost ~]# mysql -u root -p 连接成功后会显示 mysql&amp;gt; 命令提示窗口，然后我们就可以开始使用这个连接运行任何 SQL 语句
命令演示如下
1[root@ddkk.com ~]# mysql -uroot -p 2Enter password: 3Welcome to the MariaDB monitor. Commands end with ; or \g. 4Your MariaDB connection id is 3 5Server version: 5.5.56-MariaDB MariaDB Server 6Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.</description></item><item><title>七、SQLite Order By</title><link>https://www.shellio.cc/docs/database/sqlite/7/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/7/</guid><description>SQLite Order By SQLite 的 ORDER BY 子句是用来基于一个或多个列按升序或降序顺序排列数据。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 ORDER BY 子句的基本语法如下：
1SELECT column-list 2FROM table_name 3[WHERE condition] 4[ORDER BY column1, column2, .. columnN] [ASC | DESC]; 您可以在 ORDER BY 子句中使用多个列。确保您使用的排序列在列清单中。
实例 假设COMPANY 表有以下记录：
1ID NAME AGE ADDRESS SALARY 2---------- ---------- ---------- ---------- ---------- 31 Paul 32 California 20000.0 42 Allen 25 Texas 15000.0 53 Teddy 23 Norway 20000.0 64 Mark 25 Rich-Mond 65000.0 75 David 27 Texas 85000.</description></item><item><title>三、MySQL MariaDB 安装</title><link>https://www.shellio.cc/docs/database/mysql/3/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/3/</guid><description>MySQL / MariaDB 是跨平台的，所有平台的 MySQL 下载地址为： MySQL 官方下载
挑选适合你电脑或服务器的的 MySQL Community Server 版本及对应的平台
Linux / UNIX 上安装 MySQL Linux 平台上推荐使用 RPM 包来安装 MySQL, MySQL AB 提供了下列 RPM 包的下载地址
MySQL
MySQL服务器
我们需要该选项，除非只想连接运行在另一台机器上的 MySQL 服务器
MySQL-client
MySQL 客户端程序，用于连接并操作 MySQL 服务器
MySQL-devel
库和包含文件，如果想要编译其它 MySQL 客户端，例如 Perl 模块，则需要安装该 RPM 包
MySQL-shared
包含某些语言和应用程序需要动态装载的共享库 (libmysqlclient.so*)
MySQL-bench
MySQL数据库服务器的基准和性能测试工具
Centos 6.X 系统下使用 yum 命令安装 MySql 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 1. 检查系统是否自带安装 MySQL: 1[root@ddkk.com ~]# rpm -qa | grep mysql 如果系统有安装，那可以选择进行卸载</description></item><item><title>三、SQLite Delete 语句</title><link>https://www.shellio.cc/docs/database/sqlite/3/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/3/</guid><description>SQLite Delete 语句 SQLite 的 DELETE 查询用于删除表中已有的记录。可以使用带有 WHERE 子句的 DELETE 查询来删除选定行，否则所有的记录都会被删除。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 带有WHERE 子句的 DELETE 查询的基本语法如下：
1DELETE FROM table_name 2WHERE [condition]; 您可以使用 AND 或 OR 运算符来结合 N 个数量的条件。
实例 假设COMPANY 表有以下记录：
1ID NAME AGE ADDRESS SALARY 2---------- ---------- ---------- ---------- ---------- 31 Paul 32 California 20000.0 42 Allen 25 Texas 15000.0 53 Teddy 23 Norway 20000.0 64 Mark 25 Rich-Mond 65000.0 75 David 27 Texas 85000.0 86 Kim 22 South-Hall 45000.</description></item><item><title>三十、MySQL 数据库事务</title><link>https://www.shellio.cc/docs/database/mysql/30/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/30/</guid><description>数据库事务 (Database Transaction) 是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行
事务处理可以确保除非事务性单元内的所有操作都成功完成，否则不会永久更新面向数据的资源
举个例子，A 向 B 转账 100 元，其实整个转账过程就是一个事务，要么转账成功了，A 的账户扣了 100 元，B 的账户增加了 100 元，要么转账失败，A 还是那么多钱，B 还是没钱，如果出现 A 扣了 100 元，B 的账户却没增加 100 元，那是要出问题的，是不？
事务，就是用来做这件事的，用来保证要么转账成功，要么转账失败
MySQL 事务 MySQL 支持事务，但是，但是只有使用 Innodb 数据库引擎的数据库或表才支持事务
事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行
一般来说，事务是必须满足4个条件 ( ACID )
Atomicity(原子性)、Consistency(稳定性)、Isolation(隔离性)、Durability(可靠性)
1、 原子性；
1一组事务，要么成功；要么失败回滚当作什么事都没发生 2、 稳定性；
1有非法数据 (外键约束之类)，事务撤回 3、 隔离性；
1事务独立运行。一个事务处理后的结果，影响了其它事务，那么其它事务会撤回 2事务的100%隔离，需要牺牲速度 4、 可靠性；
1软、硬件崩溃后，InnoDB 数据表驱动会利用日志文件重构修改 2可靠性和高速度不可兼得 innodb_flush_log_at_trx_commit 选项决定什么时候吧事务保存到日志里 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作
因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交</description></item><item><title>三十、SQLite – C-C++</title><link>https://www.shellio.cc/docs/database/sqlite/30/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/30/</guid><description>SQLite – C/C++ 安装 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 在C/C++ 程序中使用 SQLite 之前，我们需要确保机器上已经有 SQLite 库。可以查看 SQLite 安装章节了解安装过程。
C/C++ 接口 API 以下是重要的 C&amp;amp;C++ / SQLite 接口程序，可以满足您在 C/C++ 程序中使用 SQLite 数据库的需求。如果您需要了解更多细节，请查看 SQLite 官方文档。
序号 API &amp;amp; 描述 1 sqlite3_open(const char *filename, sqlite3 **ppDb)
该例程打开一个指向 SQLite 数据库文件的连接，返回一个用于其他 SQLite 程序的数据库连接对象。
如果 filename 参数是 NULL 或 ‘:memory:’，那么 sqlite3_open() 将会在 RAM 中创建一个内存数据库，这只会在 session 的有效时间内持续。
如果文件名 filename 不为 NULL，那么 sqlite3_open() 将使用这个参数值尝试打开数据库文件。如果该名称的文件不存在，sqlite3_open() 将创建一个新的命名为该名称的数据库文件并打开。
2 sqlite3_exec(sqlite3*, const char *sql, sqlite_callback, void *data, char **errmsg) 该例程提供了一个执行 SQL 命令的快捷方式，SQL 命令由 sql 参数提供，可以由多个 SQL 命令组成。</description></item><item><title>三十八、MySQL 处理重复数据</title><link>https://www.shellio.cc/docs/database/mysql/38/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/38/</guid><description>MySQL 数据表中可能存在重复的记录，它们的差别可能只是自增 id 不一样
有时候我们允许重复数据的存在，但有时候也需要删除这些重复的数据
防止表中出现重复数据 可以在MySQL 数据表中设置指定的字段为 PRIMARY KEY（主键） 或者 UNIQUE（唯一） 索引来保证数据的唯一性
比如我们创建一个没有主键也没有唯一索引的表 tbl_language，那么该表就会允许出现多条重复记录
1CREATE TABLE IF NOT EXISTS tbl_language( 2 id INT UNSIGNED, 3 name VARCHAR(64) NOT NULL, 4 url VARCHAR(128) NOT NULL, 5 founded_at DATE 6)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 然后我们就可以重复的插入 N 多条一样的数据
1MariaDB [souyunku]&amp;gt; DROP TABLE tbl_language; 2Query OK, 0 rows affected (0.01 sec) 3MariaDB [souyunku]&amp;gt;` CREATE TABLE IF NOT EXISTS tbl_language( 4 -&amp;gt;` id INT UNSIGNED, 5 -&amp;gt;` name VARCHAR(64) NOT NULL, 6 -&amp;gt;` url VARCHAR(128) NOT NULL, 7 -&amp;gt;` founded_at DATE 8 -&amp;gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 9Query OK, 0 rows affected (0.</description></item><item><title>三十二、MySQL 索引</title><link>https://www.shellio.cc/docs/database/mysql/32/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/32/</guid><description>MySQL 索引可以大大提高 MySQL 的检索速度
打个比方，如果合理的设计且使用索引的 MySQL 是一辆高速公路的话，那么没有设计和使用索引的 MySQL 就是一个人力山村泥泞路
索引分单列索引和组合索引
1、 单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引；
2、 组合索引，即一个索引包含多个列；
创建索引时，需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)
实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录
过多的使用索引将会造成滥用
因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行 INSERT、UPDATE和 DELETE 因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件
建立索引会占用磁盘空间的索引文件
显示索引信息 SHOW INDEX FROM tablename; 命令可以列出某个表中的相关的索引信息
比如下面的 SQL 命名用于列出 tbl_language 表的索引信息
1SHOW INDEX FROM tbl_language; 运行结果如下
1MariaDB [souyunku]&amp;gt; SHOW INDEX FROM tbl_language; 2+--------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ 3| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | 4+--------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ 5| tbl_language | 0 | PRIMARY | 1 | id | A | 0 | NULL | NULL | | BTREE | | | 6+--------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ 71 row in set (0.</description></item><item><title>三十二、SQLite 安装</title><link>https://www.shellio.cc/docs/database/sqlite/32/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/32/</guid><description>SQLite 安装 SQLite 的一个重要的特性是零配置的，这意味着不需要复杂的安装或管理。本章将讲解 Windows、Linux 和 Mac OS X 上的安装设置。
在 Windows 上安装 SQLite 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 请访问 SQLite 下载页面，从 Windows 区下载预编译的二进制文件。 您需要下载 sqlite-shell-win32-*.zip 和 sqlite-dll-win32-*.zip 压缩文件。 创建文件夹 C:\&amp;gt;sqlite，并在此文件夹下解压上面两个压缩文件，将得到 sqlite3.def、sqlite3.dll 和 sqlite3.exe 文件。 添加 C:\&amp;gt;sqlite 到 PATH 环境变量，最后在命令提示符下，使用 sqlite3 命令，将显示如下结果。 1C:\&amp;gt;sqlite3 2SQLite version 3.7.15.2 2013-01-09 11:53:05 3Enter &amp;#34;.help&amp;#34; for instructions 4Enter SQL statements terminated with a &amp;#34;;&amp;#34; 5sqlite&amp;gt; 在 Linux 上安装 SQLite 目前，几乎所有版本的 Linux 操作系统都附带 SQLite。所以，只要使用下面的命令来检查您的机器上是否已经安装了 SQLite。
1$sqlite3 2SQLite version 3.7.15.2 2013-01-09 11:53:05 3Enter &amp;#34;.</description></item><item><title>三十九、MySQL 安全及防止 SQL 注入攻击</title><link>https://www.shellio.cc/docs/database/mysql/39/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/39/</guid><description>如果通过网页获取用户输入的数据并将其插入 MySQL 数据库，那么就有可能发生 SQL注入攻击的安全问题
作为研发，有一条铁律需要记住，那就是
永远不要相信用户的数据，哪怕他一再承诺是安全的
SQL 注入式攻击 SQL 注入，就是通过把 SQL 命令插入到 Web 表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令
比如有一个表单，用户可以输入 name
1&amp;lt;?php 2$name = $_GET[&amp;#39;name&amp;#39;]; 3$dbh-&amp;gt;query(&amp;#34;SELECT * FROM users WHERE name=&amp;#39;{$name}&amp;#39;&amp;#34;); 那么当用户输入的 name 为 Python'; DELETE FROM user;' 时会变成什么？
1SELECT * FROM users WHERE name=&amp;#39;Python&amp;#39;; DELETE FROM user;&amp;#39;&amp;#39;; 这条语句运行一下，会发现什么？ 我们的 user 表被清空啦，很可怕，对不对
所以我们需要对用户的输入进行过滤处理
例如下面的 PHP 语句，要求用户输入的名称 name 必须是字母、数字及下划线的组合，且用户名长度为 8 到 20 个字符之间
1&amp;lt;?php 2if (preg_match(&amp;#34;/^\w{8,20}$/&amp;#34;, $_GET[&amp;#39;name&amp;#39;], $matches)) 3 $dbh-&amp;gt;query(&amp;#34;SELECT * FROM tbl_language WHERE name=$matches[0]&amp;#34;); 4else 5 echo &amp;#34;username 输入异常&amp;#34;; 防止 SQL 注入要诀 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 防止SQL 注入，我们需要注意以下几个要点</description></item><item><title>三十六、MySQL 获取服务器元数据</title><link>https://www.shellio.cc/docs/database/mysql/36/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/36/</guid><description>如果想要获取服务器的元数据，可以使用下表的语句
命令 说明 SELECT VERSION() 返回服务器版本信息 SELECT DATABASE() 返回当前数据库名 (或者返回空) SELECT USER() 返回当前用户名 SHOW STATUS 返回服务器状态 SHOW VARIABLES 返回服务器配置变量 SELECT VERSION() 获取服务器版本信息 1MariaDB [souyunku]&amp;gt; SELECT VERSION(); 2+-----------------+ 3| VERSION() | 4+-----------------+ 5| 10.2.13-MariaDB | 6+-----------------+ 71 row in set (0.01 sec) SELECT DATABASE() 获取当前数据库名 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 1MariaDB [souyunku]&amp;gt; SELECT DATABASE(); 2+------------+ 3| DATABASE() | 4+------------+ 5| souyunku | 6+------------+ 71 row in set (0.00 sec) 如果当前没有选择任何数据库，则返回 NULL
1MariaDB [(none)]&amp;gt; SELECT DATABASE(); 2+------------+ 3| DATABASE() | 4+------------+ 5| NULL | 6+------------+ 71 row in set (0.</description></item><item><title>三十七、MySQL 自增序列 AUTO_INCREMENT</title><link>https://www.shellio.cc/docs/database/mysql/37/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/37/</guid><description>MySQL 自增序列是一组整数：1, 2, 3, …
一张数据表只能有一个自增主键
如果你想实现其它字段也实现自动增加，可以使用 MySQL 序列来实现
AUTO_INCREMENT MySQL 定义序列最简单的方法就是使用 AUTO_INCREMENT 来定义列
比如我们前面创建 tbl_language 表的语句中就把 id 设定为一个自增主键
1CREATE TABLE IF NOT EXISTS tbl_language( 2 id INT UNSIGNED AUTO_INCREMENT, 3 name VARCHAR(64) NOT NULL, 4 url VARCHAR(128) NOT NULL, 5 founded_at DATE, 6 PRIMARY KEY ( id ) 7)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 那么在插入数据时无需指定字段 id 的值，每插一条数据，它就会自增 1
1MariaDB [souyunku]&amp;gt; TRUNCATE tbl_language; 2Query OK, 0 rows affected (0.02 sec) 3MariaDB [souyunku]&amp;gt;` INSERT INTO tbl_language (name,url,founded_at) VALUES (&amp;#39;Python&amp;#39;,&amp;#39;https://ddkk.</description></item><item><title>三十三、CREATE TEMPORARY TABLE 创建临时表</title><link>https://www.shellio.cc/docs/database/mysql/33/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/33/</guid><description>MySQL 临时表用于一些临时数据时是非常有用的
临时表只在当前连接可见，当关闭连接时，MySQL 会自动删除表并释放所有空间
因为MySQL 临时表只在当前连接可见，如果使用 PHP 脚本来创建 MySQL 临时表，那每当 PHP 脚本执行完成后，该临时表也会自动销毁
如果连接到 MySQL 使用持久性连接，那么只有在关闭客户端程序时才会销毁临时表，当然也可以手动销毁
创建临时表 命令CREATE TEMPORARY TABLE tablename 命令用来创建临时表
创建临时表的语法和 CREATE TABLE tablename 是一样的，只是多了一个 TEMPORARY 关键字
例如下面的语句用于创建一个临时表 tbl_language_temp
1CREATE TEMPORARY TABLE IF NOT EXISTS tbl_language_tmp( 2 id INT UNSIGNED AUTO_INCREMENT, 3 name VARCHAR(64) NOT NULL, 4 url VARCHAR(128) NOT NULL, 5 founded_at DATE, 6 PRIMARY KEY ( id ) 7)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 为了演示如何创建临时表和临时表的特性，我们需要打开两个终端，连接登录到 MySQL 服务，然后切换到 souyunku 数据库，我们假设两个终端的名字为 a 和 b</description></item><item><title>三十三、SQLite – PHP</title><link>https://www.shellio.cc/docs/database/sqlite/33/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/33/</guid><description>SQLite – PHP 安装 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 自PHP 5.3.0 起默认启用 SQLite3 扩展。可以在编译时使用 –without-sqlite3 禁用 SQLite3 扩展。
Windows 用户必须启用 php_sqlite3.dll 才能使用该扩展。自 PHP 5.3.0 起，这个 DLL 被包含在 PHP 的 Windows 分发版中。
如需了解详细的安装指导，建议查看我们的 PHP 教程和它的官方网站。
PHP 接口 API 以下是重要的 PHP 程序，可以满足您在 PHP 程序中使用 SQLite 数据库的需求。如果您需要了解更多细节，请查看 PHP 官方文档。
序号 API &amp;amp; 描述 1 public void SQLite3::open ( filename, flags, encryption_key )
打开一个 SQLite 3 数据库。如果构建包括加密，那么它将尝试使用的密钥。
如果文件名 filename 赋值为 ‘:memory:’，那么 SQLite3::open() 将会在 RAM 中创建一个内存数据库，这只会在 session 的有效时间内持续。</description></item><item><title>三十四、MySQL DROP TABLE 删除临时表</title><link>https://www.shellio.cc/docs/database/mysql/34/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/34/</guid><description>在MySQSL CREATE TEMPORARY TABLE 创建临时表 中我们学习了 MySQL 临时表的特性和如何创建临时表
临时表只在当前连接可见，当关闭连接时，MySQL 会自动删除表并释放所有空间
但有时候我们可能需要手动删除临时表，比如持久性连接中，我们就要用完即删除
删除临时表和删除普通表的 SQL 语法时一模一样的，都是 DROP TABLE tablename
比如要删除临时表 tbl_language_tmp 则可以使用下面的语句
1DROP TABLE tbl_language_tmp; 演示 我们先使用下面的语句创建一个临时表 tbl_language_temp
1CREATE TEMPORARY TABLE IF NOT EXISTS tbl_language_tmp( 2 id INT UNSIGNED AUTO_INCREMENT, 3 name VARCHAR(64) NOT NULL, 4 url VARCHAR(128) NOT NULL, 5 founded_at DATE, 6 PRIMARY KEY ( id ) 7)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 运行结果如下
1MariaDB [souyunku]&amp;gt;` CREATE TEMPORARY TABLE IF NOT EXISTS tbl_language_tmp( 2-&amp;gt;` id INT UNSIGNED AUTO_INCREMENT, 3-&amp;gt;` name VARCHAR(64) NOT NULL, 4-&amp;gt;` url VARCHAR(128) NOT NULL, 5-&amp;gt;` founded_at DATE, 6-&amp;gt;` PRIMARY KEY ( id ) 7-&amp;gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 8Query OK, 0 rows affected (0.</description></item><item><title>三十四、SQLite – Perl</title><link>https://www.shellio.cc/docs/database/sqlite/34/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/34/</guid><description>SQLite – Perl 安装 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 SQLite3 可使用 Perl DBI 模块与 Perl 进行集成。Perl DBI 模块是 Perl 编程语言的数据库访问模块。它定义了一组提供标准数据库接口的方法、变量及规则。
下面显示了在 Linux/UNIX 机器上安装 DBI 模块的简单步骤：
1$ wget http://search.cpan.org/CPAN/authors/id/T/TI/TIMB/DBI-1.625.tar.gz 2$ tar xvfz DBI-1.625.tar.gz 3$ cd DBI-1.625 4$ perl Makefile.PL 5$ make 6$ make install 如果您需要为 DBI 安装 SQLite 驱动程序，那么可按照以下步骤进行安装：
1$ wget http://search.cpan.org/CPAN/authors/id/M/MS/MSERGEANT/DBD-SQLite-1.11.tar.gz 2$ tar xvfz DBD-SQLite-1.11.tar.gz 3$ cd DBD-SQLite-1.11 4$ perl Makefile.PL 5$ make 6$ make install DBI 接口 API 以下是重要的 DBI 程序，可以满足您在 Perl 程序中使用 SQLite 数据库的需求。如果您需要了解更多细节，请查看 Perl DBI 官方文档。</description></item><item><title>三十五、MySQL INSERT INTO SELECT 复制表</title><link>https://www.shellio.cc/docs/database/mysql/35/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/35/</guid><description>有时候我们可能需要将一张表完全的复制到另一张表，包括表的结构，索引，默认值等
MySQL 有没有这样的命令能够完成这样的任务呢？
有，也没有
说没有，是因为没有直接哪个命令能做这件事
说有，是因为可以用一序列之前学的命令完成这项任务
复制表 我们也不多介绍了，直接说要如何做吧
1、 使用SHOWCREATETABLE命令获取创建数据表(CREATETABLE)语句，该语句包含了原数据表的结构，索引等；
2、 复制1中的SQL语句，修改数据表名，并执行SQL语句，完整的克隆出一个数据表结构一模一样的表；
3、 如果需要复制表的内容，可以使用INSERTINTO...SELECT语句来实现；
演示 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 1、 运行下面的SQL语句创建测试数据；
1 DROP TABLE IF EXISTS tbl_language; 2 CREATE TABLE IF NOT EXISTS tbl_language( 3 id INT UNSIGNED AUTO_INCREMENT, 4 name VARCHAR(64) NOT NULL, 5 url VARCHAR(128) NOT NULL, 6 founded_at DATE, 7 PRIMARY KEY ( id ) 8 )ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 9 INSERT INTO tbl_language VALUES 10 (1,&amp;#39;Python&amp;#39;,&amp;#39;https://ddkk.com&amp;#39;,&amp;#39;1991-2-20&amp;#39;), 11 (2,&amp;#39;PHP&amp;#39;,&amp;#39;http://www.php.net&amp;#39;,&amp;#39;1994-1-1&amp;#39;), 12 (3,&amp;#39;Ruby&amp;#39;,&amp;#39;https://www.</description></item><item><title>三十五、SQLite – Python</title><link>https://www.shellio.cc/docs/database/sqlite/35/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/35/</guid><description>SQLite – Python 安装 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 SQLite3 可使用 sqlite3 模块与 Python 进行集成。sqlite3 模块是由 Gerhard Haring 编写的。它提供了一个与 PEP 249 描述的 DB-API 2.0 规范兼容的 SQL 接口。您不需要单独安装该模块，因为 Python 2.5.x 以上版本默认自带了该模块。
为了使用 sqlite3 模块，您首先必须创建一个表示数据库的连接对象，然后您可以有选择地创建光标对象，这将帮助您执行所有的 SQL 语句。
Python sqlite3 模块 API 以下是重要的 sqlite3 模块程序，可以满足您在 Python 程序中使用 SQLite 数据库的需求。如果您需要了解更多细节，请查看 Python sqlite3 模块的官方文档。
序号 API &amp;amp; 描述 1 sqlite3.connect(database [,timeout ,other optional arguments])
该 API 打开一个到 SQLite 数据库文件 database 的链接。您可以使用 “:memory:” 来在 RAM 中打开一个到 database 的数据库连接，而不是在磁盘上打开。如果数据库成功打开，则返回一个连接对象。
当一个数据库被多个连接访问，且其中一个修改了数据库，此时 SQLite 数据库被锁定，直到事务提交。timeout 参数表示连接等待锁定的持续时间，直到发生异常断开连接。timeout 参数默认是 5.</description></item><item><title>三十一、MySQL ALTER 命令</title><link>https://www.shellio.cc/docs/database/mysql/31/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/31/</guid><description>MySQL ALTER 命令可以用来修改数据表名或者修改数据表字段
测试数据 先运行下面的 SQL 语句准备测试数据
你可以有选择性的删除某些语句，我这是重新构建数据库和表
1DROP DATABASE IF EXISTS souyunku; 2CREATE DATABASE souyunku default character set utf8mb4 collate utf8mb4_unicode_ci; 3USE souyunku; 4DROP TABLE IF EXISTS tbl_language; 5CREATE TABLE IF NOT EXISTS tbl_language( 6 id INT UNSIGNED AUTO_INCREMENT, 7 name VARCHAR(64) NOT NULL, 8 url VARCHAR(128) NOT NULL, 9 founded_at DATE, 10 PRIMARY KEY ( id ) 11)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 12INSERT INTO tbl_language VALUES 13 (1,&amp;#39;Python&amp;#39;,&amp;#39;https://ddkk.com&amp;#39;,&amp;#39;1991-2-20&amp;#39;), 14 (2,&amp;#39;PHP&amp;#39;,&amp;#39;http://www.php.net&amp;#39;,&amp;#39;1994-1-1&amp;#39;), 15 (3,&amp;#39;Ruby&amp;#39;,&amp;#39;https://www.</description></item><item><title>三十一、SQLite – Java</title><link>https://www.shellio.cc/docs/database/sqlite/31/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/31/</guid><description>SQLite – Java 安装 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 在Java 程序中使用 SQLite 之前，我们需要确保机器上已经有 SQLite JDBC Driver 驱动程序和 Java。可以查看 Java 教程了解如何在计算机上安装 Java。现在，我们来看看如何在机器上安装 SQLite JDBC 驱动程序。
从 sqlite-jdbc 库下载 sqlite-jdbc-(VERSION).jar 的最新版本。 在您的 class 路径中添加下载的 jar 文件 sqlite-jdbc-(VERSION).jar，或者在 -classpath 选项中使用它，这将在后面的实例中进行讲解。 在学习下面部分的知识之前，您必须对 Java JDBC 概念有初步了解。如果您还未了解相关知识，那么建议您可以先花半个小时学习下 JDBC 教程相关知识，这将有助于您学习接下来讲解的知识。
连接数据库 下面的Java 程序显示了如何连接到一个现有的数据库。如果数据库不存在，那么它就会被创建，最后将返回一个数据库对象。
1import java.sql.*; 2public class SQLiteJDBC 3 public static void main( String args[] ) 4 { 5 Connection c = null; 6 try { 7 Class.forName(&amp;#34;org.sqlite.JDBC&amp;#34;); 8 c = DriverManager.</description></item><item><title>十、MySQL 删除数据库</title><link>https://www.shellio.cc/docs/database/mysql/10/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/10/</guid><description>MySQL 删除数据库的方式有两种
1、 使用mysqladmindrop命令删除数据库；
2、 使用DROPDATABASE语句删除数据库；
在删除数据库过程中，务必要十分谨慎，因为在执行删除命令后，所有数据将会消失，而且不可撤销
如果使用普通用户连接到 MySQL 服务器，可能需要特定的权限来创建或者删除 MySQL 数据库
我们使用 root 用户登录，因为 root 用户拥有最高权限
使用 mysqladmin drop 命令删除数据库 可以使用 mysqladmin drop 命令来删除数据库
mysqladmin 命令语法格式如下 1mysqladmin [OPTIONS] command [command-option] command ... 通过执行 mysqladmin --help，可以得到 mysqladmin 的版本所支持的一个选项列表
命令(command) 描述 create databasename 创建一个新数据库 drop databasename 删除一个数据库及其所有表 extended-status 给出服务器的一个扩展状态消息 flush-hosts 洗掉所有缓存的主机 flush-logs 洗掉所有日志 flush-tables 洗掉所有表 flush-privileges 再次装载授权表(同 reload ) kill id,id,… 杀死 mysql 线程 password 新口令，将老口令改为新口令 ping 检查 mysqld 是否活着 processlist 显示服务其中活跃线程列表 reload 重载授权表 refresh 洗掉所有表并关闭和打开日志文件 shutdown 关掉服务器 status 给出服务器的简短状态消息 variables 打印出可用变量 version 得到服务器的版本信息 下面的mysqladmin drop 可以删除我们前一章节中创建的 souyunku 数据库</description></item><item><title>十、SQLite Distinct 关键字</title><link>https://www.shellio.cc/docs/database/sqlite/10/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/10/</guid><description>SQLite Distinct 关键字 SQLite 的 DISTINCT 关键字与 SELECT 语句一起使用，来消除所有重复的记录，并只获取唯一一次记录。
有可能出现一种情况，在一个表中有多个重复的记录。当提取这样的记录时，DISTINCT 关键字就显得特别有意义，它只获取唯一一次记录，而不是获取重复记录。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 用于消除重复记录的 DISTINCT 关键字的基本语法如下：
1SELECT DISTINCT column1, column2,.....columnN 2FROM table_name 3WHERE [condition] 实例 假设COMPANY 表有以下记录：
1ID NAME AGE ADDRESS SALARY 2---------- ---------- ---------- ---------- ---------- 31 Paul 32 California 20000.0 42 Allen 25 Texas 15000.0 53 Teddy 23 Norway 20000.0 64 Mark 25 Rich-Mond 65000.0 75 David 27 Texas 85000.0 86 Kim 22 South-Hall 45000.0 97 James 24 Houston 10000.</description></item><item><title>十八、MySQL SELECT FROM 查询数据</title><link>https://www.shellio.cc/docs/database/mysql/18/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/18/</guid><description>MySQL 使用 SELECT FROM SQL 语句来查询表中的数据
SELECT FROM SQL 语句语法 使用SELECT FROM SQL 语句查询表中数据的语法格式如下
1SELECT column_name,column_name 2FROM table_name 3[WHERE Clause] 4[LIMIT N,M] 1、 查询语句中可以使用一个或者多个表，表之间使用逗号(,)分隔，并使用WHERE语句来设定查询条件；
1 SELECT a.id,b.name FROM a,b WHERE a.id=b.id; 2、 SELECT命令可以读取一条或者多条记录；
3、 可以使用星号（*）来代替column_name，但这会返回表的所有字段数据；
1 SELECT * FROM tbl_language; 4、 可以使用WHERE子句来有条件的查询数据；
1 SELECT * FROM tbl_language WHERE name = &amp;#39;Python&amp;#39;; 5、 可以使用LIMIT子句来设定返回的记录数；
1 SELECT * FROM tbl_language LIMIT 1; 6、 可以通过LIMIT字句指定开始查询的数据偏移量；
1 SELECT * FROM tbl_language LIMIT 1,2; 偏移量从 0 开始计算， 0 表示第一条， 1 表示第二条</description></item><item><title>十八、SQLite 索引</title><link>https://www.shellio.cc/docs/database/sqlite/18/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/18/</guid><description>SQLite 索引（Index） 索引（Index）是一种特殊的查找表，数据库搜索引擎用来加快数据检索。简单地说，索引是一个指向表中数据的指针。一个数据库中的索引与一本书后边的索引是非常相似的。
例如，如果您想在一本讨论某个话题的书中引用所有页面，您首先需要指向索引，索引按字母顺序列出了所有主题，然后指向一个或多个特定的页码。
索引有助于加快 SELECT 查询和 WHERE 子句，但它会减慢使用 UPDATE 和 INSERT 语句时的数据输入。索引可以创建或删除，但不会影响数据。
使用CREATE INDEX 语句创建索引，它允许命名索引，指定表及要索引的一列或多列，并指示索引是升序排列还是降序排列。
索引也可以是唯一的，与 UNIQUE 约束类似，在列上或列组合上防止重复条目。
CREATE INDEX 命令 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 CREATE INDEX 的基本语法如下：
1CREATE INDEX index_name ON table_name; 单列索引 单列索引是一个只基于表的一个列上创建的索引。基本语法如下：
1CREATE INDEX index_name 2ON table_name (column_name); 唯一索引 使用唯一索引不仅是为了性能，同时也为了数据的完整性。唯一索引不允许任何重复的值插入到表中。基本语法如下：
1CREATE INDEX index_name 2on table_name (column_name); 组合索引 组合索引是基于一个表的两个或多个列上创建的索引。基本语法如下：
1CREATE INDEX index_name 2on table_name (column1, column2); 是否要创建一个单列索引还是组合索引，要考虑到您在作为查询过滤条件的 WHERE 子句中使用非常频繁的列。
如果值使用到一个列，则选择使用单列索引。如果在作为过滤的 WHERE 子句中有两个或多个列经常使用，则选择使用组合索引。
隐式索引 隐式索引是在创建对象时，由数据库服务器自动创建的索引。索引自动创建为主键约束和唯一约束。
实例 下面是一个例子，我们将在 COMPANY 表的 salary 列上创建一个索引：</description></item><item><title>十二、MySQL 数据类型</title><link>https://www.shellio.cc/docs/database/mysql/12/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/12/</guid><description>MySQL 中众多的数据类型可供选择，大致可以分为三类：数值、日期/时间和字符串(字符)类型。
MySQL 中定义恰当的数据字段的类型对 MySQL 数据库的优化是非常重要的
数值类型 MySQL 支持所有标准 SQL 数值数据类型
这些类型包括
1、 严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)；
2、 近似数值数据类型(FLOAT、REAL和DOUBLEPRECISION)；
关键字INT 是 INTEGER 的同义词，关键字 DEC 是 DECIMAL 的同义词
BIT 数据类型保存位字段值，并且支持 MyISAM 、MEMORY 、InnoDB 和 BDB 等数据库引擎
作为SQL 标准 的扩展，MySQL 也支持整数类型 TINYINT 、 MEDIUMINT 和 BIGINT
下表列出了每种整数类型的存储长度和数值范围
类型 大小 范围（有符号） 范围（无符号） 用途 TINYINT 1 字节 (-128，127) (0，255) 小整数值 SMALLINT 2 字节 (-32 768，32 767) (0，65 535) 大整数值 MEDIUMINT 3 字节 (-8 388 608，8 388 607) (0，16 777 215) 大整数值 INT</description></item><item><title>十二、SQLite 约束</title><link>https://www.shellio.cc/docs/database/sqlite/12/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/12/</guid><description>SQLite 约束 约束是在表的数据列上强制执行的规则。这些是用来限制可以插入到表中的数据类型。这确保了数据库中数据的准确性和可靠性。
约束可以是列级或表级。列级约束仅适用于列，表级约束被应用到整个表。
以下是在 SQLite 中常用的约束。
NOT NULL 约束：确保某列不能有 NULL 值。 DEFAULT 约束：当某列没有指定值时，为该列提供默认值。 UNIQUE 约束：确保某列中的所有值是不同的。 PRIMARY Key 约束：唯一标识数据库表中的各行/记录。 CHECK 约束：CHECK 约束确保某列中的所有值满足一定条件。 NOT NULL 约束 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 默认情况下，列可以保存 NULL 值。如果您不想某列有 NULL 值，那么需要在该列上定义此约束，指定在该列上不允许 NULL 值。
NULL 与没有数据是不一样的，它代表着未知的数据。
实例 例如，下面的 SQLite 语句创建一个新的表 COMPANY，并增加了五列，其中 ID、NAME 和 AGE 三列指定不接受 NULL 值：
1CREATE TABLE COMPANY( 2 ID INT PRIMARY KEY NOT NULL, 3 NAME TEXT NOT NULL, 4 AGE INT NOT NULL, 5 ADDRESS CHAR(50), 6 SALARY REAL 7); DEFAULT 约束 DEFAULT 约束在 INSERT INTO 语句没有提供一个特定的值时，为列提供一个默认值。</description></item><item><title>十九、MySQL WHERE 子句有条件的查询数据</title><link>https://www.shellio.cc/docs/database/mysql/19/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/19/</guid><description>可以在SELECT FROM 语句中添加 WHERE 字句有条件地从表中选取数据
WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据
如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据
WHERE 字句语法 SQLSELECT 语句使用 WHERE 子句从数据表中读取数据的通用语法如下
1SELECT field1, field2,...fieldN FROM table1, table2... 2[WHERE condition1 [AND [OR]] condition2..... SELECT 语句中可以使用一个或者多个表，表之间使用逗号(,)分割，并使用 WHERE 语句来设定查询条件 可以在 WHERE 子句中指定任何条件 可以使用 AND 或者 OR 指定一个或多个条件 WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令 WHERE 字句支持的操作符 下表列出了 WHERE 字句支持的操作符
我们假定 A 为 10, B 为 20
操作符 描述 范例 = 等号，检测两个值是否相等，如果相等返回 true (A=B) 返回 false &amp;lt;&amp;gt;</description></item><item><title>十九、SQLite Indexed By</title><link>https://www.shellio.cc/docs/database/sqlite/19/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/19/</guid><description>SQLite Indexed By “INDEXED BY index-name” 子句规定必须需要命名的索引来查找前面表中值。
如果索引名 index-name 不存在或不能用于查询，然后 SQLite 语句的准备失败。
“NOT INDEXED” 子句规定当访问前面的表（包括由 UNIQUE 和 PRIMARY KEY 约束创建的隐式索引）时，没有使用索引。
然而，即使指定了 “NOT INDEXED”，INTEGER PRIMARY KEY 仍然可以被用于查找条目。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 下面是INDEXED BY 子句的语法，它可以与 DELETE、UPDATE 或 SELECT 语句一起使用：
1SELECT|DELETE|UPDATE column1, column2... 2INDEXED BY (index_name) 3table_name 4WHERE (CONDITION); 实例 假设有表 COMPANY，我们将创建一个索引，并用它进行 INDEXED BY 操作。
1sqlite&amp;gt; CREATE INDEX salary_index ON COMPANY(salary); 2sqlite&amp;gt; 现在使用 INDEXED BY 子句从表 COMPANY 中选择数据，如下所示：
1sqlite&amp;gt; SELECT * FROM COMPANY INDEXED BY salary_index WHERE salary &amp;gt; 5000;</description></item><item><title>十六、MySQL 插入数据</title><link>https://www.shellio.cc/docs/database/mysql/16/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/16/</guid><description>MySQL 中使用 INSERT INTO SQL 语句来往某个表中插入数据
INSERT INTO SQL 语句语法 使用INSERT INTO SQL 语句往表中插入数据的语法格式如下
1INSERT INTO table_name ( field1, field2,...fieldN ) 2 VALUES 3 ( value1, value2,...valueN ); 如果数据是字符型，必须使用单引号或者双引号，如 &amp;quot;value&amp;quot;
例如
1INSERT INTO tbl_language (name,url,founded_at) VALUES (&amp;#39;Python&amp;#39;,&amp;#39;https://ddkk.com&amp;#39;,&amp;#39;1991-2-20&amp;#39;); 如果数据包含了全部字段，且按照字段的顺序，那么可以用下面的简写语法
1INSERT INTO table_name VALUES ( value1, value2,...valueN ); 例如
1INSERT INTO tbl_language VALUES (1,&amp;#39;Python&amp;#39;,&amp;#39;https://ddkk.com&amp;#39;,&amp;#39;1991-2-20&amp;#39;); 如果是多条语句，可以用 逗号(,) 分隔每条数据
1INSERT INTO tbl_language VALUES 2 (1,&amp;#39;Python&amp;#39;,&amp;#39;https://ddkk.com&amp;#39;,&amp;#39;1991-2-20&amp;#39;), 3 (2,&amp;#39;PHP&amp;#39;,&amp;#39;http://www.php.net&amp;#39;,&amp;#39;1994-1-1&amp;#39;), 4 (3,&amp;#39;Ruby&amp;#39;,&amp;#39;https://www.ruby-lang.org/&amp;#39;,&amp;#39;1996-12-25&amp;#39;) 通过命令提示窗口插入数据 可以在mysql&amp;gt; 命令提示窗口中执行 INSERT INTO SQL 语句向某个表中插入数据</description></item><item><title>十六、SQLite 别名</title><link>https://www.shellio.cc/docs/database/sqlite/16/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/16/</guid><description>SQLite 别名 您可以暂时把表或列重命名为另一个名字，这被称为别名。使用表别名是指在一个特定的 SQLite 语句中重命名表。重命名是临时的改变，在数据库中实际的表的名称不会改变。
列别名用来为某个特定的 SQLite 语句重命名表中的列。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 表 别名的基本语法如下：
1SELECT column1, column2.... 2FROM table_name AS alias_name 3WHERE [condition]; 列 别名的基本语法如下：
1SELECT column_name AS alias_name 2FROM table_name 3WHERE [condition]; 实例 假设有下面两个表，（1）COMPANY 表如下所示：
1sqlite&amp;gt; select * from COMPANY; 2ID NAME AGE ADDRESS SALARY 3---------- -------------------- ---------- ---------- ---------- 41 Paul 32 California 20000.0 52 Allen 25 Texas 15000.0 63 Teddy 23 Norway 20000.0 74 Mark 25 Rich-Mond 65000.0 85 David 27 Texas 85000.</description></item><item><title>十七、MySQL 获取插入数据的 ID</title><link>https://www.shellio.cc/docs/database/mysql/17/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/17/</guid><description>在MySQL 插入数据 我们已经学会了如何往一张表中插入数据，但要如何获取插入数据的 id 值呢 ?
不要疑惑，不然会长皱纹，MySQL 提供了 LAST_INSERT_ID() 函数用于获取上一次插入数据的 ID
我们可以使用下面的 SQL 命令获取上一次插入数据的 ID;
1SELECT LAST_INSERT_ID(); 准备范例数据 可以在mysql&amp;gt; 命令行中运行以下语句填充范例数据
1DROP TABLE IF EXISTS tbl_language; 2CREATE TABLE IF NOT EXISTS tbl_language( 3 id INT UNSIGNED AUTO_INCREMENT, 4 name VARCHAR(64) NOT NULL, 5 url VARCHAR(128) NOT NULL, 6 founded_at DATE, 7 PRIMARY KEY ( id ) 8)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; INSERT INTO tbl_language (name,url,founded_at) VALUES (‘Ruby’,’https://www.ruby-lang.org/’,’1996-12-25′);
通过命令提示窗口获取插入数据的 ID 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 可以在mysql&amp;gt; 命令提示窗口中执行 INSERT INTO SQL 语句向某个表中插入数据</description></item><item><title>十七、SQLite 触发器</title><link>https://www.shellio.cc/docs/database/sqlite/17/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/17/</guid><description>SQLite 触发器（Trigger） SQLite 的触发器是数据库的回调函数，它会在指定的数据库事件发生时自动执行/调用。以下是关于SQLite的触发器的要点：SQLite **触发器（Trigger）**是数据库的回调函数，它会在指定的数据库事件发生时自动执行/调用。以下是关于 SQLite 的触发器（Trigger）的要点：
SQLite 的触发器（Trigger）可以指定在特定的数据库表发生 DELETE、INSERT 或 UPDATE 时触发，或在一个或多个指定表的列发生更新时触发。 SQLite 只支持 FOR EACH ROW 触发器（Trigger），没有 FOR EACH STATEMENT 触发器（Trigger）。因此，明确指定 FOR EACH ROW 是可选的。 WHEN 子句和触发器（Trigger）动作可能访问使用表单 NEW.column-name 和 OLD.column-name 的引用插入、删除或更新的行元素，其中 column-name 是从与触发器关联的表的列的名称。 如果提供 WHEN 子句，则只针对 WHEN 子句为真的指定行执行 SQL 语句。如果没有提供 WHEN 子句，则针对所有行执行 SQL 语句。 BEFORE 或 AFTER 关键字决定何时执行触发器动作，决定是在关联行的插入、修改或删除之前或者之后执行触发器动作。 当触发器相关联的表删除时，自动删除触发器（Trigger）。 要修改的表必须存在于同一数据库中，作为触发器被附加的表或视图，且必须只使用 tablename，而不是 database.tablename。 一个特殊的 SQL 函数 RAISE() 可用于触发器程序内抛出异常。 语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 创建 触发器（Trigger） 的基本语法如下：
1CREATE TRIGGER trigger_name [BEFORE|AFTER] event_name 2ON table_name 3BEGIN 4 -- Trigger logic goes here.</description></item><item><title>十三、MySQL 列出数据表</title><link>https://www.shellio.cc/docs/database/mysql/13/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/13/</guid><description>如果要查看当前选择的数据库有哪些表，可以使用 SHOW TABLES; 命令
在 mysql&amp;gt;` 终端中查看数据库列表 打开一个终端(命令行)，输入 mysql -u root -p 进入 mysql&amp;gt; 命令行
然后输入 USE souyunku; 选择 souyunku 数据库
最后输入 SHOW TABLES; 命令就可以查看当前选择的数据库有哪些表
1$ mysql -uroot -p 2Enter password: 3Welcome to the MariaDB monitor. Commands end with ; or \g. 4Your MariaDB connection id is 117 5Server version: 10.2.13-MariaDB Homebrew 6Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. 7Type &amp;#39;help;&amp;#39; or &amp;#39;\h&amp;#39; for help. Type &amp;#39;\c&amp;#39; to clear the current input statement.</description></item><item><title>十三、SQLite Joins</title><link>https://www.shellio.cc/docs/database/sqlite/13/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/13/</guid><description>SQLite Joins SQLite 的 Joins 子句用于结合两个或多个数据库中表的记录。JOIN 是一种通过共同值来结合两个表中字段的手段。
SQL定义了三种主要类型的连接：
交叉连接 – CROSS JOIN 内连接 – INNER JOIN 外连接 – OUTER JOIN 在我们继续之前，让我们假设有两个表 COMPANY 和 DEPARTMENT。我们已经看到了用来填充 COMPANY 表的 INSERT 语句。现在让我们假设 COMPANY 表的记录列表如下：
1ID NAME AGE ADDRESS SALARY 2---------- ---------- ---------- ---------- ---------- 31 Paul 32 California 20000.0 42 Allen 25 Texas 15000.0 53 Teddy 23 Norway 20000.0 64 Mark 25 Rich-Mond 65000.0 75 David 27 Texas 85000.0 86 Kim 22 South-Hall 45000.0 97 James 24 Houston 10000.</description></item><item><title>十四、MySQL 创建数据表</title><link>https://www.shellio.cc/docs/database/mysql/14/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/14/</guid><description>MySQL 可以使用 CREATE TABLE SQL 语句创建表
创建MySQL 数据表需要 表名 、表字段名 、定义每个表字段
CREATE TABLE 语句语法 下面的SQL 语句为创建 MySQL 数据表的通用语法
1CREATE TABLE table_name (column_name column_type); 例如下面的 SQL 语句将在 souyunku 数据库中创建 tbl_language 表
1CREATE TABLE IF NOT EXISTS tbl_language( 2 id INT UNSIGNED AUTO_INCREMENT, 3 name VARCHAR(64) NOT NULL, 4 url VARCHAR(128) NOT NULL, 5 founded_at DATE, 6 PRIMARY KEY ( id ) 7)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 如果不想字段为 NULL 可以设置字段的属性为 NOT NULL 往表中插入数据时，如果输入该字段的数据为 NULL ，就会报错</description></item><item><title>十四、SQLite Unions 子句</title><link>https://www.shellio.cc/docs/database/sqlite/14/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/14/</guid><description>SQLite Unions 子句 SQLite的 UNION 子句/运算符用于合并两个或多个 SELECT 语句的结果，不返回任何重复的行。
为了使用 UNION，每个 SELECT 被选择的列数必须是相同的，相同数目的列表达式，相同的数据类型，并确保它们有相同的顺序，但它们不必具有相同的长度。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 UNION 的基本语法如下：
1SELECT column1 [, column2 ] 2FROM table1 [, table2 ] 3[WHERE condition] 4UNION 5SELECT column1 [, column2 ] 6FROM table1 [, table2 ] 7[WHERE condition] 这里给定的条件根据需要可以是任何表达式。
实例 假设有下面两个表，（1）COMPANY 表如下所示：
1sqlite&amp;gt; select * from COMPANY; 2ID NAME AGE ADDRESS SALARY 3---------- -------------------- ---------- ---------- ---------- 41 Paul 32 California 20000.0 52 Allen 25 Texas 15000.</description></item><item><title>十五、MySQL 删除表</title><link>https://www.shellio.cc/docs/database/mysql/15/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/15/</guid><description>MySQL 使用 DROP TABLE SQL 语句删除数据库中的一个表
要小心，因为执行删除命令后表中所有的数据都会消失，而且无法撤销
DROP TABLE SQL 语句语法 使用DROP TABLE SQL 语句删除数据表的通用语法如下
1DROP TABLE table_name ; 在命令提示窗口中删除数据表 可以在mysql&amp;gt; 命令提示窗口中执行 DROP TABLE SQL 语句删除数据表
下面的代码演示了如何删除 souyunku 中的数据表 tbl_language
1MariaDB [souyunku]&amp;gt; use souyunku; 2Database changed 3MariaDB [souyunku]&amp;gt; SHOW TABLES; 4+----------------+ 5| Tables_in_souyunku | 6+----------------+ 7| customer | 8| sites | 9| tbl_language | 10+----------------+ 113 rows in set (0.00 sec) 12MariaDB [souyunku]&amp;gt; DROP TABLE tbl_language; 13Query OK, 0 rows affected (0.</description></item><item><title>十五、SQLite NULL 值</title><link>https://www.shellio.cc/docs/database/sqlite/15/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/15/</guid><description>SQLite NULL 值 SQLite 的 NULL 是用来表示一个缺失值的项。表中的一个 NULL 值是在字段中显示为空白的一个值。
带有NULL 值的字段是一个不带有值的字段。NULL 值与零值或包含空格的字段是不同的，理解这点是非常重要的。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 创建表时使用 NULL 的基本语法如下：
1SQLite&amp;gt; CREATE TABLE COMPANY( 2 ID INT PRIMARY KEY NOT NULL, 3 NAME TEXT NOT NULL, 4 AGE INT NOT NULL, 5 ADDRESS CHAR(50), 6 SALARY REAL 7); 在这里，NOT NULL 表示列总是接受给定数据类型的显式值。这里有两个列我们没有使用 NOT NULL，这意味着这两个列能为 NULL。
带有NULL 值的字段在记录创建的时候可以保留为空。
实例 NULL 值在选择数据时会引起问题，因为当把一个未知的值与另一个值进行比较时，结果总是未知的，且不会包含在最后的结果中。假设有下面的表，COMPANY 的记录如下所示：
1ID NAME AGE ADDRESS SALARY 2---------- ---------- ---------- ---------- ---------- 31 Paul 32 California 20000.</description></item><item><title>十一、MySQL 选择数据库</title><link>https://www.shellio.cc/docs/database/mysql/11/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/11/</guid><description>一般MySQL 数据库服务器上都会有多个可以操作的数据库，我们可能要在数据库之间来回切换
MySQL 允许我们保持连接的时间内切换数据库
mysql client 命令提示窗口中切换 MySQL 数据库 连接到MySQL 数据服务器后，可以在 mysql&amp;gt; 提示窗口中切换或选择特定的数据库。
使用USE SQL命令来选择指定的数据库
USE 命令语法格式如下 1USE **database**; 下面的SQL 语句切换到了 souyunku 数据库
1MariaDB [(none)]&amp;gt; select database(); 2+------------+ 3| database() | 4+------------+ 5| NULL | 6+------------+ 71 row in set (0.00 sec) 8MariaDB [(none)]&amp;gt; USE souyunku; 9Database changed 10MariaDB [souyunku]&amp;gt; select database(); 11+------------+ 12| database() | 13+------------+ 14| souyunku | 15+------------+ 161 row in set (0.00 sec) 执行USE souyunku; 语句后命令后，我们就成功切换到了 souyunku 数据库，在后续的操作中都会在 souyunku 数据库中执行</description></item><item><title>十一、SQLite PRAGMA</title><link>https://www.shellio.cc/docs/database/sqlite/11/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/11/</guid><description>SQLite PRAGMA SQLite 的 PRAGMA 命令是一个特殊的命令，可以用在 SQLite 环境内控制各种环境变量和状态标志。一个 PRAGMA 值可以被读取，也可以根据需求进行设置。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 要查询当前的 PRAGMA 值，只需要提供该 pragma 的名字：
1PRAGMA pragma_name; 要为PRAGMA 设置一个新的值，语法如下：
1PRAGMA pragma_name = value; 设置模式，可以是名称或等值的整数，但返回的值将始终是一个整数。
auto_vacuum Pragma auto_vacuum Pragma 获取或设置 auto-vacuum 模式。语法如下：
1PRAGMA [database.]auto_vacuum; 2PRAGMA [database.]auto_vacuum = mode; 其中，mode 可以是以下任何一种：
Pragma 值 描述 0 或 NONE 禁用 Auto-vacuum。这是默认模式，意味着数据库文件尺寸大小不会缩小，除非手动使用 VACUUM 命令。 1 或 FULL 启用 Auto-vacuum，是全自动的。在该模式下，允许数据库文件随着数据从数据库移除而缩小。 2 或 INCREMENTAL 启用 Auto-vacuum，但是必须手动激活。在该模式下，引用数据被维持，免费页面只放在免费列表中。这些页面可在任何时候使用 incremental_vacuum pragma 进行覆盖。 cache_size Pragma cache_size Pragma 可获取或暂时设置在内存中页面缓存的最大尺寸。语法如下：</description></item><item><title>四、MySQL 管理</title><link>https://www.shellio.cc/docs/database/mysql/4/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/4/</guid><description>通过以下命令来检查 MySQL 服务器是否启动
1ps -ef | grep mysql 例如在我的苹果电脑上运行如下
1[root@ddkk.com ~]# ps -ef | grep mysql 2mysql 1520 1 0 18:21 ? 00:00:00 /bin/sh /usr/bin/mysqld_safe --basedir=/usr 3mysql 1682 1520 0 18:21 ? 00:00:00 /usr/libexec/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/lib64/mysql/plugin --log-error=/var/log/mariadb/mariadb.log --pid-file=/var/run/mariadb/mariadb.pid --socket=/var/lib/mysql/mysql.sock 4root 1774 1744 0 18:29 pts/0 00:00:00 grep --color=auto mysql 如果MySql 已经启动，上面的命令会输出 mysql 进程列表 mysqld_safe 和 mysqld
启动 MySQL 命令 如果MySQL 未启动，使用以下命令来启动 MySQL 服务器
1[root@ddkk.com ~]# mysqld_safe &amp;amp; 关闭 MySQL 命令 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 如果想关闭目前运行的 MySQL 服务器, 可以执行以下命令</description></item><item><title>四、SQLite Like 子句</title><link>https://www.shellio.cc/docs/database/sqlite/4/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/4/</guid><description>SQLite Like 子句 SQLite 的 LIKE 运算符是用来匹配通配符指定模式的文本值。如果搜索表达式与模式表达式匹配，LIKE 运算符将返回真（true），也就是 1。这里有两个通配符与 LIKE 运算符一起使用：
百分号 （%） 下划线 （_） 百分号（%）代表零个、一个或多个数字或字符。下划线（_）代表一个单一的数字或字符。这些符号可以被组合使用。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 %和_ 的基本语法如下：
1SELECT FROM table_name 2WHERE column LIKE &amp;#39;XXXX%&amp;#39; 3or 4SELECT FROM table_name 5WHERE column LIKE &amp;#39;%XXXX%&amp;#39; 6or 7SELECT FROM table_name 8WHERE column LIKE &amp;#39;XXXX_&amp;#39; 9or 10SELECT FROM table_name 11WHERE column LIKE &amp;#39;_XXXX&amp;#39; 12or 13SELECT FROM table_name 14WHERE column LIKE &amp;#39;_XXXX_&amp;#39; 您可以使用 AND 或 OR 运算符来结合 N 个数量的条件。在这里，XXXX 可以是任何数字或字符串值。
实例 下面一些实例演示了 带有 ‘%’ 和 ‘_’ 运算符的 LIKE 子句不同的地方：</description></item><item><title>四十、MySQL 导出数据</title><link>https://www.shellio.cc/docs/database/mysql/40/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/40/</guid><description>MySQL 导出数据有两种方法
1、 使用SELECT...INTOOUTFILE语句来简单的导出数据到某个文件中；
2、 使用mysqldump；
准备测试数据 可以在mysql&amp;gt; 命令行中运行以下语句填充范例数据
1DROP TABLE IF EXISTS tbl_language; 2DROP TABLE IF EXISTS tbl_rank; 3CREATE TABLE IF NOT EXISTS tbl_language( 4 id INT UNSIGNED AUTO_INCREMENT, 5 name VARCHAR(64) NOT NULL, 6 url VARCHAR(128) NOT NULL, 7 founded_at DATE, 8 PRIMARY KEY ( id ) 9)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 10CREATE TABLE IF NOT EXISTS tbl_rank( 11 id INT UNSIGNED AUTO_INCREMENT, 12 name VARCHAR(64) NOT NULL, 13 month VARCHAR(7) NOT NULL, 14 rank TINYINT NOT NULL, 15 rate VARCHAR(32) NOT NULL, 16 PRIMARY KEY ( id ) 17)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 18INSERT INTO tbl_language VALUES 19 (1,&amp;#39;Python&amp;#39;,&amp;#39;https://ddkk.</description></item><item><title>四十一、MySQL 导入数据</title><link>https://www.shellio.cc/docs/database/mysql/41/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/41/</guid><description>MySQL 数据库系统有三种方式可以导入 MySQL 导出的数据
1、 使用LOADDATA；
2、 使用mysql命令；
3、 使用·mysqlimport·命令；
使用 LOAD DATA 导入数据 MySQL 中提供了 LOAD DATA INFILE 语句插入数据
下面的SQL 语句从当前目录中读取文件 tbl_language.sql ，将该文件中的数据插入到当前数据库的 tbl_language 表中
1LOAD DATA LOCAL INFILE &amp;#39;tbl_language.sql&amp;#39; INTO TABLE tbl_language; 如果指定 LOCAL 关键词，则表明从客户主机上按路径读取文件
如果没有指定，则文件在服务器上按路径读取文件
导入 csv 格式文件 如果需要导入 csv 格式文件，可以明确地在 LOAD DATA语句中指出列值的分隔符 FIELDS 和行尾标记 LINES
两个命令的 FIELDS 和 LINES 子句的语法是一样的，都是可选的
但是如果两个同时被指定，FIELDS 子句必须出现在 LINES 子句之前
如果用户指定一个 FIELDS 子句，它的子句 （TERMINATED BY、[OPTIONALLY] ENCLOSED BY 和 ESCAPED BY) 也是可选的，不过，用户必须至少指定它们中的一个
1LOAD DATA LOCAL INFILE &amp;#39;tbl_language.</description></item><item><title>五、MySQL 日常管理</title><link>https://www.shellio.cc/docs/database/mysql/5/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/5/</guid><description>下面列出了日常管理 MySQL 数据库过程中常用的命令
USE 命令 USE 命令用于选择要操作的 MySQL 数据库
使用该命令后所有 MySQL 命令都只针对该数据库
USE 命令语法格式如下 1USE **数据库名** 示例 1MariaDB [(none)]&amp;gt; USE test; 2Database changed 3MariaDB [test]&amp;gt; 可以看到，使用了 USE 命令后, mysql 提示符中的 [(none)] 会变成 [test]
SHOW DATABASE 命令 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 SHOW DATABASES 命令用于列出 MySQL 数据库管理系统的数据库
1MariaDB [test]&amp;gt; SHOW DATABASES; 2+--------------------+ 3| Database | 4+--------------------+ 5| information_schema | 6| mysql | 7| performance_schema | 8| test | 9+--------------------+ 104 rows in set (0.00 sec) SHOW TABLES 命令 SHOW TABLES 命令用于列出指定数据库中的所有表 使用该命令前需要使用 USE 命令来选择要操作的数据库</description></item><item><title>五、SQLite Glob 子句</title><link>https://www.shellio.cc/docs/database/sqlite/5/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/5/</guid><description>SQLite Glob 子句 SQLite 的 GLOB 运算符是用来匹配通配符指定模式的文本值。如果搜索表达式与模式表达式匹配，GLOB 运算符将返回真（true），也就是 1。与 LIKE 运算符不同的是，GLOB 是大小写敏感的，对于下面的通配符，它遵循 UNIX 的语法。
星号 （*） 问号 （?） 星号（*）代表零个、一个或多个数字或字符。问号（?）代表一个单一的数字或字符。这些符号可以被组合使用。
语法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 * 和 ? 的基本语法如下：
1SELECT FROM table_name 2WHERE column GLOB &amp;#39;XXXX*&amp;#39; 3or 4SELECT FROM table_name 5WHERE column GLOB &amp;#39;*XXXX*&amp;#39; 6or 7SELECT FROM table_name 8WHERE column GLOB &amp;#39;XXXX?&amp;#39; 9or 10SELECT FROM table_name 11WHERE column GLOB &amp;#39;?XXXX&amp;#39; 12or 13SELECT FROM table_name 14WHERE column GLOB &amp;#39;?XXXX?&amp;#39; 15or 16SELECT FROM table_name 17WHERE column GLOB &amp;#39;?</description></item><item><title>一、MySQLMariaDB 基础教程</title><link>https://www.shellio.cc/docs/database/mysql/1/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/mysql/1/</guid><description>MySQL/MariaDB 是当前最流行的可免费使用的关系型数据库管理系统。
本教程中，我们会学习到 MySQL 的基本知识，以及 MySQL 和 PHP 的结合使用
学完本课程，我们会达到 MySQL 入门级，能够在日常的开发中轻松使用 MySQL 数据库
什么是数据库？ 数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，
每个数据库都有一个或多个不同的 API 用于创建，访问，管理，搜索和复制所保存的数据
因此，现在我们使用关系型数据库管理系统（RDBMS）来存储和管理的大数据量
RDBMS RDBMS 即关系数据库管理系统 ( Relational Database Management System )
所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据
RDBMS 的特点 1、 数据以表格的形式出现；
2、 每行为各种记录名称；
3、 每列为记录名称所对应的数据域；
4、 许多的行和列组成一张表单；
5、 若干的表单组成database；
RDBMS 术语 在我们开始学习 MySQL 数据库前，我们先了解下 RDBMS 中的几个关键术语
1、 数据库；
1数据库是一些关联表的集合 2、 数据表；
1表是数据的矩阵 在一个数据库中的表看起来像一个简单的电子表格 3、 列；
1一列(数据元素) 包含了相同的数据, 例如邮政编码的数据 4、 行；
1一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据 5、 冗余；
1存储两倍数据，冗余降低了性能，但提高了数据的安全性 6、 主键；
1主键是唯一的 一个数据表中只能包含一个主键 使用主键可以快速的定位到行 7、 外键；</description></item><item><title>一、开始学习SQLite</title><link>https://www.shellio.cc/docs/database/sqlite/1/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/database/sqlite/1/</guid><description>SQLite 教程 SQLite 是一个软件库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。SQLite 是在世界上最广泛部署的 SQL 数据库引擎。SQLite 源代码不受版权限制。
本教程将告诉您如何使用 SQLite 编程，并让你迅速上手。
现在开始学习 SQLite！
谁适合阅读本教程？ 本教程有助于初学者了解 SQLite 数据库引擎相关的基础知识和先进理念。
阅读本教程前，你需要了解的知识： 在开始使用本教程提供的各类实例进行练习之前，您需要了解什么是数据库，尤其是 RDBMS，以及什么是计算机编程语言。
编译/执行 SQLite 程序 如果您想要通过 SQLite DBMS 编译/执行 SQL 程序，但是您没有相关设置，那么可以访问 compileonline.com。您只需进行简单的点击动作，即可在高端的服务器上体验真实的编程经验。这是完全免费的在线工具。
SQLite 函数参考手册 本教程提供了所有重要的内置的 SQLite 函数的参考手册。
SQLite 常用函数
SQLite 有用的资源 本教程列出了 SQLite 数据库网站和书籍。
SQLite 有用的网站 SQLite Home Page - SQLite 官方网站提供了最新的 SQLite 安装版本，最新的 SQLite 资讯以及完整的 SQLite 教程。 PHP SQLite3 - 网站提供了 SQLite 3 数据库的 PHP 支持的完整细节。 SQLite JDBC Driver: - SQLite JDBC，由 Taro L.</description></item></channel></rss>