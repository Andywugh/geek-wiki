<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hibernate on 程序员安仔</title><link>https://www.shellio.cc/categories/hibernate/</link><description>Recent content in Hibernate on 程序员安仔</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>粤ICP备2023148789号</copyright><lastBuildDate>Sat, 21 Oct 2023 12:22:54 +0800</lastBuildDate><atom:link href="https://www.shellio.cc/categories/hibernate/index.xml" rel="self" type="application/rss+xml"/><item><title>八、Hibernate 持久化类</title><link>https://www.shellio.cc/docs/java/hibernate/8/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/8/</guid><description>持久化类 Hibernate 的完整概念是提取 Java 类属性中的值，并且将它们保存到数据库表单中。映射文件能够帮助 Hibernate 确定如何从该类中提取值，并将它们映射在表格和相关域中。
在Hibernate 中，其对象或实例将会被存储在数据库表单中的 Java 类被称为持久化类。若该类遵循一些简单的规则或者被大家所熟知的 Plain Old Java Object (POJO) 编程模型，Hibernate 将会处于其最佳运行状态。以下所列就是持久化类的主要规则，然而，在这些规则中，没有一条是硬性要求。
所有将被持久化的 Java 类都需要一个默认的构造函数。 为了使对象能够在 Hibernate 和数据库中容易识别，所有类都需要包含一个 ID。此属性映射到数据库表的主键列。 所有将被持久化的属性都应该声明为 private，并具有由 JavaBean 风格定义的 getXXX 和 setXXX 方法。 Hibernate 的一个重要特征为代理，它取决于该持久化类是处于非 final 的，还是处于一个所有方法都声明为 public 的接口。 所有的类是不可扩展或按 EJB 要求实现的一些特殊的类和接口。 POJO 的名称用于强调一个给定的对象是普通的 Java 对象，而不是特殊的对象，尤其不是一个 Enterprise JavaBean。
一个简单的 POJO 的例子 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 基于以上所述规则，我们能够定义如下 POJO 类：
1public class Employee { 2 private int id; 3 private String firstName; 4 private String lastName; 5 private int salary; 6 public Employee() {} 7 public Employee(String fname, String lname, int salary) { 8 this.</description></item><item><title>二、Hibernate ORM 概览</title><link>https://www.shellio.cc/docs/java/hibernate/2/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/2/</guid><description>ORM 概览 什么是 JDBC？ 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 JDBC 代表 Java Database Connectivity ，它是提供了一组 Java API 来访问关系数据库的 Java 程序。这些 Java APIs 可以使 Java 应用程序执行 SQL 语句，能够与任何符合 SQL 规范的数据库进行交互。
JDBC 提供了一个灵活的框架来编写操作数据库的独立的应用程序，该程序能够运行在不同的平台上且不需修改，能够与不同的 DBMS 进行交互。
JDBC 的优点和缺点 JDBC 的优点 JDBC 的缺点 干净整洁的 SQL 处理 大项目中使用很复杂 大数据下有良好的性能 很大的编程成本 对于小应用非常好 没有封装 易学的简易语法 难以实现 MVC 的概念 &amp;nbsp; 查询需要指定 DBMS 为什么是对象关系映射（ORM）？ 当我们工作在一个面向对象的系统中时，存在一个对象模型和关系数据库不匹配的问题。RDBMSs 用表格的形式存储数据，然而像 Java 或者 C# 这样的面向对象的语言它表示一个对象关联图。考虑下面的带有构造方法和公有方法的 Java 类：
1public class Employee { 2 private int id; 3 private String first_name; 4 private String last_name; 5 private int salary; 6 public Employee() {} 7 public Employee(String fname, String lname, int salary) { 8 this.</description></item><item><title>九、Hibernate 映射文件</title><link>https://www.shellio.cc/docs/java/hibernate/9/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/9/</guid><description>映射文件 一个对象/关系型映射一般定义在 XML 文件中。映射文件指示 Hibernate 如何将已经定义的类或类组与数据库中的表对应起来。
尽管有些 Hibernate 用户选择手写 XML 文件，但是有很多工具可以用来给先进的 Hibernate 用户生成映射文件。这样的工具包括 XDoclet, Middlegen 和 AndroMDA。
让我们来考虑我们之前定义的 POJO 类，它的对象将延续到下一部分定义的表中。
1public class Employee { 2 private int id; 3 private String firstName; 4 private String lastName; 5 private int salary; 6 public Employee() {} 7 public Employee(String fname, String lname, int salary) { 8 this.firstName = fname; 9 this.lastName = lname; 10 this.salary = salary; 11 } 12 public int getId() { 13 return id; 14 } 15 public void setId( int id ) { 16 this.</description></item><item><title>六、Hibernate 配置</title><link>https://www.shellio.cc/docs/java/hibernate/6/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/6/</guid><description>配置 Hibernate 需要事先知道在哪里找到映射信息，这些映射信息定义了 Java 类怎样关联到数据库表。Hibernate 也需要一套相关数据库和其它相关参数的配置设置。所有这些信息通常是作为一个标准的 Java 属性文件提供的，名叫 hibernate.properties。又或者是作为 XML 文件提供的，名叫 hibernate.cfg.xml。
我们将考虑 hibernate.cfg.xml 这个 XML 格式文件，来决定在我的例子里指定需要的 Hibernate 应用属性。这个 XML 文件中大多数的属性是不需要修改的。这个文件保存在应用程序的类路径的根目录里。
Hibernate 属性 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 下面是一个重要的属性列表，你可能需要表中的属性来在单独的情况下配置数据库。
S.N. 属性和描述 1 hibernate.dialect 这个属性使 Hibernate 应用为被选择的数据库生成适当的 SQL。 2 hibernate.connection.driver_class JDBC 驱动程序类。 3 hibernate.connection.url 数据库实例的 JDBC URL。 4 hibernate.connection.username 数据库用户名。 5 hibernate.connection.password 数据库密码。 6 hibernate.connection.pool_size 限制在 Hibernate 应用数据库连接池中连接的数量。 7 hibernate.connection.autocommit 允许在 JDBC 连接中使用自动提交模式。 如果您正在使用 JNDI 和数据库应用程序服务器然后您必须配置以下属性:
S.N. 属性和描述 1 hibernate.connection.datasource 在应用程序服务器环境中您正在使用的应用程序 JNDI 名。 2 hibernate.</description></item><item><title>七、Hibernate 会话</title><link>https://www.shellio.cc/docs/java/hibernate/7/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/7/</guid><description>会话 Session 用于获取与数据库的物理连接。 Session 对象是轻量级的，并且设计为在每次需要与数据库进行交互时被实例化。持久态对象被保存，并通过 Session 对象检索找回。
该Session 对象不应该长时间保持开放状态，因为它们通常不能保证线程安全，而应该根据需求被创建和销毁。Session 的主要功能是为映射实体类的实例提供创建，读取和删除操作。这些实例可能在给定时间点时存在于以下三种状态之一：
瞬时状态: 一种新的持久性实例，被 Hibernate 认为是瞬时的，它不与 Session 相关联，在数据库中没有与之关联的记录且无标识符值。 持久状态：可以将一个瞬时状态实例通过与一个 Session 关联的方式将其转化为持久状态实例。持久状态实例在数据库中没有与之关联的记录，有标识符值，并与一个 Session 关联。 脱管状态：一旦关闭 Hibernate Session，持久状态实例将会成为脱管状态实例。 若Session 实例的持久态类别是序列化的，则该 Session 实例是序列化的。一个典型的事务应该使用以下语法：
1Session session = factory.openSession(); 2Transaction tx = null; 3try { 4 tx = session.beginTransaction(); 5 // do some work 6 ... 7 tx.commit(); 8catch (Exception e) { 9 if (tx!=null) tx.rollback(); 10 e.printStackTrace(); 11}finally { 12 session.close(); 如果Session 引发异常，则事务必须被回滚，该 session 必须被丢弃。
Session 接口方法 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 Session 接口提供了很多方法，但在以下讲解中我将仅列出几个我们会在本教程中应用的重要方法。您可以查看 Hibernate 文件，查询与 Session 及 SessionFactory 相关的完整方法目录。</description></item><item><title>三、Hibernate 简介</title><link>https://www.shellio.cc/docs/java/hibernate/3/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/3/</guid><description>简介 Hibernate 是由 Gavin King 于 2001 年创建的开放源代码的对象关系框架。它强大且高效的构建具有关系对象持久性和查询服务的 Java 应用程序。
Hibernate 将 Java 类映射到数据库表中，从 Java 数据类型中映射到 SQL 数据类型中，并把开发人员从 95% 的公共数据持续性编程工作中解放出来。
Hibernate 是传统 Java 对象和数据库服务器之间的桥梁，用来处理基于 O/R 映射机制和模式的那些对象。
Hibernate 优势 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 Hibernate 使用 XML 文件来处理映射 Java 类别到数据库表格中，并且不用编写任何代码。 为在数据库中直接储存和检索 Java 对象提供简单的 APIs。 如果在数据库中或任何其它表格中出现变化，那么仅需要改变 XML 文件属性。 抽象不熟悉的 SQL 类型，并为我们提供工作中所熟悉的 Java 对象。 Hibernate 不需要应用程序服务器来操作。 操控你数据库中对象复杂的关联。 最小化与访问数据库的智能提取策略。 提供简单的数据询问。 支持的数据库 Hibernate 支持几乎所有的主要 RDBMS。以下是一些由 Hibernate 所支持的数据库引擎。
HSQL Database Engine DB2/NT MySQL PostgreSQL FrontBase Oracle Microsoft SQL Server Database Sybase SQL Server Informix Dynamic Server 支持的技术 Hibernate 支持多种多样的其它技术，包括以下：</description></item><item><title>十、Hibernate 映射类型</title><link>https://www.shellio.cc/docs/java/hibernate/10/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/10/</guid><description>映射类型 当你准备一个 Hibernate 映射文件时，我们已经看到你把 Java 数据类型映射到了 RDBMS 数据格式。在映射文件中已经声明被使用的 types 不是 Java 数据类型；它们也不是 SQL 数据库类型。这种类型被称为 Hibernate 映射类型，可以从 Java 翻译成 SQL，反之亦然。
在这一章中列举出所有的基础，日期和时间，大型数据对象，和其它内嵌的映射数据类型。
原始类型 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 映射类型 Java 类型 ANSI SQL 类型 integer int 或 java.lang.Integer INTEGER long long 或 java.lang.Long BIGINT short short 或 java.lang.Short SMALLINT float float 或 java.lang.Float FLOAT double double 或 java.lang.Double DOUBLE big_decimal java.math.BigDecimal NUMERIC character java.lang.String CHAR(1) string java.lang.String VARCHAR byte byte 或 java.lang.Byte TINYINT boolean boolean 或 java.</description></item><item><title>十八、Hibernate 批处理</title><link>https://www.shellio.cc/docs/java/hibernate/18/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/18/</guid><description>批处理 考虑一种情况，你需要使用 Hibernate 将大量的数据上传到你的数据库中。以下是使用 Hibernate 来达到这个的代码片段：
1Session session = SessionFactory.openSession(); 2Transaction tx = session.beginTransaction(); 3for ( int i=0; i&amp;lt;100000; i++ ) { 4 Employee employee = new Employee(.....); 5 session.save(employee); 6tx.commit(); 7session.close(); 因为默认下，Hibernate 将缓存所有的在会话层缓存中的持久的对象并且最终你的应用程序将和 OutOfMemoryException 在第 50000 行的某处相遇。你可以解决这个问题，如果你在 Hibernate 使用批处理。
为了使用批处理这个特性，首先设置 hibernate.jdbc.batch_size 作为批处理的尺寸，取一个依赖于对象尺寸的值 20 或 50。这将告诉 hibernate 容器每 X 行为一批插入。为了在你的代码中实现这个我们将需要像以下这样做一些修改：
1Session session = SessionFactory.openSession(); 2Transaction tx = session.beginTransaction(); 3for ( int i=0; i&amp;lt;100000; i++ ) { 4 Employee employee = new Employee(.</description></item><item><title>十二、Hibernate O-R 映射</title><link>https://www.shellio.cc/docs/java/hibernate/12/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/12/</guid><description>O/R 映射 目前为止我们已经通过应用 Hibernate 见识过十分基础的 O/R 映射了，但是还有三个更加重要的有关映射的话题需要我们更详细的探讨。这三个话题是集合的映射，实体类之间的关联映射以及组件映射。
集合映射 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 如果一个实例或者类中有特定变量的值的集合，那么我们可以应用 Java 中的任何的可用的接口来映射这些值。Hibernate 可以保存 java.util.Map, java.util.Set, java.util.SortedMap, java.util.SortedSet, java.util.List 和其它持续的实例或者值的任何数组的实例。
集合类型 映射和描述 java.util.Set 它和 \&amp;lt;set&amp;gt; 元素匹配并且用 java.util.HashSet 初始化。 java.util.SortedSet 它和 \&amp;lt;set&amp;gt; 元素匹配并且用 java.util.TreeSet 初始化。sort 属性可以设置成比较器或者自然排序。 java.util.List 它和 \&amp;lt;list&amp;gt; 元素匹配并且用 java.util.ArrayList 初始化。 java.util.Collection 它和 \&amp;lt;bag&amp;gt; 或者 \&amp;lt;ibag&amp;gt; 元素匹配以及用 java.util.ArrayList 初始化。 java.util.Map 它和 \&amp;lt;map&amp;gt; 元素匹配并且用 java.util.HashMap 初始化。 java.util.SortedMap“) 它和 \&amp;lt;map&amp;gt; 元素匹配并且用 java.util.TreeMap 初始化。sort 属性可以设置成比较器或者 自然排序。 对于Java 的原始数值 Hibernate 采用&amp;lt;primitive-array&amp;gt;支持数组，对于 Java 的其它数值 Hibernate 采用&amp;lt;array&amp;gt;支持数组。然而它们很少被应用，因此我也就不在本指导中讨论它们。</description></item><item><title>十九、Hibernate 拦截器</title><link>https://www.shellio.cc/docs/java/hibernate/19/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/19/</guid><description>拦截器 你已经学到，在 Hibernate 中，一个对象将被创建和保持。一旦对象已经被修改，它必须被保存到数据库里。这个过程持续直到下一次对象被需要，它将被从持久的存储中加载。
因此一个对象通过它生命周期中的不同阶段，并且 Interceptor 接口提供了在不同阶段能被调用来进行一些所需要的任务的方法。这些方法是从会话到应用程序的回调函数，允许应用程序检查或操作一个持续对象的属性，在它被保存，更新，删除或上传之前。以下是在 Interceptor 接口中可用的所有方法的列表。
S.N. 方法和描述 1 findDirty()
这个方法在当 flush() 方法在一个 Session 对象上被调用时被调用。 2 instantiate()
这个方法在一个持续的类被实例化时被调用。 3 isUnsaved()
这个方法在当一个对象被传到 saveOrUpdate() 方法时被调用。 4 onDelete()
这个方法在一个对象被删除前被调用。 5 onFlushDirty()
这个方法在当 Hibernate 探测到一个对象在一次 flush（例如，更新操作）中是脏的（例如，被修改）时被调用。 6 onLoad()
这个方法在一个对象被初始化之前被调用。 7 onSave()
这个方法在一个对象被保存前被调用。 8 postFlush()
这个方法在一次 flush 已经发生并且一个对象已经在内存中被更新后被调用。 9 preFlush()
这个方法在一次 flush 前被调用。 Hibernate 拦截器给予了我们一个对象如何应用到应用程序和数据库的总控制。
如何使用拦截器？ 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 为了创建一个拦截器你可以直接实现 Interceptor 类或者继承 EmptyInterceptor 类。以下是简单的使用 Hibernate 拦截器功能的步骤。
创建拦截器 我们将在例子中继承 EmptyInterceptor，当 Employee 对象被创建和更新时拦截器的方法将自动被调用。你可以根据你的需求实现更多的方法。
1import java.io.Serializable; 2import java.</description></item><item><title>十六、Hibernate 原生 SQL</title><link>https://www.shellio.cc/docs/java/hibernate/16/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/16/</guid><description>原生 SQL 如果你想使用数据库特定的功能如查询提示或 Oracle 中的 CONNECT 关键字的话，你可以使用原生 SQL 数据库来表达查询。Hibernate 3.x 允许您为所有的创建，更新，删除，和加载操作指定手写 SQL ，包括存储过程。
您的应用程序会在会话界面用 createSQLQuery() 方法创建一个原生 SQL 查询：
1public SQLQuery createSQLQuery(String sqlString) throws HibernateException 当你通过一个包含 SQL 查询的 createsqlquery() 方法的字符串时，你可以将 SQL 的结果与现有的 Hibernate 实体，一个连接，或一个标量结果分别使用 addEntity(), addJoin(), 和 addScalar() 方法进行关联。
标量查询 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 最基本的 SQL 查询是从一个或多个列表中获取一个标量（值）列表。以下是使用原生 SQL 进行获取标量的值的语法：
1String sql = &amp;#34;SELECT first_name, salary FROM EMPLOYEE&amp;#34;; 2SQLQuery query = session.createSQLQuery(sql); 3query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP); 4List results = query.list(); 实体查询 以上的查询都是关于返回标量值的查询，只是基础性地返回结果集中的“原始”值。以下是从原生 SQL 查询中通过 addEntity() 方法获取实体对象整体的语法：
1String sql = &amp;#34;SELECT * FROM EMPLOYEE&amp;#34;; 2SQLQuery query = session.</description></item><item><title>十七、Hibernate 缓存</title><link>https://www.shellio.cc/docs/java/hibernate/17/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/17/</guid><description>缓存 缓存是关于应用程序性能的优化，降低了应用程序对物理数据源访问的频次，从而提高应用程序的运行性能。
缓存对Hibernate 来说也是重要的，它使用了如下解释的多级缓存方案：
一级缓存 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 第一级缓存是 Session 缓存并且是一种强制性的缓存，所有的要求都必须通过它。Session 对象在它自己的权利之下，在将它提交给数据库之前保存一个对象。
如果你对一个对象发出多个更新，Hibernate 会尝试尽可能长地延迟更新来减少发出的 SQL 更新语句的数目。如果你关闭 session,所有缓存的对象丢失，或是存留，或是在数据库中被更新。
二级缓存 第二级缓存是一种可选择的缓存并且第一级缓存在任何想要在第二级缓存中找到一个对象前将总是被询问。第二级缓存可以在每一个类和每一个集合的基础上被安装，并且它主要负责跨会话缓存对象。
任何第三方缓存可以和 Hibernate 一起使用。org.hibernate.cache.CacheProvider 接口被提供，它必须实现来给 Hibernate 提供一个缓存实现的解决方法。
查询层次缓存 Hibernate 也实现了一个和第二级缓存密切集成的查询结果集缓存。
这是一个可选择的特点并且需要两个额外的物理缓存区域，它们保存着缓存的查询结果和表单上一次更新时的时间戳。这仅对以同一个参数频繁运行的查询来说是有用的。
第二级缓存 Hibernate 使用默认的一级缓存并且你不用使用一级缓存。让我们直接看向可选的二级缓存。不是所有的类从缓存中获益，所以能关闭二级缓存是重要的。
Hibernate 的二级缓存通过两步设置。第一，你必须决定好使用哪个并发策略。之后，你使用缓存提供程序来配置缓存到期时间和物理缓存属性。
并发策略 一个并发策略是一个中介，它负责保存缓存中的数据项和从缓存中检索它们。如果你将使用一个二级缓存，你必须决定，对于每一个持久类和集合，使用哪一个并发策略。
**Transactional:**为主读数据使用这个策略，在一次更新的罕见状况下并发事务阻止过期数据是关键的。 **Read-write:**为主读数据再一次使用这个策略，在一次更新的罕见状况下并发事务阻止过期数据是关键的。 **Nonstrict-read-write:**这个策略不保证缓存和数据库之间的一致性。如果数据几乎不改变并且过期数据不是很重要，使用这个策略。 **Read-only:**一个适合永不改变数据的并发策略。只为参考数据使用它。 如果我们将为我们的 Employee 类使用二级缓存，让我们使用 read-write 策略来添加需要告诉 Hibernate 来缓存 Employee 实例的映射元素。
1&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; 2&amp;lt;!DOCTYPE hibernate-mapping PUBLIC 3 &amp;#34;-//Hibernate/Hibernate Mapping DTD//EN&amp;#34; 4 &amp;#34;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&amp;#34;&amp;gt; 5&amp;lt;hibernate-mapping&amp;gt; 6 &amp;lt;class name=&amp;#34;Employee&amp;#34; table=&amp;#34;EMPLOYEE&amp;#34;&amp;gt; 7 &amp;lt;meta attribute=&amp;#34;class-description&amp;#34;&amp;gt; 8 This class contains the employee detail.</description></item><item><title>十三、Hibernate 注释</title><link>https://www.shellio.cc/docs/java/hibernate/13/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/13/</guid><description>注释 到现在为止，你已经看到 Hibernate 如何使用 XML 映射文件来完成从 POJO 到数据库表的数据转换的，反之亦然。Hibernate 注释是无需使用 XML 文件来定义映射的最新方法。你可以额外使用注释或直接代替 XML 映射元数据。
Hibernate 注释是一种强大的来给对象和关系映射表提供元数据的方法。所有的元数据被添加到 POJO java 文件代码中，这有利于用户在开发时更好的理解表的结构和 POJO。
如果你想让你的应用程序移植到其它 EJB 3 的 ORM 应用程序中,您必须使用注释来表示映射信息，但是如果想要得到更大的灵活性,那么你应该使用基于 XML 的映射。
Hibernate 注释的环境设置 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 首先你必须确定你使用的是 JDK 5.0，否则你需要升级你的 JDK 至 JDK 5.0，来使你的主机能够支持注释。
其次，你需要安装 Hibernate 3.x 注释包，可以从 sourceforge 行下载：（下载 Hibernate 注释） 并且从 Hibernate 注释发布中拷贝 hibernate-annotations.jar, lib/hibernate-comons-annotations.jar 和 lib/ejb3-persistence.jar 到你的 CLASSPATH。
注释类示例 正如我上面所提到的，所有的元数据被添加到 POJO java 文件代码中，这有利于用户在开发时更好的理解表的结构和 POJO。
下面我们将使用 EMPLOYEE 表来存储对象:
1create table EMPLOYEE ( 2 id INT NOT NULL auto_increment, 3 first_name VARCHAR(20) default NULL, 4 last_name VARCHAR(20) default NULL, 5 salary INT default NULL, 6 PRIMARY KEY (id) 7); 以下是用带有注释的 Employee 类来映射使用定义好的 Employee 表的对象:</description></item><item><title>十四、Hibernate 查询语言</title><link>https://www.shellio.cc/docs/java/hibernate/14/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/14/</guid><description>查询语言 Hibernate 查询语言（HQL）是一种面向对象的查询语言，类似于 SQL，但不是去对表和列进行操作，而是面向对象和它们的属性。 HQL 查询被 Hibernate 翻译为传统的 SQL 查询从而对数据库进行操作。
尽管你能直接使用本地 SQL 语句，但我还是建议你尽可能的使用 HQL 语句，以避免数据库关于可移植性的麻烦，并且体现了 Hibernate 的 SQL 生成和缓存策略。
在HQL 中一些关键字比如 SELECT ，FROM 和 WHERE 等，是不区分大小写的，但是一些属性比如表名和列名是区分大小写的。
FROM 语句 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 如果你想要在存储中加载一个完整并持久的对象,你将使用 FROM 语句。以下是 FROM 语句的一些简单的语法：
1String hql = &amp;#34;FROM Employee&amp;#34;; 2Query query = session.createQuery(hql); 3List results = query.list(); 如果你需要在 HQL 中完全限定类名，只需要指定包和类名，如下：
1String hql = &amp;#34;FROM com.hibernatebook.criteria.Employee&amp;#34;; 2Query query = session.createQuery(hql); 3List results = query.list(); AS 语句 在HQL 中 AS 语句能够用来给你的类分配别名，尤其是在长查询的情况下。例如，我们之前的例子，可以用如下方式展示：</description></item><item><title>十五、Hibernate 标准查询</title><link>https://www.shellio.cc/docs/java/hibernate/15/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/15/</guid><description>标准查询 Hibernate 提供了操纵对象和相应的 RDBMS 表中可用的数据的替代方法。一种方法是标准的 API，它允许你建立一个标准的可编程查询对象来应用过滤规则和逻辑条件。
Hibernate Session 接口提供了 createCriteria() 方法，可用于创建一个 Criteria 对象，使当您的应用程序执行一个标准查询时返回一个持久化对象的类的实例。
以下是一个最简单的标准查询的例子，它只是简单地返回对应于员工类的每个对象：
1Criteria cr = session.createCriteria(Employee.class); 2List results = cr.list(); 对标准的限制 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 你可以使用 Criteria 对象可用的 add() 方法去添加一个标准查询的限制。
以下是一个示例，它实现了添加一个限制，令返回工资等于 2000 的记录：
1Criteria cr = session.createCriteria(Employee.class); 2cr.add(Restrictions.eq(&amp;#34;salary&amp;#34;, 2000)); 3List results = cr.list(); 以下是几个例子，涵盖了不同的情况，可按要求进行使用：
1Criteria cr = session.createCriteria(Employee.class); 2// To get records having salary more than 2000 3cr.add(Restrictions.gt(&amp;#34;salary&amp;#34;, 2000)); 4// To get records having salary less than 2000 5cr.add(Restrictions.lt(&amp;#34;salary&amp;#34;, 2000)); 6// To get records having fistName starting with zara 7cr.</description></item><item><title>十一、Hibernate 例子</title><link>https://www.shellio.cc/docs/java/hibernate/11/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/11/</guid><description>例子 让我们看一个独立应用程序利用 Hibernate 提供 Java 持久性的例子。我们将通过不同的步骤使用 Hibernate 技术创建 Java 应用程序。
创建 POJO 类 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 创建应用程序的第一步就是建立 Java 的 POJO 类或者其它类，这取决于即将要存放在数据库中的应用程序。我们可以考虑一下让我们的 Employee 类使用 getXXX 和 setXXX 方法从而使它们变成符合 JavaBeans 的类。
POJO (Plain Old Java Object) 是 Java 的一个对象，这种对象不会扩展或者执行一些特殊的类并且它的接口都是分别在 EJB 框架的要求下的。所有正常的 Java 对象都是 POJO。
当你设计一个存放在 Hibernate 中的类时，最重要的是提供支持 JavaBeans 的代码和在 Employee 类中像 id 属性一样可以当做索引的属性。
1public class Employee { 2 private int id; 3 private String firstName; 4 private String lastName; 5 private int salary; 6 public Employee() {} 7 public Employee(String fname, String lname, int salary) { 8 this.</description></item><item><title>四、Hibernate 架构</title><link>https://www.shellio.cc/docs/java/hibernate/4/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/4/</guid><description>架构 Hibernate 架构是分层的，作为数据访问层，你不必知道底层 API 。Hibernate 利用数据库以及配置数据来为应用程序提供持续性服务（以及持续性对象）。
下面是一个非常高水平的 Hibernate 应用程序架构视图。
下面是一个详细的 Hibernate 应用程序体系结构视图以及一些重要的类。
Hibernate 使用不同的现存 Java API，比如 JDBC，Java 事务 API（JTA），以及 Java 命名和目录界面（JNDI）。JDBC 提供了一个基本的抽象级别的通用关系数据库的功能， Hibernate 支持几乎所有带有 JDBC 驱动的数据库。JNDI 和 JTA 允许 Hibernate 与 J2EE 应用程序服务器相集成。
下面的部分简要地描述了在 Hibernate 应用程序架构所涉及的每一个类对象。
配置对象 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 配置对象是你在任何 Hibernate 应用程序中创造的第一个 Hibernate 对象，并且经常只在应用程序初始化期间创造。它代表了 Hibernate 所需一个配置或属性文件。配置对象提供了两种基础组件。
数据库连接：由 Hibernate 支持的一个或多个配置文件处理。这些文件是 hibernate.properties 和 hibernate.cfg.xml。 类映射设置：这个组件创造了 Java 类和数据库表格之间的联系。 SessionFactory 对象 配置对象被用于创造一个 SessionFactory 对象，使用提供的配置文件为应用程序依次配置 Hibernate，并允许实例化一个会话对象。SessionFactory 是一个线程安全对象并由应用程序所有的线程所使用。
SessionFactory 是一个重量级对象所以通常它都是在应用程序启动时创造然后留存为以后使用。每个数据库需要一个 SessionFactory 对象使用一个单独的配置文件。所以如果你使用多种数据库那么你要创造多种 SessionFactory 对象。
Session 对象 一个会话被用于与数据库的物理连接。Session 对象是轻量级的，并被设计为每次实例化都需要与数据库的交互。持久对象通过 Session 对象保存和检索。</description></item><item><title>五、Hibernate 环境</title><link>https://www.shellio.cc/docs/java/hibernate/5/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/5/</guid><description>环境 这个章节会告诉你为了给 Hibernate 应用准备需要的开发环境，该怎样安装 Hibernate 应用和一些其它相关的包。我们会用 MySQL 数据库来对一些 Hibernate 应用的例子进行试验，所以先要确保你已经安装过了 MySQL 数据库。想了解更多的关于 MySQL 数据库的详情的话，你可以搜索我们的 MySQL教程。
下载 Hibernate 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 如果你已经在你的机器上安装了 Java 的最新版本，那么按照以下这些简易的步骤来下载并安装 Hibernate 在你的机器上就可以了。
首先要在想要把 Hibernate 应用安装在 Windows 系统或是 Unix 系统这两者之间做出选择，之后继续到下一个步骤去下载与 Windows 系统对应的 .zip 文件或是与 Unix 系统对应的 .tz 文件。 之后到 http://www.hibernate.org/downloads 这个网址来下载最新版本的 Hibernate 应用。 在写这个教程时我下载的是 hibernate-distribution-3.6.4.Final 这个版本的应用，在这个版本的应用下当我们解压下载的文件时会显示以下的目录结构。 安装 Hibernate 一旦你下好并且解压了 Hibernate 应用最新版本的安装文件，你需要执行以下两个简单的步骤。一定要确保你把你的 CLASSPATH 变量设置合理，否则当你编译你的应用时可能会遇到问题。
首先把从 /lib 复制来的所有库文件拷贝到 CLASSPATH 里，并且改变你的 CLASSPATH 变量来涵盖所有的 JAR。 最后复制 hibernate3.jar 这个文件到 CLASSPATH 里。这个文件位于安装文件的根目录里，它是 Hibernate 应用针对的主要 JAR。 Hibernate 的前提 以下是一个 Hibernate 应用需要的有关包/库的表格，在安装 Hibernate 应用之前你需要先安装它们。为了安装这些包你必须把来自 /lib 的库文件拷贝到 CLASSPATH ，并按以下说明相应地改变 CLASSPATH 变量。</description></item><item><title>一、Hibernate 教程</title><link>https://www.shellio.cc/docs/java/hibernate/1/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/hibernate/1/</guid><description>Hibernate 教程 Hibernate 是一个高性能的对象关系型持久化存储和查询的服务，其遵循开源的 GNU Lesser General Public License (LGPL) 而且可以免费下载。Hibernate 不仅关注于从 Java 类到数据库表的映射，也有 Java 数据类型到 SQL 数据类型的映射，另外也提供了数据查询和检索服务。
这个教程将指导你如何以简单的方式使用 Hibernate 来开发基于数据库的 Web 应用程序。
适用人群 这个教程是为需要理解 Hibernate 框架和 API 的 Java 编程人员设计的。读完这份教程后你将发现自己在使用 Hibernate 上从一个中等程度迈向更高的层次。
学习前提 我们假设你已经很好的理解了 Java 编程语言。若对关系型数据库，JDBC 和 SQL 有些基本的了解会更好。
版本信息 书中演示代码基于以下版本：
框架 版本信息 Hibernate 3.0</description></item></channel></rss>