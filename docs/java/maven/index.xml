<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Maven on 程序员安仔</title><link>https://www.shellio.cc/docs/java/maven/</link><description>Recent content in Maven on 程序员安仔</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>个人技术博客</copyright><atom:link href="https://www.shellio.cc/docs/java/maven/index.xml" rel="self" type="application/rss+xml"/><item><title>八、Maven 创建工程</title><link>https://www.shellio.cc/docs/java/maven/8/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/8/</guid><description>Maven – 创建工程 Maven 使用**原型（archetype）**插件创建工程。要创建一个简单的 Java 应用，我们将使用 maven-archetype-quickstart 插件。在下面的例子中，我们将在 C:\MVN 文件夹下创建一个基于 maven 的 java 应用工程。
我们打开命令控制台，跳转到 C:\MVN 目录，并执行下面的 mvn 命令。
1C:\MVN&amp;gt;mvn archetype:generate 2-DgroupId=com.companyname.bank 3-DartifactId=consumerBanking 4-DarchetypeArtifactId=maven-archetype-quickstart 5-DinteractiveMode=false Maven 将开始处理，并将创建完成的 java 应用工程结构。
1INFO] Scanning for projects... 2[INFO] Searching repository for plugin with prefix: &amp;#39;archetype&amp;#39;. 3[INFO] ------------------------------------------------------------------- 4[INFO] Building Maven Default Project 5[INFO] task-segment: [archetype:generate] (aggregator-style) 6[INFO] ------------------------------------------------------------------- 7[INFO] Preparing archetype:generate 8[INFO] No goals needed for project - skipping 9[INFO] [archetype:generate {execution: default-cli}] 10[INFO] Generating project in Batch mode 11[INFO] ------------------------------------------------------------------- 12[INFO] Using following parameters for creating project 13 from Old (1.</description></item><item><title>二、Maven 环境配置</title><link>https://www.shellio.cc/docs/java/maven/2/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/2/</guid><description>Maven – 环境配置 Maven 是一个基于 Java 的工具，所以要做的第一件事情就是安装 JDK。
系统要求 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 项目 要求 JDK Maven 3.3 要求 JDK 1.7 或以上
Maven 3.2 要求 JDK 1.6 或以上
Maven 3.0/3.1 要求 JDK 1.5 或以上 内存 没有最低要求 磁盘 Maven 自身安装需要大约 10 MB 空间。除此之外，额外的磁盘空间将用于你的本地 Maven 仓库。你本地仓库的大小取决于使用情况，但预期至少 500 MB 操作系统 没有最低要求 步骤 1：检查 Java 安装 现在打开控制台，执行下面的 java 命令。
操作系统 任务 命令 Windows 打开命令控制台 c:\&amp;gt; java -version Linux 打开命令终端 $ java -version Mac 打开终端 machine:~ joseph$ java -version 我们来验证一下所有平台上的输出：</description></item><item><title>二十、Maven IntelliJ IDEA</title><link>https://www.shellio.cc/docs/java/maven/20/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/20/</guid><description>Maven – IntelliJ IDEA IntelliJ IDEA 针对 Maven 支持内部构建功能。 在本例中，我们使用 IntelliJ IDEA Community Edition 11.1 的版本。
关于IntelliJ IDEA 的一些特性如下：
可以通过 IntelliJ IDEA 来运行 Maven 目标。 可以在 IntelliJ IDEA 自己的终端里查看 Maven 命令的输出结果。 可以在 IDE 里更新 Maven 的依赖关系。 可以在 IntelliJ IDEA 中启动 Maven 的构建。 IntelliJ IDEA 基于 Maven 的 pom.xml 来实现自动化管理依赖关系。 IntelliJ IDEA 可以通过自己的工作区解决 Maven 的依赖问题，而无需安装到本地的 Maven 仓库，虽然需要依赖的工程在同一个工作区。 IntelliJ IDEA 可以自动从远程 Moven 仓库上下载需要的依赖和源码。 IntelliJ IDEA 提供了创建 Maven 工程，pom.xml 文件的向导。 下面的例子将会帮助你更加充分的认识集成的 IntelliJ IDEA 和 Maven 的优势。</description></item><item><title>九、Maven 构建 &amp;amp; 测试工程</title><link>https://www.shellio.cc/docs/java/maven/9/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/9/</guid><description>Maven – 构建 &amp;amp; 测试工程 我们在创建工程章节中学到的是如何使用 Maven 创建 Java 应用。现在我们将看到如何构建和测试这个应用。
跳转到C:/MVN 目录下，既你的 java 应用目录下。打开 consumerBanking 文件夹。你将看到 POM.xml 文件中有下面的内容。
1&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; 2 xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; 3 xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 4 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; 5 &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; 6 &amp;lt;groupId&amp;gt;com.companyname.projectgroup&amp;lt;/groupId&amp;gt; 7 &amp;lt;artifactId&amp;gt;project&amp;lt;/artifactId&amp;gt; 8 &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt; 9 &amp;lt;dependencies&amp;gt; 10 &amp;lt;dependency&amp;gt; 11 &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; 12 &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; 13 &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt; 14 &amp;lt;/dependency&amp;gt; 15 &amp;lt;/dependencies&amp;gt; 16&amp;lt;/project&amp;gt; 可以看到，Maven 已经添加了 JUnit 作为测试框架。默认 Maven 添加了一个源码文件 App.java 和一个测试文件 AppTest.java 到上个章节中我们提到的默认目录结构中。
打开命令控制台，跳转到 C:\MVN\consumerBanking 目录下，并执行以下 mvn 命令。
1C:\MVN\consumerBanking&amp;gt;mvn clean package Maven 将开始构建工程。
1[INFO] Scanning for projects.</description></item><item><title>六、Maven 仓库</title><link>https://www.shellio.cc/docs/java/maven/6/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/6/</guid><description>Maven – 仓库 什么是 Maven 仓库？ 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 在Maven 的术语中，仓库是一个位置（place），例如目录，可以存储所有的工程 jar 文件、library jar 文件、插件或任何其他的工程指定的文件。
Maven 仓库有三种类型：
本地（local） 中央（central） 远程（remote） 本地仓库 Maven 本地仓库是机器上的一个文件夹。它在你第一次运行任何 maven 命令的时候创建。
Maven 本地仓库保存你的工程的所有依赖（library jar、plugin jar 等）。当你运行一次 Maven 构建，Maven 会自动下载所有依赖的 jar 文件到本地仓库中。它避免了每次构建时都引用存放在远程机器上的依赖文件。
Maven 本地仓库默认被创建在 %USER_HOME% 目录下。要修改默认位置，在 %M2_HOME%\conf 目录中的 Maven 的 settings.xml 文件中定义另一个路径。
1&amp;lt;settings xmlns=&amp;#34;http://maven.apache.org/SETTINGS/1.0.0&amp;#34; 2 xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; 3 xsi:schemaLocation=&amp;#34;http://maven.apache.org/SETTINGS/1.0.0 4 http://maven.apache.org/xsd/settings-1.0.0.xsd&amp;#34;&amp;gt; 5 &amp;lt;localRepository&amp;gt;C:/MyLocalRepository&amp;lt;/localRepository&amp;gt; 6&amp;lt;/settings&amp;gt; 当你运行 Maven 命令，Maven 将下载依赖的文件到你指定的路径中。
中央仓库 Maven 中央仓库是由 Maven 社区提供的仓库，其中包含了大量常用的库。
中央仓库的关键概念：
这个仓库由 Maven 社区管理。 不需要配置。 需要通过网络才能访问。 要浏览中央仓库的内容，maven 社区提供了一个 URL：http://search.</description></item><item><title>七、Maven 插件</title><link>https://www.shellio.cc/docs/java/maven/7/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/7/</guid><description>Maven – 插件 什么是 Maven 插件？ 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 Maven 实际上是一个依赖插件执行的框架，每个任务实际上是由插件完成。Maven 插件通常被用来：
创建 jar 文件 创建 war 文件 编译代码文件 代码单元测试 创建工程文档 创建工程报告 插件通常提供了一个目标的集合，并且可以使用下面的语法执行：
1mvn [plugin-name]:[goal-name] 例如，一个 Java 工程可以使用 maven-compiler-plugin 的 compile-goal 编译，使用以下命令：
1mvn compiler:compile 插件类型 Maven 提供了下面两种类型的插件：
类型 描述 Build plugins 在构建时执行，并在 pom.xml 的 元素中配置。 Reporting plugins 在网站生成过程中执行，并在 pom.xml 的 元素中配置。 下面是一些常用插件的列表：
插件 描述 clean 构建之后清理目标文件。删除目标目录。 compiler 编译 Java 源文件。 surefile 运行 JUnit 单元测试。创建测试报告。 jar 从当前工程中构建 JAR 文件。 war 从当前工程中构建 WAR 文件。 javadoc 为工程生成 Javadoc。 antrun 从构建过程的任意一个阶段中运行一个 ant 任务的集合。 例子 我们已经在我们的例子中大量使用了 maven-antrun-plugin 来输出数据到控制台上。请查看 Maven – 构建配置文件 章节。让我们用一种更好的方式理解这部分内容，在 C:\MVN\project 目录下创建一个 pom.</description></item><item><title>三、Maven POM</title><link>https://www.shellio.cc/docs/java/maven/3/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/3/</guid><description>Maven – POM POM代表工程对象模型。它是使用 Maven 工作时的基本组建，是一个 xml 文件。它被放在工程根目录下，文件命名为 pom.xml。
POM包含了关于工程和各种配置细节的信息，Maven 使用这些信息构建工程。
POM也包含了目标和插件。当执行一个任务或者目标时，Maven 会查找当前目录下的 POM，从其中读取所需要的配置信息，然后执行目标。能够在 POM 中设置的一些配置如下：
project dependencies plugins goals build profiles project version developers mailing list 在创建POM 之前，我们首先确定工程组（groupId），及其名称（artifactId）和版本，在仓库中这些属性是工程的唯一标识。
POM 举例 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 1&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; 2 xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; 3 xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 4 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; 5 &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; 6 &amp;lt;groupId&amp;gt;com.companyname.project-group&amp;lt;/groupId&amp;gt; 7 &amp;lt;artifactId&amp;gt;project&amp;lt;/artifactId&amp;gt; 8 &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt; 9&amp;lt;/project&amp;gt; 需要说明的是每个工程应该只有一个 POM 文件。
所有的 POM 文件需要 project 元素和三个必须的字段：groupId, artifactId,version。 在仓库中的工程标识为 groupId:artifactId:version POM.xml 的根元素是 project，它有三个主要的子节点： 节点 描述 groupId 这是工程组的标识。它在一个组织或者项目中通常是唯一的。例如，一个银行组织 com.company.bank 拥有所有的和银行相关的项目。 artifactId 这是工程的标识。它通常是工程的名称。例如，消费者银行。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置。 version 这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。例如：</description></item><item><title>十、Maven 外部依赖</title><link>https://www.shellio.cc/docs/java/maven/10/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/10/</guid><description>Maven – 外部依赖 现在，如你所知道的，Maven的依赖管理使用的是 Maven – 仓库 的概念。但是如果在远程仓库和中央仓库中，依赖不能被满足，如何解决呢? Maven 使用外部依赖的概念来解决这个问题。
例如，让我们对在 Maven – 创建工程 部分创建的项目做以下修改：
在 src 文件夹下添加 lib 文件夹 复制任何 jar 文件到 lib 文件夹下。我们使用的是 ldapjdk.jar ，它是为 LDAP 操作的一个帮助库 现在，我们的工程结构应该像下图一样：
现在你有了自己的工程库（library），通常情况下它会包含一些任何仓库无法使用，并且 maven 也无法下载的 jar 文件。如果你的代码正在使用这个库，那么 Maven 的构建过程将会失败，因为在编译阶段它不能下载或者引用这个库。
为了处理这种情况，让我们用以下方式，将这个外部依赖添加到 maven pom.xml 中。
1 &amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; 2 xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; 3 xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 4 http://maven.apache.org/maven-v4_0_0.xsd&amp;#34;&amp;gt; 5 &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; 6 &amp;lt;groupId&amp;gt;com.companyname.bank&amp;lt;/groupId&amp;gt; 7 &amp;lt;artifactId&amp;gt;consumerBanking&amp;lt;/artifactId&amp;gt; 8 &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; 9 &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; 10 &amp;lt;name&amp;gt;consumerBanking&amp;lt;/name&amp;gt; 11 &amp;lt;url&amp;gt;http://maven.apache.org&amp;lt;/url&amp;gt; 12 &amp;lt;dependencies&amp;gt; 13 &amp;lt;dependency&amp;gt; 14 &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; 15 &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; 16 &amp;lt;version&amp;gt;3.</description></item><item><title>十八、Maven Elipse IDE</title><link>https://www.shellio.cc/docs/java/maven/18/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/18/</guid><description>Maven – Elipse IDE Eclipse 提供一种卓越的插件 m2eclipse，该插件使得 Maven 和 Eclipse 能够无缝集成。
下面列出 m2eclipse 的一些特点：
可以在 Eclipse 环境上运行 Maven 的目标文件。 可以使用其自带的控制台在 Eclipse 中直接查看 Maven 命令的输出。 可以在 IDE 下更新 Maven 的依赖关系。 可以使用 Eclipse 开展 Maven 工程的构建。 Eclipse 基于 Maven 的 pom.xml 来实现自动化管理依赖关系。 它解决了 Maven 与 Eclipse 的工作空间之间的依赖，而不需要安装到本地 Maven 的存储库（需要依赖项目在同一个工作区）。 它可以自动地从远端的 Maven 库中下载所需要的依赖以及源码。 它提供了向导，为建立新 Maven 工程，pom.xml 以及在已有的工程上开启 Maven 支持。 它提供了远端的 Maven 存储库的依赖的快速搜索。 安装 m2eclipse 插件 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 使用以下任意一个链接来安装 m2eclipse:
Eclipse URL Eclipse 3.5 (Gallileo) Installing m2eclipse in Eclipse 3.</description></item><item><title>十二、Maven 工程模版</title><link>https://www.shellio.cc/docs/java/maven/12/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/12/</guid><description>Maven – 工程模板 Maven 使用原型（Archetype）概念为用户提供了大量不同类型的工程模版（614 个）。Maven 使用下面的命令帮助用户快速创建 java 项目。
1mvn archetype:generate 什么是原型？ 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 原型是一个 Maven 插件，它的任务是根据模板创建一个项目结构。我们将使用 quickstart 原型插件创建一个简单的 java 应用程序。
使用工程模板 让我们打开命令控制台，跳转到 C:\ &amp;gt; MVN 目录并执行以下 mvn 命令
1C:\MVN&amp;gt;mvn archetype:generate Maven 将开始处理，并要求选择所需的原型
1INFO] Scanning for projects... 2[INFO] Searching repository for plugin with prefix: &amp;#39;archetype&amp;#39;. 3[INFO] ------------------------------------------------------------------- 4[INFO] Building Maven Default Project 5[INFO]task-segment: [archetype:generate] (aggregator-style) 6[INFO] ------------------------------------------------------------------- 7[INFO] Preparing archetype:generate 8... 9600: remote -&amp;gt; org.trailsframework:trails-archetype (-) 10601: remote -&amp;gt; org.trailsframework:trails-secure-archetype (-) 11602: remote -&amp;gt; org.</description></item><item><title>十九、Maven NetBeans</title><link>https://www.shellio.cc/docs/java/maven/19/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/19/</guid><description>Maven – NetBeans NetBeans 6.7 版本或者更新的版本针对 Maven 支持内部构建功能。 针对之前的版本，可以在插件管理器中找到 Maven 插件。在本例中，我们使用 NetBeans 6.9 版本。
关于NetBeans 的一些特性如下：
可以通过 NetBeans 来运行 Maven 目标。 可以在 NetBeans 自己的终端里查看 Maven 命令的输出结果。 可以更新 Maven 与 IDE 的依赖。 可以在 NetBeans 中启动 Maven 的构建。 NetBeans 基于 Maven 的 pom.xml 来实现自动化管理依赖关系。 NetBeans 可以通过自己的工作区解决 Maven 的依赖问题，而无需安装到本地的 Maven 仓库，虽然需要依赖的工程在同一个工作区。 NetBeans 可以自动从远程 Moven 库上下载需要的依赖和源码。 NetBeans 提供了创建 Maven 工程，pom.xml 文件的向导。 NetBeans 提供了 关于Maven 仓库的浏览器，使您可以查看本地存储库和注册在外部的 Maven 仓库。 下面的例子将会帮助你更加充分的认识集成的 NetBeans 和 Maven 的优势。
在 NetBeans 里打开一个 Maven 工程 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 打开 NetBeans.</description></item><item><title>十六、Maven 自动化部署</title><link>https://www.shellio.cc/docs/java/maven/16/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/16/</guid><description>Maven – 自动化部署 一般情况下，在一个工程开发进程里，一次部署的过程包含需如下步骤：
合入每个子工程下的代码到 SVN 或者源代码库，并标记它。 从 SVN 下载完整的源代码。 构建应用程序。 保存构建结果为 WAR 或者 EAR 类型文件并存放到一个共同的指定的网络位置上。 从网络上获得该文件并且部署该文件到产品线上。 更新文档日期和应用程序的版本号。 问题陈述 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 通常，将会有很多不同的人参与到上述部署过程中。一个团队可以负责代码的合入工作，另外一个可以负责构建，以此类推。上述的任何一个步骤都可能因为人为的原因没有被执行。例如，较旧的版本没有在网络机器上更新，负责部署的团队再一次部署了旧的版本。
解决方案 通过结合如下的方案来实现自动化部署：
Maven 构建和发布项目， SubVersion, 源代码库用以管理源代码， 远程仓库管理工具 (Jfrog/Nexus) 用以管理工程的二进制文件。 更新工程的 POM.xml 我们将会使用 Maven 发布的插件来创建一个自动化发布过程：
例如：bus-core-api 工程的 POM.xml 如下
1&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; 2 xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; 3 xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 4 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; 5 &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; 6 &amp;lt;groupId&amp;gt;bus-core-api&amp;lt;/groupId&amp;gt; 7 &amp;lt;artifactId&amp;gt;bus-core-api&amp;lt;/artifactId&amp;gt; 8 &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; 9 &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; 10 &amp;lt;scm&amp;gt; 11 &amp;lt;url&amp;gt;http://www.svn.com&amp;lt;/url&amp;gt; 12 &amp;lt;connection&amp;gt;scm:svn:http://localhost:8080/svn/jrepo/trunk/ 13 Framework&amp;lt;/connection&amp;gt; 14 &amp;lt;developerConnection&amp;gt;scm:svn:${username}/${password}@localhost:8080: 15 common_core_api:1101:code&amp;lt;/developerConnection&amp;gt; 16 &amp;lt;/scm&amp;gt; 17 &amp;lt;distributionManagement&amp;gt; 18 &amp;lt;repository&amp;gt; 19 &amp;lt;id&amp;gt;Core-API-Java-Release&amp;lt;/id&amp;gt; 20 &amp;lt;name&amp;gt;Release repository&amp;lt;/name&amp;gt; 21 &amp;lt;url&amp;gt;http://localhost:8081/nexus/content/repositories/ 22 Core-Api-Release&amp;lt;/url&amp;gt; 23 &amp;lt;/repository&amp;gt; 24 &amp;lt;/distributionManagement&amp;gt; 25 &amp;lt;build&amp;gt; 26 &amp;lt;plugins&amp;gt; 27 &amp;lt;plugin&amp;gt; 28 &amp;lt;groupId&amp;gt;org.</description></item><item><title>十七、Maven Web 应用</title><link>https://www.shellio.cc/docs/java/maven/17/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/17/</guid><description>Maven – Web 应用 本教程将指导你如何使用 Maven 版本控制系统来管理一个基于 Web 的工程。在此，你将学习到如何创建/构建/部署以及运行 Web 应用程序：
创建 Web 应用 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 建立一个简单的 Java web 应用，我们可以使用 maven-archetype-webapp 插件。首先我们打开命令控制台，进入 C:\MVN 目录并且执行以下的 mvn 命令。
1C:\MVN&amp;gt;mvn archetype:generate 2-DgroupId=com.companyname.automobile 3-DartifactId=trucks 4-DarchetypeArtifactId=maven-archetype-webapp 5-DinteractiveMode=false Maven 将开始处理并且将创建完整的基于 Web 的 java 应用工程结构。
1[INFO] Scanning for projects... 2[INFO] Searching repository for plugin with prefix: &amp;#39;archetype&amp;#39;. 3[INFO] ------------------------------------------------------------------- 4[INFO] Building Maven Default Project 5[INFO] task-segment: [archetype:generate] (aggregator-style) 6[INFO] ------------------------------------------------------------------- 7[INFO] Preparing archetype:generate 8[INFO] No goals needed for project - skipping 9[INFO] [archetype:generate {execution: default-cli}] 10[INFO] Generating project in Batch mode 11[INFO] -------------------------------------------------------------------- 12[INFO] Using following parameters for creating project 13from Old (1.</description></item><item><title>十三、Maven 快照</title><link>https://www.shellio.cc/docs/java/maven/13/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/13/</guid><description>Maven – 快照 大型软件应用程序通常由多个模块组成，这是多个团队工作于同一应用程序的不同模块的常见场景。例如一个团队工作负责应用程序的前端应用用户接口工程（app-ui.jar:1.0)），同时他们使用数据服务工程（data-service.jar:1.0）。
现在负责数据服务的团队可能正在进行修正 bug 或者增强功能，并快速迭代，然后他们几乎每天都会 release 工程库文件到远程仓库中。
现在如果数据服务团队每天上传新的版本，那么就会有下面的问题：
每次数据服务团队发布了一版更新的代码时，都要告诉应用接口团队。 应用接口团队需要定期更新他们的 pom.xml 来得到更新的版本 为了解决这样的情况，快照概念发挥了作用.
什么是快照？ 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 快照是一个特殊的版本，它表示当前开发的一个副本。与常规版本不同，Maven 为每一次构建从远程仓库中检出一份新的快照版本。
现在数据服务团队会将每次更新的代码的快照（例如 data-service:1.0-SNAPSHOT）发布到仓库中，来替换旧的快照 jar 文件。
快照 vs 版本 对于版本，Maven 一旦下载了指定的版本（例如 data-service:1.0），它将不会尝试从仓库里再次下载一个新的 1.0 版本。想要下载新的代码，数据服务版本需要被升级到 1.1。
对于快照，每次用户接口团队构建他们的项目时，Maven 将自动获取最新的快照（data-service:1.0-SNAPSHOT）。
应用用户接口 pom.xml 应用用户接口工程正在使用 1.0 版本的数据服务的快照
1&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; 2 xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; 3 xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 4 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; 5 &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; 6 &amp;lt;groupId&amp;gt;app-ui&amp;lt;/groupId&amp;gt; 7 &amp;lt;artifactId&amp;gt;app-ui&amp;lt;/artifactId&amp;gt; 8 &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt; 9 &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; 10 &amp;lt;name&amp;gt;health&amp;lt;/name&amp;gt; 11 &amp;lt;url&amp;gt;http://maven.apache.org&amp;lt;/url&amp;gt; 12 &amp;lt;properties&amp;gt; 13 &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; 14 &amp;lt;/properties&amp;gt; 15 &amp;lt;dependencies&amp;gt; 16 &amp;lt;dependency&amp;gt; 17 &amp;lt;groupId&amp;gt;data-service&amp;lt;/groupId&amp;gt; 18 &amp;lt;artifactId&amp;gt;data-service&amp;lt;/artifactId&amp;gt; 19 &amp;lt;version&amp;gt;1.</description></item><item><title>十四、Maven 构建自动化</title><link>https://www.shellio.cc/docs/java/maven/14/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/14/</guid><description>Maven – 构建自动化 构建自动化定义为一种场景：一旦该工程成功构建完成，其相关的依赖工程即开始构建，目的是为了保证其依赖项目的稳定。
实例 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 考虑一个团队正在开发一个关于总线核心 Api（称其为 bus-core-api）的工程，依赖它的工程有 2 个，分别为网页 UI（称其为 app-web-ui）和应用程序桌面 UI（称其为 app-desktop-ui）。
app-web-ui 工程使用 1.0-SNAPSHOT 总线核心 Api 工程，其 POM 文件如下：
1&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; 2 xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; 3 xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 4 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; 5 &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; 6 &amp;lt;groupId&amp;gt;app-web-ui&amp;lt;/groupId&amp;gt; 7 &amp;lt;artifactId&amp;gt;app-web-ui&amp;lt;/artifactId&amp;gt; 8 &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt; 9 &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; 10 &amp;lt;dependencies&amp;gt; 11 &amp;lt;dependency&amp;gt; 12 &amp;lt;groupId&amp;gt;bus-core-api&amp;lt;/groupId&amp;gt; 13 &amp;lt;artifactId&amp;gt;bus-core-api&amp;lt;/artifactId&amp;gt; 14 &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; 15 &amp;lt;/dependency&amp;gt; 16 &amp;lt;/dependencies&amp;gt; 17&amp;lt;/project&amp;gt; app-desktop-ui 工程也正在使用 1.0-SNAPSHOT 总线核心 Api 工程，其 POM 文件如下：
1&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; 2 xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; 3 xsi:schemaLocation=&amp;#34;http://maven.</description></item><item><title>十五、Maven 管理依赖</title><link>https://www.shellio.cc/docs/java/maven/15/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/15/</guid><description>Maven – 依赖管理 Maven 核心特点之一是依赖管理。一旦我们开始处理多模块工程（包含数百个子模块或者子工程）的时候，模块间的依赖关系就变得非常复杂，管理也变得很困难。针对此种情形，Maven 提供了一种高度控制的方法。
传递依赖发现 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 这种情形经常可见，当一个库 A 依赖于其他库 B. 另一工程 C 想要使用库 A, 那么该工程同样也需要使用到库 B。
Maven 可以避免去搜索所有需要的库资源的这种需求。通过读取工程文件（pom.xml）中的依赖项，Maven 可以找出工程之间的依赖关系。
我们只需要在每个工程的 pom 文件里去定义直接的依赖关系。Maven 则会自动的来接管后续的工作。
通过传递依赖，所有被包含的库的图形可能会快速的增长。当重复的库存在时，可能出现的情形将会持续上升。Maven 提供一些功能来控制可传递的依赖的程度。
功能 功能描述 依赖调节 决定当多个手动创建的版本同时出现时，哪个依赖版本将会被使用。 如果两个依赖版本在依赖树里的深度是一样的时候，第一个被声明的依赖将会被使用。 依赖管理 直接的指定手动创建的某个版本被使用。例如当一个工程 C 在自己的以来管理模块包含工程 B，即 B 依赖于 A， 那么 A 即可指定在 B 被引用时所使用的版本。 依赖范围 包含在构建过程每个阶段的依赖。 依赖排除 任何可传递的依赖都可以通过 “exclusion” 元素被排除在外。举例说明，A 依赖 B， B 依赖 C，因此 A 可以标记 C 为 “被排除的”。 依赖可选 任何可传递的依赖可以被标记为可选的，通过使用 “optional” 元素。例如：A 依赖 B， B 依赖 C。因此，B 可以标记 C 为可选的， 这样 A 就可以不再使用 C。 依赖范围 传递依赖发现可以通过使用如下的依赖范围来得到限制：</description></item><item><title>十一、Maven 工程文档</title><link>https://www.shellio.cc/docs/java/maven/11/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/11/</guid><description>Maven – 工程文档 本教程将教你如何创建应用程序的文档。那么让我们开始吧，在 C:/ MVN 目录下，创建你的 java consumerBanking 应用程序。打开 consumerBanking 文件夹并执行以下 mvn 命令。
1C:\MVN&amp;gt;mvn site Maven 将开始构建工程。
1[INFO] Scanning for projects... 2[INFO] ------------------------------------------------------------------- 3[INFO] Building consumerBanking 4[INFO]task-segment: [site] 5[INFO] ------------------------------------------------------------------- 6[INFO] [site:site {execution: default-site}] 7[INFO] artifact org.apache.maven.skins:maven-default-skin: 8checking for updates from central 9[INFO] Generating &amp;#34;About&amp;#34; report. 10[INFO] Generating &amp;#34;Issue Tracking&amp;#34; report. 11[INFO] Generating &amp;#34;Project Team&amp;#34; report. 12[INFO] Generating &amp;#34;Dependencies&amp;#34; report. 13[INFO] Generating &amp;#34;Continuous Integration&amp;#34; report. 14[INFO] Generating &amp;#34;Source Repository&amp;#34; report.</description></item><item><title>四、Maven 构建生命周期</title><link>https://www.shellio.cc/docs/java/maven/4/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/4/</guid><description>Maven – 构建生命周期 什么是构建生命周期 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 构建生命周期是一组阶段的序列（sequence of phases），每个阶段定义了目标被执行的顺序。这里的阶段是生命周期的一部分。
举例说明，一个典型的 Maven 构建生命周期是由以下几个阶段的序列组成的：
阶段 处理 描述 prepare-resources 资源拷贝 本阶段可以自定义需要拷贝的资源 compile 编译 本阶段完成源代码编译 package 打包 本阶段根据 pom.xml 中描述的打包配置创建 JAR / WAR 包 install 安装 本阶段在本地 / 远程仓库中安装工程包 当需要在某个特定阶段之前或之后执行目标时，可以使用 pre 和 post 来定义这个目标。
当Maven 开始构建工程，会按照所定义的阶段序列的顺序执行每个阶段注册的目标。Maven 有以下三个标准的生命周期：
clean default(or build) site 目标表示一个特定的、对构建和管理工程有帮助的任务。它可能绑定了 0 个或多个构建阶段。没有绑定任何构建阶段的目标可以在构建生命周期之外被直接调用执行。
执行的顺序依赖于目标和构建阶段被调用的顺序。例如，考虑下面的命令。clean 和 package 参数是构建阶段，而 dependency:copy-dependencies 是一个目标。
1mvn clean dependency:copy-dependencies package 这里的clean 阶段将会被首先执行，然后 dependency:copy-dependencies 目标会被执行，最终 package 阶段被执行。
Clean 生命周期 当我们执行 mvn post-clean 命令时，Maven 调用 clean 生命周期，它包含以下阶段。</description></item><item><title>五、Maven 构建配置文件</title><link>https://www.shellio.cc/docs/java/maven/5/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/5/</guid><description>Maven – 构建配置文件 什么是构建配置文件？ 因初次访问，为防止爬虫和人机识别，请关注微信公众号，回复:‘验证码‘获取验证码来解锁全文 解锁内容 构建配置文件是一组配置的集合，用来设置或者覆盖 Maven 构建的默认配置。使用构建配置文件，可以为不同的环境定制构建过程，例如 Producation 和 Development 环境。
Profile 在 pom.xml 中使用 activeProfiles / profiles 元素指定，并且可以用很多方式触发。Profile 在构建时修改 POM，并且为变量设置不同的目标环境（例如，在开发、测试和产品环境中的数据库服务器路径）。
Profile 类型 Profile 主要有三种类型。
类型 在哪里定义 Per Project 定义在工程 POM 文件 pom.xml 中 Per User 定义在 Maven 设置 xml 文件中 （%USER_HOME%/.m2/settings.xml） Global 定义在 Maven 全局配置 xml 文件中 （%M2_HOME%/conf/settings.xml） Profile 激活 Maven 的 Profile 能够通过几种不同的方式激活。
显式使用命令控制台输入 通过 maven 设置 基于环境变量（用户 / 系统变量） 操作系统配置（例如，Windows family） 现存 / 缺失 文件 Profile 激活示例 我们假定你的工程目录像下面这样：</description></item><item><title>一、Maven 概述</title><link>https://www.shellio.cc/docs/java/maven/1/</link><pubDate>Sat, 21 Oct 2023 12:22:54 +0800</pubDate><guid>https://www.shellio.cc/docs/java/maven/1/</guid><description>Maven – 概述 Maven 是什么？ Maven 是一个项目管理和整合工具。Maven 为开发者提供了一套完整的构建生命周期框架。开发团队几乎不用花多少时间就能够自动完成工程的基础构建配置，因为 Maven 使用了一个标准的目录结构和一个默认的构建生命周期。
在有多个开发团队环境的情况下，Maven 能够在很短的时间内使得每项工作都按照标准进行。因为大部分的工程配置操作都非常简单并且可复用，在创建报告、检查、构建和测试自动配置时，Maven 可以让开发者的工作变得更简单。
Maven 能够帮助开发者完成以下工作：
构建 文档生成 报告 依赖 SCMs 发布 分发 邮件列表 总的来说，Maven 简化了工程的构建过程，并对其标准化。它无缝衔接了编译、发布、文档生成、团队合作和其他任务。Maven 提高了重用性，负责了大部分构建相关的任务。
Maven 的历史 Maven 最初是在 Jakarta Turbine 项目中为了简化构建过程而设计的。项目中有几个子工程，每个工程包含稍有不同的 ANT 文件。JAR 文件使用 CVS 管理。
Apache 小组随后开发了 Maven，能够同时构建多个工程、发布工程信息、部署工程、在几个工程中共享 JAR 文件，并且协助团队合作。
Maven 的目标 Maven 的主要目的是为开发者提供
一个可复用、可维护、更易理解的工程综合模型 与这个模型交互的插件或者工具 Maven 工程结构和内容被定义在一个 xml 文件中 － pom.xml，是 Project Object Model (POM) 的简称，此文件是整个 Maven 系统的基础组件。详细内容请参考 Maven POM 部分。
约定优于配置 Maven 使用约定而不是配置，意味着开发者不需要再自己创建构建过程。
开发者不需要再关心每一个配置细节。Maven 为工程提供了合理的默认行为。当创建 Maven 工程时，Maven 会创建默认的工程结构。开发者只需要合理的放置文件，而在 pom.</description></item></channel></rss>